{
  "ACOUSTIC FLOW VELOCITY(TRANSLATION)": {
    "prefix": "*ACOUSTIC FLOW VELOCITY",
    "body": [
      "*ACOUSTIC FLOW VELOCITY, TRANSLATION=${1}"
    ],
    "description": "ACOUSTIC FLOW VELOCITY with parameter(s) TRANSLATION.",
    "scope": "source.inp"
  },
  "ACOUSTIC FLOW VELOCITY(TRANSLATION, AMPLITUDE)": {
    "prefix": "*ACOUSTIC FLOW VELOCITY",
    "body": [
      "*ACOUSTIC FLOW VELOCITY, TRANSLATION=${1}, AMPLITUDE=${2}"
    ],
    "description": "ACOUSTIC FLOW VELOCITY with parameter(s) TRANSLATION, AMPLITUDE.",
    "scope": "source.inp"
  },
  "ACOUSTIC FLOW VELOCITY(ROTATION)": {
    "prefix": "*ACOUSTIC FLOW VELOCITY",
    "body": [
      "*ACOUSTIC FLOW VELOCITY, ROTATION=${1}"
    ],
    "description": "ACOUSTIC FLOW VELOCITY with parameter(s) ROTATION.",
    "scope": "source.inp"
  },
  "ACOUSTIC FLOW VELOCITY(ROTATION, AMPLITUDE)": {
    "prefix": "*ACOUSTIC FLOW VELOCITY",
    "body": [
      "*ACOUSTIC FLOW VELOCITY, ROTATION=${1}, AMPLITUDE=${2}"
    ],
    "description": "ACOUSTIC FLOW VELOCITY with parameter(s) ROTATION, AMPLITUDE.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM()": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM"
    ],
    "description": "ACOUSTIC MEDIUM without parameter(s).",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, DEPENDENCIES=${1}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(BULK MODULUS, DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, BULK MODULUS=${1}, DEPENDENCIES=${2}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) BULK MODULUS, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(CAVITATION LIMIT, DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, CAVITATION LIMIT=${1}, DEPENDENCIES=${2}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) CAVITATION LIMIT, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(COMPLEX BULK MODULUS, DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, COMPLEX BULK MODULUS=${1}, DEPENDENCIES=${2}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) COMPLEX BULK MODULUS, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(COMPLEX DENSITY, DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, COMPLEX DENSITY=${1}, DEPENDENCIES=${2}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) COMPLEX DENSITY, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(POROUS MODEL, DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, POROUS MODEL=${1}, DEPENDENCIES=${2}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) POROUS MODEL, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC MEDIUM(VOLUMETRIC DRAG, DEPENDENCIES)": {
    "prefix": "*ACOUSTIC MEDIUM",
    "body": [
      "*ACOUSTIC MEDIUM, VOLUMETRIC DRAG=${1}, DEPENDENCIES=${2}"
    ],
    "description": "ACOUSTIC MEDIUM with parameter(s) VOLUMETRIC DRAG, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ACOUSTIC WAVE FORMULATION()": {
    "prefix": "*ACOUSTIC WAVE FORMULATION",
    "body": [
      "*ACOUSTIC WAVE FORMULATION"
    ],
    "description": "ACOUSTIC WAVE FORMULATION without parameter(s).",
    "scope": "source.inp"
  },
  "ACOUSTIC WAVE FORMULATION(TYPE)": {
    "prefix": "*ACOUSTIC WAVE FORMULATION",
    "body": [
      "*ACOUSTIC WAVE FORMULATION, TYPE=${1}"
    ],
    "description": "ACOUSTIC WAVE FORMULATION with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH CONSTRAINT()": {
    "prefix": "*ADAPTIVE MESH CONSTRAINT",
    "body": [
      "*ADAPTIVE MESH CONSTRAINT"
    ],
    "description": "ADAPTIVE MESH CONSTRAINT without parameter(s).",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH CONSTRAINT(AMPLITUDE, CONSTRAINT TYPE, OP, TYPE, USER)": {
    "prefix": "*ADAPTIVE MESH CONSTRAINT",
    "body": [
      "*ADAPTIVE MESH CONSTRAINT, AMPLITUDE=${1}, CONSTRAINT TYPE=${2}, OP=${3}, TYPE=${4}, USER=${5}"
    ],
    "description": "ADAPTIVE MESH CONSTRAINT with parameter(s) AMPLITUDE, CONSTRAINT TYPE, OP, TYPE, USER.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH CONTROLS(NAME)": {
    "prefix": "*ADAPTIVE MESH CONTROLS",
    "body": [
      "*ADAPTIVE MESH CONTROLS, NAME=${1}"
    ],
    "description": "ADAPTIVE MESH CONTROLS with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH CONTROLS(NAME, ADVECTION, CURVATURE REFINEMENT, GEOMETRIC ENHANCEMENT, INITIAL FEATURE ANGLE, MESH CONSTRAINT ANGLE, MESHING PREDICTOR, MOMENTUM ADVECTION, RESET, SMOOTHING OBJECTIVE, TRANSITION FEATURE ANGLE)": {
    "prefix": "*ADAPTIVE MESH CONTROLS",
    "body": [
      "*ADAPTIVE MESH CONTROLS, NAME=${1}, ADVECTION=${2}, CURVATURE REFINEMENT=${3}, GEOMETRIC ENHANCEMENT=${4}, INITIAL FEATURE ANGLE=${5}, MESH CONSTRAINT ANGLE=${6}, MESHING PREDICTOR=${7}, MOMENTUM ADVECTION=${8}, RESET=${9}, SMOOTHING OBJECTIVE=${10}, TRANSITION FEATURE ANGLE=${11}"
    ],
    "description": "ADAPTIVE MESH CONTROLS with parameter(s) NAME, ADVECTION, CURVATURE REFINEMENT, GEOMETRIC ENHANCEMENT, INITIAL FEATURE ANGLE, MESH CONSTRAINT ANGLE, MESHING PREDICTOR, MOMENTUM ADVECTION, RESET, SMOOTHING OBJECTIVE, TRANSITION FEATURE ANGLE.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH REFINEMENT(ELSET)": {
    "prefix": "*ADAPTIVE MESH REFINEMENT",
    "body": [
      "*ADAPTIVE MESH REFINEMENT, ELSET=${1}"
    ],
    "description": "ADAPTIVE MESH REFINEMENT with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH REFINEMENT(ELSET, RATIO)": {
    "prefix": "*ADAPTIVE MESH REFINEMENT",
    "body": [
      "*ADAPTIVE MESH REFINEMENT, ELSET=${1}, RATIO=${2}"
    ],
    "description": "ADAPTIVE MESH REFINEMENT with parameter(s) ELSET, RATIO.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH(ELSET, OP)": {
    "prefix": "*ADAPTIVE MESH",
    "body": [
      "*ADAPTIVE MESH, ELSET=${1}, OP=${2}"
    ],
    "description": "ADAPTIVE MESH with parameter(s) ELSET, OP.",
    "scope": "source.inp"
  },
  "ADAPTIVE MESH(ELSET, OP, CONTROLS, FREQUENCY, INITIAL MESH SWEEPS, MESH SWEEPS)": {
    "prefix": "*ADAPTIVE MESH",
    "body": [
      "*ADAPTIVE MESH, ELSET=${1}, OP=${2}, CONTROLS=${3}, FREQUENCY=${4}, INITIAL MESH SWEEPS=${5}, MESH SWEEPS=${6}"
    ],
    "description": "ADAPTIVE MESH with parameter(s) ELSET, OP, CONTROLS, FREQUENCY, INITIAL MESH SWEEPS, MESH SWEEPS.",
    "scope": "source.inp"
  },
  "ADJUST(NODE SET, SURFACE)": {
    "prefix": "*ADJUST",
    "body": [
      "*ADJUST, NODE SET=${1}, SURFACE=${2}"
    ],
    "description": "ADJUST with parameter(s) NODE SET, SURFACE.",
    "scope": "source.inp"
  },
  "ADJUST(NODE SET, SURFACE, ORIENTATION)": {
    "prefix": "*ADJUST",
    "body": [
      "*ADJUST, NODE SET=${1}, SURFACE=${2}, ORIENTATION=${3}"
    ],
    "description": "ADJUST with parameter(s) NODE SET, SURFACE, ORIENTATION.",
    "scope": "source.inp"
  },
  "AMPLITUDE(NAME)": {
    "prefix": "*AMPLITUDE",
    "body": [
      "*AMPLITUDE, NAME=${1}"
    ],
    "description": "AMPLITUDE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "AMPLITUDE(NAME, DEFINITION, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE)": {
    "prefix": "*AMPLITUDE",
    "body": [
      "*AMPLITUDE, NAME=${1}, DEFINITION=${2}, INPUT=${3}, SCALEX=${4}, SCALEY=${5}, SHIFTX=${6}, SHIFTY=${7}, TIME=${8}, VALUE=${9}"
    ],
    "description": "AMPLITUDE with parameter(s) NAME, DEFINITION, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE.",
    "scope": "source.inp"
  },
  "AMPLITUDE(NAME, FIXED INTERVAL, DEFINITION=EQUALLY SPACED, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, BEGIN)": {
    "prefix": "*AMPLITUDE",
    "body": [
      "*AMPLITUDE, NAME=${1}, FIXED INTERVAL=${2}, DEFINITION=EQUALLY SPACED, INPUT=${3}, SCALEX=${4}, SCALEY=${5}, SHIFTX=${6}, SHIFTY=${7}, TIME=${8}, VALUE=${9}, BEGIN=${10}"
    ],
    "description": "AMPLITUDE with parameter(s) NAME, FIXED INTERVAL, DEFINITION=EQUALLY SPACED, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, BEGIN.",
    "scope": "source.inp"
  },
  "AMPLITUDE(NAME, FIXED INTERVAL, DEFINITION=EQUALLY SPACED, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, BEGIN, SMOOTH)": {
    "prefix": "*AMPLITUDE",
    "body": [
      "*AMPLITUDE, NAME=${1}, FIXED INTERVAL=${2}, DEFINITION=EQUALLY SPACED, INPUT=${3}, SCALEX=${4}, SCALEY=${5}, SHIFTX=${6}, SHIFTY=${7}, TIME=${8}, VALUE=${9}, BEGIN=${10}, SMOOTH=${11}"
    ],
    "description": "AMPLITUDE with parameter(s) NAME, FIXED INTERVAL, DEFINITION=EQUALLY SPACED, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, BEGIN, SMOOTH.",
    "scope": "source.inp"
  },
  "AMPLITUDE(NAME, DEFINITION=TABULAR, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, SMOOTH)": {
    "prefix": "*AMPLITUDE",
    "body": [
      "*AMPLITUDE, NAME=${1}, DEFINITION=TABULAR, INPUT=${2}, SCALEX=${3}, SCALEY=${4}, SHIFTX=${5}, SHIFTY=${6}, TIME=${7}, VALUE=${8}, SMOOTH=${9}"
    ],
    "description": "AMPLITUDE with parameter(s) NAME, DEFINITION=TABULAR, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, SMOOTH.",
    "scope": "source.inp"
  },
  "AMPLITUDE(NAME, NAME, DEFINITION=USER, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, PROPERTIES, VARIABLES)": {
    "prefix": "*AMPLITUDE",
    "body": [
      "*AMPLITUDE, NAME=${1}, NAME=${2}, DEFINITION=USER, INPUT=${3}, SCALEX=${4}, SCALEY=${5}, SHIFTX=${6}, SHIFTY=${7}, TIME=${8}, VALUE=${9}, PROPERTIES=${10}, VARIABLES=${11}"
    ],
    "description": "AMPLITUDE with parameter(s) NAME, NAME, DEFINITION=USER, INPUT, SCALEX, SCALEY, SHIFTX, SHIFTY, TIME, VALUE, PROPERTIES, VARIABLES.",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC()": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC"
    ],
    "description": "ANISOTROPIC HYPERELASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC(FORMULATION, TYPE, USER)": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC, FORMULATION=${1}, TYPE=${2}, USER=${3}"
    ],
    "description": "ANISOTROPIC HYPERELASTIC with parameter(s) FORMULATION, TYPE, USER.",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC(FUNG-ANISOTROPIC, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES)": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC, FUNG-ANISOTROPIC=${1}, DEPENDENCIES=${2}, LOCAL DIRECTIONS=${3}, MODULI=${4}, PROPERTIES=${5}"
    ],
    "description": "ANISOTROPIC HYPERELASTIC with parameter(s) FUNG-ANISOTROPIC, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES.",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC(FUNG-ORTHOTROPIC, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES)": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC, FUNG-ORTHOTROPIC=${1}, DEPENDENCIES=${2}, LOCAL DIRECTIONS=${3}, MODULI=${4}, PROPERTIES=${5}"
    ],
    "description": "ANISOTROPIC HYPERELASTIC with parameter(s) FUNG-ORTHOTROPIC, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES.",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC(HOLZAPFEL, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES)": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC, HOLZAPFEL=${1}, DEPENDENCIES=${2}, LOCAL DIRECTIONS=${3}, MODULI=${4}, PROPERTIES=${5}"
    ],
    "description": "ANISOTROPIC HYPERELASTIC with parameter(s) HOLZAPFEL, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES.",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC(USER, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES)": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC, USER=${1}, DEPENDENCIES=${2}, LOCAL DIRECTIONS=${3}, MODULI=${4}, PROPERTIES=${5}"
    ],
    "description": "ANISOTROPIC HYPERELASTIC with parameter(s) USER, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES.",
    "scope": "source.inp"
  },
  "ANISOTROPIC HYPERELASTIC(FORMULATION, TYPE, USER, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES)": {
    "prefix": "*ANISOTROPIC HYPERELASTIC",
    "body": [
      "*ANISOTROPIC HYPERELASTIC, FORMULATION=${1}, TYPE=${2}, USER=${3}, DEPENDENCIES=${4}, LOCAL DIRECTIONS=${5}, MODULI=${6}, PROPERTIES=${7}"
    ],
    "description": "ANISOTROPIC HYPERELASTIC with parameter(s) FORMULATION, TYPE, USER, DEPENDENCIES, LOCAL DIRECTIONS, MODULI, PROPERTIES.",
    "scope": "source.inp"
  },
  "ANNEAL TEMPERATURE()": {
    "prefix": "*ANNEAL TEMPERATURE",
    "body": [
      "*ANNEAL TEMPERATURE"
    ],
    "description": "ANNEAL TEMPERATURE without parameter(s).",
    "scope": "source.inp"
  },
  "ANNEAL TEMPERATURE(DEPENDENCIES)": {
    "prefix": "*ANNEAL TEMPERATURE",
    "body": [
      "*ANNEAL TEMPERATURE, DEPENDENCIES=${1}"
    ],
    "description": "ANNEAL TEMPERATURE with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "ANNEAL()": {
    "prefix": "*ANNEAL",
    "body": [
      "*ANNEAL"
    ],
    "description": "ANNEAL without parameter(s).",
    "scope": "source.inp"
  },
  "ANNEAL(TEMPERATURE)": {
    "prefix": "*ANNEAL",
    "body": [
      "*ANNEAL, TEMPERATURE=${1}"
    ],
    "description": "ANNEAL with parameter(s) TEMPERATURE.",
    "scope": "source.inp"
  },
  "AQUA()": {
    "prefix": "*AQUA",
    "body": [
      "*AQUA"
    ],
    "description": "AQUA without parameter(s).",
    "scope": "source.inp"
  },
  "AQUA(INPUT)": {
    "prefix": "*AQUA",
    "body": [
      "*AQUA, INPUT=${1}"
    ],
    "description": "AQUA with parameter(s) INPUT.",
    "scope": "source.inp"
  },
  "ASSEMBLY(NAME)": {
    "prefix": "*ASSEMBLY",
    "body": [
      "*ASSEMBLY, NAME=${1}"
    ],
    "description": "ASSEMBLY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "ASYMMETRIC-AXISYMMETRIC(ANGLE, MODE)": {
    "prefix": "*ASYMMETRIC-AXISYMMETRIC",
    "body": [
      "*ASYMMETRIC-AXISYMMETRIC, ANGLE=${1}, MODE=${2}"
    ],
    "description": "ASYMMETRIC-AXISYMMETRIC with parameter(s) ANGLE, MODE.",
    "scope": "source.inp"
  },
  "AXIAL()": {
    "prefix": "*AXIAL",
    "body": [
      "*AXIAL"
    ],
    "description": "AXIAL without parameter(s).",
    "scope": "source.inp"
  },
  "AXIAL(DEPENDENCIES, ELASTIC, LINEAR)": {
    "prefix": "*AXIAL",
    "body": [
      "*AXIAL, DEPENDENCIES=${1}, ELASTIC=${2}, LINEAR=${3}"
    ],
    "description": "AXIAL with parameter(s) DEPENDENCIES, ELASTIC, LINEAR.",
    "scope": "source.inp"
  },
  "BASE MOTION(DOF)": {
    "prefix": "*BASE MOTION",
    "body": [
      "*BASE MOTION, DOF=${1}"
    ],
    "description": "BASE MOTION with parameter(s) DOF.",
    "scope": "source.inp"
  },
  "BASE MOTION(DOF, AMPLITUDE)": {
    "prefix": "*BASE MOTION",
    "body": [
      "*BASE MOTION, DOF=${1}, AMPLITUDE=${2}"
    ],
    "description": "BASE MOTION with parameter(s) DOF, AMPLITUDE.",
    "scope": "source.inp"
  },
  "BASE MOTION(DOF, BASE NAME, LOAD CASE, SCALE, TYPE)": {
    "prefix": "*BASE MOTION",
    "body": [
      "*BASE MOTION, DOF=${1}, BASE NAME=${2}, LOAD CASE=${3}, SCALE=${4}, TYPE=${5}"
    ],
    "description": "BASE MOTION with parameter(s) DOF, BASE NAME, LOAD CASE, SCALE, TYPE.",
    "scope": "source.inp"
  },
  "BASE MOTION(DOF, AMPLITUDE, BASE NAME, LOAD CASE, SCALE, TYPE, IMAGINARY)": {
    "prefix": "*BASE MOTION",
    "body": [
      "*BASE MOTION, DOF=${1}, AMPLITUDE=${2}, BASE NAME=${3}, LOAD CASE=${4}, SCALE=${5}, TYPE=${6}, IMAGINARY=${7}"
    ],
    "description": "BASE MOTION with parameter(s) DOF, AMPLITUDE, BASE NAME, LOAD CASE, SCALE, TYPE, IMAGINARY.",
    "scope": "source.inp"
  },
  "BASE MOTION(DOF, AMPLITUDE, BASE NAME, LOAD CASE, SCALE, TYPE, REAL)": {
    "prefix": "*BASE MOTION",
    "body": [
      "*BASE MOTION, DOF=${1}, AMPLITUDE=${2}, BASE NAME=${3}, LOAD CASE=${4}, SCALE=${5}, TYPE=${6}, REAL=${7}"
    ],
    "description": "BASE MOTION with parameter(s) DOF, AMPLITUDE, BASE NAME, LOAD CASE, SCALE, TYPE, REAL.",
    "scope": "source.inp"
  },
  "BASELINE CORRECTION()": {
    "prefix": "*BASELINE CORRECTION",
    "body": [
      "*BASELINE CORRECTION"
    ],
    "description": "BASELINE CORRECTION without parameter(s).",
    "scope": "source.inp"
  },
  "BEAM ADDED INERTIA()": {
    "prefix": "*BEAM ADDED INERTIA",
    "body": [
      "*BEAM ADDED INERTIA"
    ],
    "description": "BEAM ADDED INERTIA without parameter(s).",
    "scope": "source.inp"
  },
  "BEAM ADDED INERTIA(ALPHA, COMPOSITE)": {
    "prefix": "*BEAM ADDED INERTIA",
    "body": [
      "*BEAM ADDED INERTIA, ALPHA=${1}, COMPOSITE=${2}"
    ],
    "description": "BEAM ADDED INERTIA with parameter(s) ALPHA, COMPOSITE.",
    "scope": "source.inp"
  },
  "BEAM FLUID INERTIA()": {
    "prefix": "*BEAM FLUID INERTIA",
    "body": [
      "*BEAM FLUID INERTIA"
    ],
    "description": "BEAM FLUID INERTIA without parameter(s).",
    "scope": "source.inp"
  },
  "BEAM FLUID INERTIA(HALF)": {
    "prefix": "*BEAM FLUID INERTIA",
    "body": [
      "*BEAM FLUID INERTIA, HALF=${1}"
    ],
    "description": "BEAM FLUID INERTIA with parameter(s) HALF.",
    "scope": "source.inp"
  },
  "BEAM FLUID INERTIA(FULL)": {
    "prefix": "*BEAM FLUID INERTIA",
    "body": [
      "*BEAM FLUID INERTIA, FULL=${1}"
    ],
    "description": "BEAM FLUID INERTIA with parameter(s) FULL.",
    "scope": "source.inp"
  },
  "BEAM GENERAL SECTION(ELSET, DENSITY)": {
    "prefix": "*BEAM GENERAL SECTION",
    "body": [
      "*BEAM GENERAL SECTION, ELSET=${1}, DENSITY=${2}"
    ],
    "description": "BEAM GENERAL SECTION with parameter(s) ELSET, DENSITY.",
    "scope": "source.inp"
  },
  "BEAM GENERAL SECTION(ELSET, DENSITY, DEPENDENCIES, LUMPED, POISSON, ROTARY INERTIA, SECTION, TAPER, ZERO)": {
    "prefix": "*BEAM GENERAL SECTION",
    "body": [
      "*BEAM GENERAL SECTION, ELSET=${1}, DENSITY=${2}, DEPENDENCIES=${3}, LUMPED=${4}, POISSON=${5}, ROTARY INERTIA=${6}, SECTION=${7}, TAPER=${8}, ZERO=${9}"
    ],
    "description": "BEAM GENERAL SECTION with parameter(s) ELSET, DENSITY, DEPENDENCIES, LUMPED, POISSON, ROTARY INERTIA, SECTION, TAPER, ZERO.",
    "scope": "source.inp"
  },
  "BEAM GENERAL SECTION(ELSET)": {
    "prefix": "*BEAM GENERAL SECTION",
    "body": [
      "*BEAM GENERAL SECTION, ELSET=${1}"
    ],
    "description": "BEAM GENERAL SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "BEAM GENERAL SECTION(ELSET, DEPENDENCIES, LUMPED, POISSON, ROTARY INERTIA, SECTION, TAPER, ZERO)": {
    "prefix": "*BEAM GENERAL SECTION",
    "body": [
      "*BEAM GENERAL SECTION, ELSET=${1}, DEPENDENCIES=${2}, LUMPED=${3}, POISSON=${4}, ROTARY INERTIA=${5}, SECTION=${6}, TAPER=${7}, ZERO=${8}"
    ],
    "description": "BEAM GENERAL SECTION with parameter(s) ELSET, DEPENDENCIES, LUMPED, POISSON, ROTARY INERTIA, SECTION, TAPER, ZERO.",
    "scope": "source.inp"
  },
  "BEAM SECTION GENERATE()": {
    "prefix": "*BEAM SECTION GENERATE",
    "body": [
      "*BEAM SECTION GENERATE"
    ],
    "description": "BEAM SECTION GENERATE without parameter(s).",
    "scope": "source.inp"
  },
  "BEAM SECTION(ELSET, MATERIAL, SECTION)": {
    "prefix": "*BEAM SECTION",
    "body": [
      "*BEAM SECTION, ELSET=${1}, MATERIAL=${2}, SECTION=${3}"
    ],
    "description": "BEAM SECTION with parameter(s) ELSET, MATERIAL, SECTION.",
    "scope": "source.inp"
  },
  "BEAM SECTION(ELSET, MATERIAL, SECTION, LUMPED, POISSON, ROTARY INERTIA, TEMPERATURE)": {
    "prefix": "*BEAM SECTION",
    "body": [
      "*BEAM SECTION, ELSET=${1}, MATERIAL=${2}, SECTION=${3}, LUMPED=${4}, POISSON=${5}, ROTARY INERTIA=${6}, TEMPERATURE=${7}"
    ],
    "description": "BEAM SECTION with parameter(s) ELSET, MATERIAL, SECTION, LUMPED, POISSON, ROTARY INERTIA, TEMPERATURE.",
    "scope": "source.inp"
  },
  "BIAXIAL TEST DATA()": {
    "prefix": "*BIAXIAL TEST DATA",
    "body": [
      "*BIAXIAL TEST DATA"
    ],
    "description": "BIAXIAL TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "BIAXIAL TEST DATA(SMOOTH, DEPENDENCIES)": {
    "prefix": "*BIAXIAL TEST DATA",
    "body": [
      "*BIAXIAL TEST DATA, SMOOTH=${1}, DEPENDENCIES=${2}"
    ],
    "description": "BIAXIAL TEST DATA with parameter(s) SMOOTH, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "BLOCKAGE()": {
    "prefix": "*BLOCKAGE",
    "body": [
      "*BLOCKAGE"
    ],
    "description": "BLOCKAGE without parameter(s).",
    "scope": "source.inp"
  },
  "BOND()": {
    "prefix": "*BOND",
    "body": [
      "*BOND"
    ],
    "description": "BOND without parameter(s).",
    "scope": "source.inp"
  },
  "BOUNDARY()": {
    "prefix": "*BOUNDARY",
    "body": [
      "*BOUNDARY"
    ],
    "description": "BOUNDARY without parameter(s).",
    "scope": "source.inp"
  },
  "BOUNDARY(BASE NAME)": {
    "prefix": "*BOUNDARY",
    "body": [
      "*BOUNDARY, BASE NAME=${1}"
    ],
    "description": "BOUNDARY with parameter(s) BASE NAME.",
    "scope": "source.inp"
  },
  "BOUNDARY(STEP, SUBMODEL)": {
    "prefix": "*BOUNDARY",
    "body": [
      "*BOUNDARY, STEP=${1}, SUBMODEL=${2}"
    ],
    "description": "BOUNDARY with parameter(s) STEP, SUBMODEL.",
    "scope": "source.inp"
  },
  "BOUNDARY(STEP, SUBMODEL, INC, OP, SCALE, TIMESCALE)": {
    "prefix": "*BOUNDARY",
    "body": [
      "*BOUNDARY, STEP=${1}, SUBMODEL=${2}, INC=${3}, OP=${4}, SCALE=${5}, TIMESCALE=${6}"
    ],
    "description": "BOUNDARY with parameter(s) STEP, SUBMODEL, INC, OP, SCALE, TIMESCALE.",
    "scope": "source.inp"
  },
  "BOUNDARY(AMPLITUDE, BLOCKING, FIXED, LOAD CASE, NAME, OP, PHANTOM, REGION TYPE, TYPE, USER, IMAGINARY)": {
    "prefix": "*BOUNDARY",
    "body": [
      "*BOUNDARY, AMPLITUDE=${1}, BLOCKING=${2}, FIXED=${3}, LOAD CASE=${4}, NAME=${5}, OP=${6}, PHANTOM=${7}, REGION TYPE=${8}, TYPE=${9}, USER=${10}, IMAGINARY=${11}"
    ],
    "description": "BOUNDARY with parameter(s) AMPLITUDE, BLOCKING, FIXED, LOAD CASE, NAME, OP, PHANTOM, REGION TYPE, TYPE, USER, IMAGINARY.",
    "scope": "source.inp"
  },
  "BOUNDARY(AMPLITUDE, BLOCKING, FIXED, LOAD CASE, NAME, OP, PHANTOM, REGION TYPE, TYPE, USER, REAL)": {
    "prefix": "*BOUNDARY",
    "body": [
      "*BOUNDARY, AMPLITUDE=${1}, BLOCKING=${2}, FIXED=${3}, LOAD CASE=${4}, NAME=${5}, OP=${6}, PHANTOM=${7}, REGION TYPE=${8}, TYPE=${9}, USER=${10}, REAL=${11}"
    ],
    "description": "BOUNDARY with parameter(s) AMPLITUDE, BLOCKING, FIXED, LOAD CASE, NAME, OP, PHANTOM, REGION TYPE, TYPE, USER, REAL.",
    "scope": "source.inp"
  },
  "BRITTLE CRACKING()": {
    "prefix": "*BRITTLE CRACKING",
    "body": [
      "*BRITTLE CRACKING"
    ],
    "description": "BRITTLE CRACKING without parameter(s).",
    "scope": "source.inp"
  },
  "BRITTLE CRACKING(DEPENDENCIES, TYPE)": {
    "prefix": "*BRITTLE CRACKING",
    "body": [
      "*BRITTLE CRACKING, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "BRITTLE CRACKING with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "BRITTLE FAILURE()": {
    "prefix": "*BRITTLE FAILURE",
    "body": [
      "*BRITTLE FAILURE"
    ],
    "description": "BRITTLE FAILURE without parameter(s).",
    "scope": "source.inp"
  },
  "BRITTLE FAILURE(CRACKS, DEPENDENCIES)": {
    "prefix": "*BRITTLE FAILURE",
    "body": [
      "*BRITTLE FAILURE, CRACKS=${1}, DEPENDENCIES=${2}"
    ],
    "description": "BRITTLE FAILURE with parameter(s) CRACKS, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "BRITTLE SHEAR()": {
    "prefix": "*BRITTLE SHEAR",
    "body": [
      "*BRITTLE SHEAR"
    ],
    "description": "BRITTLE SHEAR without parameter(s).",
    "scope": "source.inp"
  },
  "BRITTLE SHEAR(DEPENDENCIES, TYPE)": {
    "prefix": "*BRITTLE SHEAR",
    "body": [
      "*BRITTLE SHEAR, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "BRITTLE SHEAR with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "BUCKLE()": {
    "prefix": "*BUCKLE",
    "body": [
      "*BUCKLE"
    ],
    "description": "BUCKLE without parameter(s).",
    "scope": "source.inp"
  },
  "BUCKLE(EIGENSOLVER)": {
    "prefix": "*BUCKLE",
    "body": [
      "*BUCKLE, EIGENSOLVER=${1}"
    ],
    "description": "BUCKLE with parameter(s) EIGENSOLVER.",
    "scope": "source.inp"
  },
  "BUCKLING ENVELOPE()": {
    "prefix": "*BUCKLING ENVELOPE",
    "body": [
      "*BUCKLING ENVELOPE"
    ],
    "description": "BUCKLING ENVELOPE without parameter(s).",
    "scope": "source.inp"
  },
  "BUCKLING LENGTH()": {
    "prefix": "*BUCKLING LENGTH",
    "body": [
      "*BUCKLING LENGTH"
    ],
    "description": "BUCKLING LENGTH without parameter(s).",
    "scope": "source.inp"
  },
  "BUCKLING REDUCTION FACTORS()": {
    "prefix": "*BUCKLING REDUCTION FACTORS",
    "body": [
      "*BUCKLING REDUCTION FACTORS"
    ],
    "description": "BUCKLING REDUCTION FACTORS without parameter(s).",
    "scope": "source.inp"
  },
  "BUCKLING REDUCTION FACTORS(AXIS1, AXIS2)": {
    "prefix": "*BUCKLING REDUCTION FACTORS",
    "body": [
      "*BUCKLING REDUCTION FACTORS, AXIS1=${1}, AXIS2=${2}"
    ],
    "description": "BUCKLING REDUCTION FACTORS with parameter(s) AXIS1, AXIS2.",
    "scope": "source.inp"
  },
  "BULK VISCOSITY()": {
    "prefix": "*BULK VISCOSITY",
    "body": [
      "*BULK VISCOSITY"
    ],
    "description": "BULK VISCOSITY without parameter(s).",
    "scope": "source.inp"
  },
  "C ADDED MASS()": {
    "prefix": "*C ADDED MASS",
    "body": [
      "*C ADDED MASS"
    ],
    "description": "C ADDED MASS without parameter(s).",
    "scope": "source.inp"
  },
  "CAP CREEP()": {
    "prefix": "*CAP CREEP",
    "body": [
      "*CAP CREEP"
    ],
    "description": "CAP CREEP without parameter(s).",
    "scope": "source.inp"
  },
  "CAP CREEP(DEPENDENCIES, LAW, MECHANISM, TIME)": {
    "prefix": "*CAP CREEP",
    "body": [
      "*CAP CREEP, DEPENDENCIES=${1}, LAW=${2}, MECHANISM=${3}, TIME=${4}"
    ],
    "description": "CAP CREEP with parameter(s) DEPENDENCIES, LAW, MECHANISM, TIME.",
    "scope": "source.inp"
  },
  "CAP HARDENING()": {
    "prefix": "*CAP HARDENING",
    "body": [
      "*CAP HARDENING"
    ],
    "description": "CAP HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CAP HARDENING(DEPENDENCIES, SCALESTRESS)": {
    "prefix": "*CAP HARDENING",
    "body": [
      "*CAP HARDENING, DEPENDENCIES=${1}, SCALESTRESS=${2}"
    ],
    "description": "CAP HARDENING with parameter(s) DEPENDENCIES, SCALESTRESS.",
    "scope": "source.inp"
  },
  "CAP PLASTICITY()": {
    "prefix": "*CAP PLASTICITY",
    "body": [
      "*CAP PLASTICITY"
    ],
    "description": "CAP PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "CAP PLASTICITY(DEPENDENCIES)": {
    "prefix": "*CAP PLASTICITY",
    "body": [
      "*CAP PLASTICITY, DEPENDENCIES=${1}"
    ],
    "description": "CAP PLASTICITY with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CAPACITY(TYPE)": {
    "prefix": "*CAPACITY",
    "body": [
      "*CAPACITY, TYPE=${1}"
    ],
    "description": "CAPACITY with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "CAPACITY(TYPE, DEPENDENCIES)": {
    "prefix": "*CAPACITY",
    "body": [
      "*CAPACITY, TYPE=${1}, DEPENDENCIES=${2}"
    ],
    "description": "CAPACITY with parameter(s) TYPE, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CAST IRON COMPRESSION HARDENING()": {
    "prefix": "*CAST IRON COMPRESSION HARDENING",
    "body": [
      "*CAST IRON COMPRESSION HARDENING"
    ],
    "description": "CAST IRON COMPRESSION HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CAST IRON COMPRESSION HARDENING(DEPENDENCIES)": {
    "prefix": "*CAST IRON COMPRESSION HARDENING",
    "body": [
      "*CAST IRON COMPRESSION HARDENING, DEPENDENCIES=${1}"
    ],
    "description": "CAST IRON COMPRESSION HARDENING with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CAST IRON PLASTICITY()": {
    "prefix": "*CAST IRON PLASTICITY",
    "body": [
      "*CAST IRON PLASTICITY"
    ],
    "description": "CAST IRON PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "CAST IRON PLASTICITY(DEPENDENCIES)": {
    "prefix": "*CAST IRON PLASTICITY",
    "body": [
      "*CAST IRON PLASTICITY, DEPENDENCIES=${1}"
    ],
    "description": "CAST IRON PLASTICITY with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CAST IRON TENSION HARDENING()": {
    "prefix": "*CAST IRON TENSION HARDENING",
    "body": [
      "*CAST IRON TENSION HARDENING"
    ],
    "description": "CAST IRON TENSION HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CAST IRON TENSION HARDENING(DEPENDENCIES)": {
    "prefix": "*CAST IRON TENSION HARDENING",
    "body": [
      "*CAST IRON TENSION HARDENING, DEPENDENCIES=${1}"
    ],
    "description": "CAST IRON TENSION HARDENING with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CAVITY DEFINITION(NAME)": {
    "prefix": "*CAVITY DEFINITION",
    "body": [
      "*CAVITY DEFINITION, NAME=${1}"
    ],
    "description": "CAVITY DEFINITION with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "CAVITY DEFINITION(NAME, AMBIENT TEMP, PARALLEL DECOMPOSITION, SET PROPERTY)": {
    "prefix": "*CAVITY DEFINITION",
    "body": [
      "*CAVITY DEFINITION, NAME=${1}, AMBIENT TEMP=${2}, PARALLEL DECOMPOSITION=${3}, SET PROPERTY=${4}"
    ],
    "description": "CAVITY DEFINITION with parameter(s) NAME, AMBIENT TEMP, PARALLEL DECOMPOSITION, SET PROPERTY.",
    "scope": "source.inp"
  },
  "CECHARGE()": {
    "prefix": "*CECHARGE",
    "body": [
      "*CECHARGE"
    ],
    "description": "CECHARGE without parameter(s).",
    "scope": "source.inp"
  },
  "CECHARGE(AMPLITUDE, OP)": {
    "prefix": "*CECHARGE",
    "body": [
      "*CECHARGE, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "CECHARGE with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "CECHARGE(AMPLITUDE, OP, IMAGINARY)": {
    "prefix": "*CECHARGE",
    "body": [
      "*CECHARGE, AMPLITUDE=${1}, OP=${2}, IMAGINARY=${3}"
    ],
    "description": "CECHARGE with parameter(s) AMPLITUDE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "CECHARGE(AMPLITUDE, OP, REAL)": {
    "prefix": "*CECHARGE",
    "body": [
      "*CECHARGE, AMPLITUDE=${1}, OP=${2}, REAL=${3}"
    ],
    "description": "CECHARGE with parameter(s) AMPLITUDE, OP, REAL.",
    "scope": "source.inp"
  },
  "CECURRENT()": {
    "prefix": "*CECURRENT",
    "body": [
      "*CECURRENT"
    ],
    "description": "CECURRENT without parameter(s).",
    "scope": "source.inp"
  },
  "CECURRENT(AMPLITUDE, OP)": {
    "prefix": "*CECURRENT",
    "body": [
      "*CECURRENT, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "CECURRENT with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "CENTROID()": {
    "prefix": "*CENTROID",
    "body": [
      "*CENTROID"
    ],
    "description": "CENTROID without parameter(s).",
    "scope": "source.inp"
  },
  "CFD(INCOMPRESSIBLE NAVIER STOKES)": {
    "prefix": "*CFD",
    "body": [
      "*CFD, INCOMPRESSIBLE NAVIER STOKES=${1}"
    ],
    "description": "CFD with parameter(s) INCOMPRESSIBLE NAVIER STOKES.",
    "scope": "source.inp"
  },
  "CFD(INCOMPRESSIBLE NAVIER STOKES, ENERGY EQUATION, INCREMENTATION)": {
    "prefix": "*CFD",
    "body": [
      "*CFD, INCOMPRESSIBLE NAVIER STOKES=${1}, ENERGY EQUATION=${2}, INCREMENTATION=${3}"
    ],
    "description": "CFD with parameter(s) INCOMPRESSIBLE NAVIER STOKES, ENERGY EQUATION, INCREMENTATION.",
    "scope": "source.inp"
  },
  "CFILM()": {
    "prefix": "*CFILM",
    "body": [
      "*CFILM"
    ],
    "description": "CFILM without parameter(s).",
    "scope": "source.inp"
  },
  "CFILM(AMPLITUDE, FILM AMPLITUDE, OP, REGION TYPE, USER)": {
    "prefix": "*CFILM",
    "body": [
      "*CFILM, AMPLITUDE=${1}, FILM AMPLITUDE=${2}, OP=${3}, REGION TYPE=${4}, USER=${5}"
    ],
    "description": "CFILM with parameter(s) AMPLITUDE, FILM AMPLITUDE, OP, REGION TYPE, USER.",
    "scope": "source.inp"
  },
  "CFLOW()": {
    "prefix": "*CFLOW",
    "body": [
      "*CFLOW"
    ],
    "description": "CFLOW without parameter(s).",
    "scope": "source.inp"
  },
  "CFLOW(AMPLITUDE, OP)": {
    "prefix": "*CFLOW",
    "body": [
      "*CFLOW, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "CFLOW with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "CFLUX()": {
    "prefix": "*CFLUX",
    "body": [
      "*CFLUX"
    ],
    "description": "CFLUX without parameter(s).",
    "scope": "source.inp"
  },
  "CFLUX(FILE)": {
    "prefix": "*CFLUX",
    "body": [
      "*CFLUX, FILE=${1}"
    ],
    "description": "CFLUX with parameter(s) FILE.",
    "scope": "source.inp"
  },
  "CFLUX(AMPLITUDE, INC, OP, REGION TYPE, STEP)": {
    "prefix": "*CFLUX",
    "body": [
      "*CFLUX, AMPLITUDE=${1}, INC=${2}, OP=${3}, REGION TYPE=${4}, STEP=${5}"
    ],
    "description": "CFLUX with parameter(s) AMPLITUDE, INC, OP, REGION TYPE, STEP.",
    "scope": "source.inp"
  },
  "CFLUX(FILE, AMPLITUDE, INC, OP, REGION TYPE, STEP)": {
    "prefix": "*CFLUX",
    "body": [
      "*CFLUX, FILE=${1}, AMPLITUDE=${2}, INC=${3}, OP=${4}, REGION TYPE=${5}, STEP=${6}"
    ],
    "description": "CFLUX with parameter(s) FILE, AMPLITUDE, INC, OP, REGION TYPE, STEP.",
    "scope": "source.inp"
  },
  "CHANGE FRICTION(ELSET)": {
    "prefix": "*CHANGE FRICTION",
    "body": [
      "*CHANGE FRICTION, ELSET=${1}"
    ],
    "description": "CHANGE FRICTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "CHANGE FRICTION(INTERACTION)": {
    "prefix": "*CHANGE FRICTION",
    "body": [
      "*CHANGE FRICTION, INTERACTION=${1}"
    ],
    "description": "CHANGE FRICTION with parameter(s) INTERACTION.",
    "scope": "source.inp"
  },
  "CHANGE FRICTION(ELSET, AMPLITUDE, RESET)": {
    "prefix": "*CHANGE FRICTION",
    "body": [
      "*CHANGE FRICTION, ELSET=${1}, AMPLITUDE=${2}, RESET=${3}"
    ],
    "description": "CHANGE FRICTION with parameter(s) ELSET, AMPLITUDE, RESET.",
    "scope": "source.inp"
  },
  "CHANGE FRICTION(INTERACTION, AMPLITUDE, RESET)": {
    "prefix": "*CHANGE FRICTION",
    "body": [
      "*CHANGE FRICTION, INTERACTION=${1}, AMPLITUDE=${2}, RESET=${3}"
    ],
    "description": "CHANGE FRICTION with parameter(s) INTERACTION, AMPLITUDE, RESET.",
    "scope": "source.inp"
  },
  "CLAY HARDENING()": {
    "prefix": "*CLAY HARDENING",
    "body": [
      "*CLAY HARDENING"
    ],
    "description": "CLAY HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CLAY HARDENING(DEPENDENCIES)": {
    "prefix": "*CLAY HARDENING",
    "body": [
      "*CLAY HARDENING, DEPENDENCIES=${1}"
    ],
    "description": "CLAY HARDENING with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CLAY PLASTICITY()": {
    "prefix": "*CLAY PLASTICITY",
    "body": [
      "*CLAY PLASTICITY"
    ],
    "description": "CLAY PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "CLAY PLASTICITY(DEPENDENCIES, HARDENING, INTERCEPT)": {
    "prefix": "*CLAY PLASTICITY",
    "body": [
      "*CLAY PLASTICITY, DEPENDENCIES=${1}, HARDENING=${2}, INTERCEPT=${3}"
    ],
    "description": "CLAY PLASTICITY with parameter(s) DEPENDENCIES, HARDENING, INTERCEPT.",
    "scope": "source.inp"
  },
  "CLEARANCE(CPSET, MASTER, SLAVE)": {
    "prefix": "*CLEARANCE",
    "body": [
      "*CLEARANCE, CPSET=${1}, MASTER=${2}, SLAVE=${3}"
    ],
    "description": "CLEARANCE with parameter(s) CPSET, MASTER, SLAVE.",
    "scope": "source.inp"
  },
  "CLEARANCE(CPSET, MASTER, SLAVE, VALUE)": {
    "prefix": "*CLEARANCE",
    "body": [
      "*CLEARANCE, CPSET=${1}, MASTER=${2}, SLAVE=${3}, VALUE=${4}"
    ],
    "description": "CLEARANCE with parameter(s) CPSET, MASTER, SLAVE, VALUE.",
    "scope": "source.inp"
  },
  "CLEARANCE(CPSET, MASTER, SLAVE, TABULAR, BOLT, INPUT)": {
    "prefix": "*CLEARANCE",
    "body": [
      "*CLEARANCE, CPSET=${1}, MASTER=${2}, SLAVE=${3}, TABULAR=${4}, BOLT=${5}, INPUT=${6}"
    ],
    "description": "CLEARANCE with parameter(s) CPSET, MASTER, SLAVE, TABULAR, BOLT, INPUT.",
    "scope": "source.inp"
  },
  "CLOAD()": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD"
    ],
    "description": "CLOAD without parameter(s).",
    "scope": "source.inp"
  },
  "CLOAD(FILE)": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD, FILE=${1}"
    ],
    "description": "CLOAD with parameter(s) FILE.",
    "scope": "source.inp"
  },
  "CLOAD(FILE, CYCLIC MODE)": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD, FILE=${1}, CYCLIC MODE=${2}"
    ],
    "description": "CLOAD with parameter(s) FILE, CYCLIC MODE.",
    "scope": "source.inp"
  },
  "CLOAD(AMPLITUDE, OP)": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "CLOAD with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "CLOAD(FILE, AMPLITUDE, FOLLOWER, INC, LOAD CASE, OP, REGION TYPE, STEP)": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD, FILE=${1}, AMPLITUDE=${2}, FOLLOWER=${3}, INC=${4}, LOAD CASE=${5}, OP=${6}, REGION TYPE=${7}, STEP=${8}"
    ],
    "description": "CLOAD with parameter(s) FILE, AMPLITUDE, FOLLOWER, INC, LOAD CASE, OP, REGION TYPE, STEP.",
    "scope": "source.inp"
  },
  "CLOAD(FILE, CYCLIC MODE, AMPLITUDE, FOLLOWER, INC, LOAD CASE, OP, REGION TYPE, STEP, IMAGINARY)": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD, FILE=${1}, CYCLIC MODE=${2}, AMPLITUDE=${3}, FOLLOWER=${4}, INC=${5}, LOAD CASE=${6}, OP=${7}, REGION TYPE=${8}, STEP=${9}, IMAGINARY=${10}"
    ],
    "description": "CLOAD with parameter(s) FILE, CYCLIC MODE, AMPLITUDE, FOLLOWER, INC, LOAD CASE, OP, REGION TYPE, STEP, IMAGINARY.",
    "scope": "source.inp"
  },
  "CLOAD(FILE, CYCLIC MODE, AMPLITUDE, FOLLOWER, INC, LOAD CASE, OP, REGION TYPE, STEP, REAL)": {
    "prefix": "*CLOAD",
    "body": [
      "*CLOAD, FILE=${1}, CYCLIC MODE=${2}, AMPLITUDE=${3}, FOLLOWER=${4}, INC=${5}, LOAD CASE=${6}, OP=${7}, REGION TYPE=${8}, STEP=${9}, REAL=${10}"
    ],
    "description": "CLOAD with parameter(s) FILE, CYCLIC MODE, AMPLITUDE, FOLLOWER, INC, LOAD CASE, OP, REGION TYPE, STEP, REAL.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(NAME)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, NAME=${1}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(NAME, STEP SIZE)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, NAME=${1}, STEP SIZE=${2}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) NAME, STEP SIZE.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(NAME, FACTORIZATION FREQUENCY, STEP SIZE, TIME INCREMENTATION)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, NAME=${1}, FACTORIZATION FREQUENCY=${2}, STEP SIZE=${3}, TIME INCREMENTATION=${4}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) NAME, FACTORIZATION FREQUENCY, STEP SIZE, TIME INCREMENTATION.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(COUPLING SCHEME, NAME, STEP SIZE)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, COUPLING SCHEME=${1}, NAME=${2}, STEP SIZE=${3}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) COUPLING SCHEME, NAME, STEP SIZE.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(COUPLING SCHEME=GAUSS-SEIDEL, NAME, STEP SIZE, SCHEME MODIFIER)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, COUPLING SCHEME=GAUSS-SEIDEL, NAME=${1}, STEP SIZE=${2}, SCHEME MODIFIER=${3}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) COUPLING SCHEME=GAUSS-SEIDEL, NAME, STEP SIZE, SCHEME MODIFIER.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(COUPLING SCHEME=ITERATIVE, NAME, STEP SIZE, SCHEME MODIFIER)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, COUPLING SCHEME=ITERATIVE, NAME=${1}, STEP SIZE=${2}, SCHEME MODIFIER=${3}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) COUPLING SCHEME=ITERATIVE, NAME, STEP SIZE, SCHEME MODIFIER.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(COUPLING SCHEME, NAME, STEP SIZE, TIME INCREMENTATION, TIME MARKS)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, COUPLING SCHEME=${1}, NAME=${2}, STEP SIZE=${3}, TIME INCREMENTATION=${4}, TIME MARKS=${5}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) COUPLING SCHEME, NAME, STEP SIZE, TIME INCREMENTATION, TIME MARKS.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(COUPLING SCHEME=GAUSS-SEIDEL, NAME, STEP SIZE, SCHEME MODIFIER, TIME INCREMENTATION, TIME MARKS)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, COUPLING SCHEME=GAUSS-SEIDEL, NAME=${1}, STEP SIZE=${2}, SCHEME MODIFIER=${3}, TIME INCREMENTATION=${4}, TIME MARKS=${5}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) COUPLING SCHEME=GAUSS-SEIDEL, NAME, STEP SIZE, SCHEME MODIFIER, TIME INCREMENTATION, TIME MARKS.",
    "scope": "source.inp"
  },
  "CO-SIMULATION CONTROLS(COUPLING SCHEME=ITERATIVE, NAME, STEP SIZE, SCHEME MODIFIER, TIME INCREMENTATION, TIME MARKS)": {
    "prefix": "*CO-SIMULATION CONTROLS",
    "body": [
      "*CO-SIMULATION CONTROLS, COUPLING SCHEME=ITERATIVE, NAME=${1}, STEP SIZE=${2}, SCHEME MODIFIER=${3}, TIME INCREMENTATION=${4}, TIME MARKS=${5}"
    ],
    "description": "CO-SIMULATION CONTROLS with parameter(s) COUPLING SCHEME=ITERATIVE, NAME, STEP SIZE, SCHEME MODIFIER, TIME INCREMENTATION, TIME MARKS.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION()": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION"
    ],
    "description": "CO-SIMULATION REGION without parameter(s).",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(TYPE)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, TYPE=${1}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(EXPORT)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, EXPORT=${1}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) EXPORT.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(IMPORT)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, IMPORT=${1}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) IMPORT.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(EXPORT, TYPE)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, EXPORT=${1}, TYPE=${2}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) EXPORT, TYPE.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(EXPORT, REGION ID)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, EXPORT=${1}, REGION ID=${2}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) EXPORT, REGION ID.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(IMPORT, TYPE)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, IMPORT=${1}, TYPE=${2}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) IMPORT, TYPE.",
    "scope": "source.inp"
  },
  "CO-SIMULATION REGION(IMPORT, REGION ID)": {
    "prefix": "*CO-SIMULATION REGION",
    "body": [
      "*CO-SIMULATION REGION, IMPORT=${1}, REGION ID=${2}"
    ],
    "description": "CO-SIMULATION REGION with parameter(s) IMPORT, REGION ID.",
    "scope": "source.inp"
  },
  "CO-SIMULATION(CONTROLS, NAME, PROGRAM)": {
    "prefix": "*CO-SIMULATION",
    "body": [
      "*CO-SIMULATION, CONTROLS=${1}, NAME=${2}, PROGRAM=${3}"
    ],
    "description": "CO-SIMULATION with parameter(s) CONTROLS, NAME, PROGRAM.",
    "scope": "source.inp"
  },
  "COHESIVE BEHAVIOR()": {
    "prefix": "*COHESIVE BEHAVIOR",
    "body": [
      "*COHESIVE BEHAVIOR"
    ],
    "description": "COHESIVE BEHAVIOR without parameter(s).",
    "scope": "source.inp"
  },
  "COHESIVE BEHAVIOR(DEPENDENCIES, ELIGIBILITY, REPEATED CONTACTS, TYPE)": {
    "prefix": "*COHESIVE BEHAVIOR",
    "body": [
      "*COHESIVE BEHAVIOR, DEPENDENCIES=${1}, ELIGIBILITY=${2}, REPEATED CONTACTS=${3}, TYPE=${4}"
    ],
    "description": "COHESIVE BEHAVIOR with parameter(s) DEPENDENCIES, ELIGIBILITY, REPEATED CONTACTS, TYPE.",
    "scope": "source.inp"
  },
  "COHESIVE SECTION(ELSET, MATERIAL, RESPONSE)": {
    "prefix": "*COHESIVE SECTION",
    "body": [
      "*COHESIVE SECTION, ELSET=${1}, MATERIAL=${2}, RESPONSE=${3}"
    ],
    "description": "COHESIVE SECTION with parameter(s) ELSET, MATERIAL, RESPONSE.",
    "scope": "source.inp"
  },
  "COHESIVE SECTION(ELSET, MATERIAL, RESPONSE, CONTROLS, ORIENTATION, STACK DIRECTION, THICKNESS)": {
    "prefix": "*COHESIVE SECTION",
    "body": [
      "*COHESIVE SECTION, ELSET=${1}, MATERIAL=${2}, RESPONSE=${3}, CONTROLS=${4}, ORIENTATION=${5}, STACK DIRECTION=${6}, THICKNESS=${7}"
    ],
    "description": "COHESIVE SECTION with parameter(s) ELSET, MATERIAL, RESPONSE, CONTROLS, ORIENTATION, STACK DIRECTION, THICKNESS.",
    "scope": "source.inp"
  },
  "COMBINED TEST DATA()": {
    "prefix": "*COMBINED TEST DATA",
    "body": [
      "*COMBINED TEST DATA"
    ],
    "description": "COMBINED TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "COMBINED TEST DATA(SHRINF, VOLINF)": {
    "prefix": "*COMBINED TEST DATA",
    "body": [
      "*COMBINED TEST DATA, SHRINF=${1}, VOLINF=${2}"
    ],
    "description": "COMBINED TEST DATA with parameter(s) SHRINF, VOLINF.",
    "scope": "source.inp"
  },
  "COMPLEX FREQUENCY()": {
    "prefix": "*COMPLEX FREQUENCY",
    "body": [
      "*COMPLEX FREQUENCY"
    ],
    "description": "COMPLEX FREQUENCY without parameter(s).",
    "scope": "source.inp"
  },
  "COMPLEX FREQUENCY(FRICTION DAMPING, PROPERTY EVALUATION, UNSTABLE MODES ONLY)": {
    "prefix": "*COMPLEX FREQUENCY",
    "body": [
      "*COMPLEX FREQUENCY, FRICTION DAMPING=${1}, PROPERTY EVALUATION=${2}, UNSTABLE MODES ONLY=${3}"
    ],
    "description": "COMPLEX FREQUENCY with parameter(s) FRICTION DAMPING, PROPERTY EVALUATION, UNSTABLE MODES ONLY.",
    "scope": "source.inp"
  },
  "CONCRETE COMPRESSION DAMAGE()": {
    "prefix": "*CONCRETE COMPRESSION DAMAGE",
    "body": [
      "*CONCRETE COMPRESSION DAMAGE"
    ],
    "description": "CONCRETE COMPRESSION DAMAGE without parameter(s).",
    "scope": "source.inp"
  },
  "CONCRETE COMPRESSION DAMAGE(DEPENDENCIES, TENSION RECOVERY)": {
    "prefix": "*CONCRETE COMPRESSION DAMAGE",
    "body": [
      "*CONCRETE COMPRESSION DAMAGE, DEPENDENCIES=${1}, TENSION RECOVERY=${2}"
    ],
    "description": "CONCRETE COMPRESSION DAMAGE with parameter(s) DEPENDENCIES, TENSION RECOVERY.",
    "scope": "source.inp"
  },
  "CONCRETE COMPRESSION HARDENING()": {
    "prefix": "*CONCRETE COMPRESSION HARDENING",
    "body": [
      "*CONCRETE COMPRESSION HARDENING"
    ],
    "description": "CONCRETE COMPRESSION HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CONCRETE COMPRESSION HARDENING(DEPENDENCIES)": {
    "prefix": "*CONCRETE COMPRESSION HARDENING",
    "body": [
      "*CONCRETE COMPRESSION HARDENING, DEPENDENCIES=${1}"
    ],
    "description": "CONCRETE COMPRESSION HARDENING with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CONCRETE DAMAGED PLASTICITY()": {
    "prefix": "*CONCRETE DAMAGED PLASTICITY",
    "body": [
      "*CONCRETE DAMAGED PLASTICITY"
    ],
    "description": "CONCRETE DAMAGED PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "CONCRETE DAMAGED PLASTICITY(DEPENDENCIES)": {
    "prefix": "*CONCRETE DAMAGED PLASTICITY",
    "body": [
      "*CONCRETE DAMAGED PLASTICITY, DEPENDENCIES=${1}"
    ],
    "description": "CONCRETE DAMAGED PLASTICITY with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CONCRETE TENSION DAMAGE()": {
    "prefix": "*CONCRETE TENSION DAMAGE",
    "body": [
      "*CONCRETE TENSION DAMAGE"
    ],
    "description": "CONCRETE TENSION DAMAGE without parameter(s).",
    "scope": "source.inp"
  },
  "CONCRETE TENSION DAMAGE(COMPRESSION RECOVERY, DEPENDENCIES, TYPE)": {
    "prefix": "*CONCRETE TENSION DAMAGE",
    "body": [
      "*CONCRETE TENSION DAMAGE, COMPRESSION RECOVERY=${1}, DEPENDENCIES=${2}, TYPE=${3}"
    ],
    "description": "CONCRETE TENSION DAMAGE with parameter(s) COMPRESSION RECOVERY, DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "CONCRETE TENSION STIFFENING()": {
    "prefix": "*CONCRETE TENSION STIFFENING",
    "body": [
      "*CONCRETE TENSION STIFFENING"
    ],
    "description": "CONCRETE TENSION STIFFENING without parameter(s).",
    "scope": "source.inp"
  },
  "CONCRETE TENSION STIFFENING(DEPENDENCIES, TYPE)": {
    "prefix": "*CONCRETE TENSION STIFFENING",
    "body": [
      "*CONCRETE TENSION STIFFENING, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "CONCRETE TENSION STIFFENING with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "CONCRETE()": {
    "prefix": "*CONCRETE",
    "body": [
      "*CONCRETE"
    ],
    "description": "CONCRETE without parameter(s).",
    "scope": "source.inp"
  },
  "CONCRETE(DEPENDENCIES)": {
    "prefix": "*CONCRETE",
    "body": [
      "*CONCRETE, DEPENDENCIES=${1}"
    ],
    "description": "CONCRETE with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CONDUCTIVITY()": {
    "prefix": "*CONDUCTIVITY",
    "body": [
      "*CONDUCTIVITY"
    ],
    "description": "CONDUCTIVITY without parameter(s).",
    "scope": "source.inp"
  },
  "CONDUCTIVITY(DEPENDENCIES, PORE FLUID, TYPE)": {
    "prefix": "*CONDUCTIVITY",
    "body": [
      "*CONDUCTIVITY, DEPENDENCIES=${1}, PORE FLUID=${2}, TYPE=${3}"
    ],
    "description": "CONDUCTIVITY with parameter(s) DEPENDENCIES, PORE FLUID, TYPE.",
    "scope": "source.inp"
  },
  "CONNECTOR BEHAVIOR(NAME)": {
    "prefix": "*CONNECTOR BEHAVIOR",
    "body": [
      "*CONNECTOR BEHAVIOR, NAME=${1}"
    ],
    "description": "CONNECTOR BEHAVIOR with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "CONNECTOR BEHAVIOR(NAME, EXTRAPOLATION, INTEGRATION, REGULARIZE, RTOL)": {
    "prefix": "*CONNECTOR BEHAVIOR",
    "body": [
      "*CONNECTOR BEHAVIOR, NAME=${1}, EXTRAPOLATION=${2}, INTEGRATION=${3}, REGULARIZE=${4}, RTOL=${5}"
    ],
    "description": "CONNECTOR BEHAVIOR with parameter(s) NAME, EXTRAPOLATION, INTEGRATION, REGULARIZE, RTOL.",
    "scope": "source.inp"
  },
  "CONNECTOR CONSTITUTIVE REFERENCE()": {
    "prefix": "*CONNECTOR CONSTITUTIVE REFERENCE",
    "body": [
      "*CONNECTOR CONSTITUTIVE REFERENCE"
    ],
    "description": "CONNECTOR CONSTITUTIVE REFERENCE without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR DAMAGE EVOLUTION(TYPE)": {
    "prefix": "*CONNECTOR DAMAGE EVOLUTION",
    "body": [
      "*CONNECTOR DAMAGE EVOLUTION, TYPE=${1}"
    ],
    "description": "CONNECTOR DAMAGE EVOLUTION with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "CONNECTOR DAMAGE EVOLUTION(TYPE, AFFECTED COMPONENTS, DEGRADATION, DEPENDENCIES, EXTRAPOLATION, REGULARIZE, RTOL, SOFTENING)": {
    "prefix": "*CONNECTOR DAMAGE EVOLUTION",
    "body": [
      "*CONNECTOR DAMAGE EVOLUTION, TYPE=${1}, AFFECTED COMPONENTS=${2}, DEGRADATION=${3}, DEPENDENCIES=${4}, EXTRAPOLATION=${5}, REGULARIZE=${6}, RTOL=${7}, SOFTENING=${8}"
    ],
    "description": "CONNECTOR DAMAGE EVOLUTION with parameter(s) TYPE, AFFECTED COMPONENTS, DEGRADATION, DEPENDENCIES, EXTRAPOLATION, REGULARIZE, RTOL, SOFTENING.",
    "scope": "source.inp"
  },
  "CONNECTOR DAMAGE INITIATION()": {
    "prefix": "*CONNECTOR DAMAGE INITIATION",
    "body": [
      "*CONNECTOR DAMAGE INITIATION"
    ],
    "description": "CONNECTOR DAMAGE INITIATION without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR DAMAGE INITIATION(COMPONENT, CRITERION, DEPENDENCIES, EXTRAPOLATION, RATE FILTER FACTOR, RATE INTERPOLATION, REGULARIZE, RTOL)": {
    "prefix": "*CONNECTOR DAMAGE INITIATION",
    "body": [
      "*CONNECTOR DAMAGE INITIATION, COMPONENT=${1}, CRITERION=${2}, DEPENDENCIES=${3}, EXTRAPOLATION=${4}, RATE FILTER FACTOR=${5}, RATE INTERPOLATION=${6}, REGULARIZE=${7}, RTOL=${8}"
    ],
    "description": "CONNECTOR DAMAGE INITIATION with parameter(s) COMPONENT, CRITERION, DEPENDENCIES, EXTRAPOLATION, RATE FILTER FACTOR, RATE INTERPOLATION, REGULARIZE, RTOL.",
    "scope": "source.inp"
  },
  "CONNECTOR DAMPING()": {
    "prefix": "*CONNECTOR DAMPING",
    "body": [
      "*CONNECTOR DAMPING"
    ],
    "description": "CONNECTOR DAMPING without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR DAMPING(COMPONENT, TYPE)": {
    "prefix": "*CONNECTOR DAMPING",
    "body": [
      "*CONNECTOR DAMPING, COMPONENT=${1}, TYPE=${2}"
    ],
    "description": "CONNECTOR DAMPING with parameter(s) COMPONENT, TYPE.",
    "scope": "source.inp"
  },
  "CONNECTOR DAMPING(TYPE=VISCOUS, COMPONENT, DEPENDENCIES, EXTRAPOLATION, FREQUENCY DEPENDENCE, INDEPENDENT COMPONENTS, NONLINEAR, REGULARIZE, RTOL, UNSYMM)": {
    "prefix": "*CONNECTOR DAMPING",
    "body": [
      "*CONNECTOR DAMPING, TYPE=VISCOUS, COMPONENT=${1}, DEPENDENCIES=${2}, EXTRAPOLATION=${3}, FREQUENCY DEPENDENCE=${4}, INDEPENDENT COMPONENTS=${5}, NONLINEAR=${6}, REGULARIZE=${7}, RTOL=${8}, UNSYMM=${9}"
    ],
    "description": "CONNECTOR DAMPING with parameter(s) TYPE=VISCOUS, COMPONENT, DEPENDENCIES, EXTRAPOLATION, FREQUENCY DEPENDENCE, INDEPENDENT COMPONENTS, NONLINEAR, REGULARIZE, RTOL, UNSYMM.",
    "scope": "source.inp"
  },
  "CONNECTOR DERIVED COMPONENT(NAME)": {
    "prefix": "*CONNECTOR DERIVED COMPONENT",
    "body": [
      "*CONNECTOR DERIVED COMPONENT, NAME=${1}"
    ],
    "description": "CONNECTOR DERIVED COMPONENT with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "CONNECTOR DERIVED COMPONENT(NAME, DEPENDENCIES, EXTRAPOLATION, INDEPENDENT COMPONENTS, OPERATOR, REGULARIZE, RTOL, SIGN)": {
    "prefix": "*CONNECTOR DERIVED COMPONENT",
    "body": [
      "*CONNECTOR DERIVED COMPONENT, NAME=${1}, DEPENDENCIES=${2}, EXTRAPOLATION=${3}, INDEPENDENT COMPONENTS=${4}, OPERATOR=${5}, REGULARIZE=${6}, RTOL=${7}, SIGN=${8}"
    ],
    "description": "CONNECTOR DERIVED COMPONENT with parameter(s) NAME, DEPENDENCIES, EXTRAPOLATION, INDEPENDENT COMPONENTS, OPERATOR, REGULARIZE, RTOL, SIGN.",
    "scope": "source.inp"
  },
  "CONNECTOR ELASTICITY()": {
    "prefix": "*CONNECTOR ELASTICITY",
    "body": [
      "*CONNECTOR ELASTICITY"
    ],
    "description": "CONNECTOR ELASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR ELASTICITY(COMPONENT, DEPENDENCIES, EXTRAPOLATION, FREQUENCY DEPENDENCE, INDEPENDENT COMPONENTS, NONLINEAR, REGULARIZE, RTOL, RIGID, UNSYMM)": {
    "prefix": "*CONNECTOR ELASTICITY",
    "body": [
      "*CONNECTOR ELASTICITY, COMPONENT=${1}, DEPENDENCIES=${2}, EXTRAPOLATION=${3}, FREQUENCY DEPENDENCE=${4}, INDEPENDENT COMPONENTS=${5}, NONLINEAR=${6}, REGULARIZE=${7}, RTOL=${8}, RIGID=${9}, UNSYMM=${10}"
    ],
    "description": "CONNECTOR ELASTICITY with parameter(s) COMPONENT, DEPENDENCIES, EXTRAPOLATION, FREQUENCY DEPENDENCE, INDEPENDENT COMPONENTS, NONLINEAR, REGULARIZE, RTOL, RIGID, UNSYMM.",
    "scope": "source.inp"
  },
  "CONNECTOR FAILURE(COMPONENT)": {
    "prefix": "*CONNECTOR FAILURE",
    "body": [
      "*CONNECTOR FAILURE, COMPONENT=${1}"
    ],
    "description": "CONNECTOR FAILURE with parameter(s) COMPONENT.",
    "scope": "source.inp"
  },
  "CONNECTOR FAILURE(COMPONENT, RELEASE)": {
    "prefix": "*CONNECTOR FAILURE",
    "body": [
      "*CONNECTOR FAILURE, COMPONENT=${1}, RELEASE=${2}"
    ],
    "description": "CONNECTOR FAILURE with parameter(s) COMPONENT, RELEASE.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION()": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION"
    ],
    "description": "CONNECTOR FRICTION without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, COMPONENT)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, COMPONENT=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, COMPONENT.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, CONTACT FORCE)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, CONTACT FORCE=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, CONTACT FORCE.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, DEPENDENCIES)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, DEPENDENCIES=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, EXTRAPOLATION)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, EXTRAPOLATION=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, EXTRAPOLATION.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, INDEPENDENT COMPONENTS)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, INDEPENDENT COMPONENTS=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, INDEPENDENT COMPONENTS.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, REGULARIZE)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, REGULARIZE=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, REGULARIZE.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(PREDEFINED, STICK STIFFNESS, RTOL)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, PREDEFINED=${1}, STICK STIFFNESS=${2}, RTOL=${3}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) PREDEFINED, STICK STIFFNESS, RTOL.",
    "scope": "source.inp"
  },
  "CONNECTOR FRICTION(STICK STIFFNESS, COMPONENT, CONTACT FORCE, DEPENDENCIES, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL)": {
    "prefix": "*CONNECTOR FRICTION",
    "body": [
      "*CONNECTOR FRICTION, STICK STIFFNESS=${1}, COMPONENT=${2}, CONTACT FORCE=${3}, DEPENDENCIES=${4}, EXTRAPOLATION=${5}, INDEPENDENT COMPONENTS=${6}, REGULARIZE=${7}, RTOL=${8}"
    ],
    "description": "CONNECTOR FRICTION with parameter(s) STICK STIFFNESS, COMPONENT, CONTACT FORCE, DEPENDENCIES, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL.",
    "scope": "source.inp"
  },
  "CONNECTOR HARDENING()": {
    "prefix": "*CONNECTOR HARDENING",
    "body": [
      "*CONNECTOR HARDENING"
    ],
    "description": "CONNECTOR HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR HARDENING(DEFINITION, DEPENDENCIES, EXTRAPOLATION, RATE FILTER FACTOR, RATE INTERPOLATION, REGULARIZE, RTOL, TYPE)": {
    "prefix": "*CONNECTOR HARDENING",
    "body": [
      "*CONNECTOR HARDENING, DEFINITION=${1}, DEPENDENCIES=${2}, EXTRAPOLATION=${3}, RATE FILTER FACTOR=${4}, RATE INTERPOLATION=${5}, REGULARIZE=${6}, RTOL=${7}, TYPE=${8}"
    ],
    "description": "CONNECTOR HARDENING with parameter(s) DEFINITION, DEPENDENCIES, EXTRAPOLATION, RATE FILTER FACTOR, RATE INTERPOLATION, REGULARIZE, RTOL, TYPE.",
    "scope": "source.inp"
  },
  "CONNECTOR LOAD()": {
    "prefix": "*CONNECTOR LOAD",
    "body": [
      "*CONNECTOR LOAD"
    ],
    "description": "CONNECTOR LOAD without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR LOAD(AMPLITUDE, LOAD CASE, OP)": {
    "prefix": "*CONNECTOR LOAD",
    "body": [
      "*CONNECTOR LOAD, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}"
    ],
    "description": "CONNECTOR LOAD with parameter(s) AMPLITUDE, LOAD CASE, OP.",
    "scope": "source.inp"
  },
  "CONNECTOR LOAD(AMPLITUDE, LOAD CASE, OP, IMAGINARY)": {
    "prefix": "*CONNECTOR LOAD",
    "body": [
      "*CONNECTOR LOAD, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, IMAGINARY=${4}"
    ],
    "description": "CONNECTOR LOAD with parameter(s) AMPLITUDE, LOAD CASE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "CONNECTOR LOAD(AMPLITUDE, LOAD CASE, OP, REAL)": {
    "prefix": "*CONNECTOR LOAD",
    "body": [
      "*CONNECTOR LOAD, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, REAL=${4}"
    ],
    "description": "CONNECTOR LOAD with parameter(s) AMPLITUDE, LOAD CASE, OP, REAL.",
    "scope": "source.inp"
  },
  "CONNECTOR LOCK(COMPONENT)": {
    "prefix": "*CONNECTOR LOCK",
    "body": [
      "*CONNECTOR LOCK, COMPONENT=${1}"
    ],
    "description": "CONNECTOR LOCK with parameter(s) COMPONENT.",
    "scope": "source.inp"
  },
  "CONNECTOR LOCK(COMPONENT, DEPENDENCIES, EXTRAPOLATION, LOCK, REGULARIZE, RTOL)": {
    "prefix": "*CONNECTOR LOCK",
    "body": [
      "*CONNECTOR LOCK, COMPONENT=${1}, DEPENDENCIES=${2}, EXTRAPOLATION=${3}, LOCK=${4}, REGULARIZE=${5}, RTOL=${6}"
    ],
    "description": "CONNECTOR LOCK with parameter(s) COMPONENT, DEPENDENCIES, EXTRAPOLATION, LOCK, REGULARIZE, RTOL.",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION()": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION"
    ],
    "description": "CONNECTOR MOTION without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION(AMPLITUDE, LOAD CASE, OP)": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}"
    ],
    "description": "CONNECTOR MOTION with parameter(s) AMPLITUDE, LOAD CASE, OP.",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION(AMPLITUDE, LOAD CASE, OP, FIXED)": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, FIXED=${4}"
    ],
    "description": "CONNECTOR MOTION with parameter(s) AMPLITUDE, LOAD CASE, OP, FIXED.",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION(AMPLITUDE, LOAD CASE, OP, TYPE)": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, TYPE=${4}"
    ],
    "description": "CONNECTOR MOTION with parameter(s) AMPLITUDE, LOAD CASE, OP, TYPE.",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION(AMPLITUDE, LOAD CASE, OP, USER)": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, USER=${4}"
    ],
    "description": "CONNECTOR MOTION with parameter(s) AMPLITUDE, LOAD CASE, OP, USER.",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION(AMPLITUDE, LOAD CASE, OP, IMAGINARY)": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, IMAGINARY=${4}"
    ],
    "description": "CONNECTOR MOTION with parameter(s) AMPLITUDE, LOAD CASE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "CONNECTOR MOTION(AMPLITUDE, LOAD CASE, OP, REAL)": {
    "prefix": "*CONNECTOR MOTION",
    "body": [
      "*CONNECTOR MOTION, AMPLITUDE=${1}, LOAD CASE=${2}, OP=${3}, REAL=${4}"
    ],
    "description": "CONNECTOR MOTION with parameter(s) AMPLITUDE, LOAD CASE, OP, REAL.",
    "scope": "source.inp"
  },
  "CONNECTOR PLASTICITY()": {
    "prefix": "*CONNECTOR PLASTICITY",
    "body": [
      "*CONNECTOR PLASTICITY"
    ],
    "description": "CONNECTOR PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR PLASTICITY(COMPONENT)": {
    "prefix": "*CONNECTOR PLASTICITY",
    "body": [
      "*CONNECTOR PLASTICITY, COMPONENT=${1}"
    ],
    "description": "CONNECTOR PLASTICITY with parameter(s) COMPONENT.",
    "scope": "source.inp"
  },
  "CONNECTOR POTENTIAL()": {
    "prefix": "*CONNECTOR POTENTIAL",
    "body": [
      "*CONNECTOR POTENTIAL"
    ],
    "description": "CONNECTOR POTENTIAL without parameter(s).",
    "scope": "source.inp"
  },
  "CONNECTOR POTENTIAL(EXPONENT, OPERATOR)": {
    "prefix": "*CONNECTOR POTENTIAL",
    "body": [
      "*CONNECTOR POTENTIAL, EXPONENT=${1}, OPERATOR=${2}"
    ],
    "description": "CONNECTOR POTENTIAL with parameter(s) EXPONENT, OPERATOR.",
    "scope": "source.inp"
  },
  "CONNECTOR SECTION(ELSET)": {
    "prefix": "*CONNECTOR SECTION",
    "body": [
      "*CONNECTOR SECTION, ELSET=${1}"
    ],
    "description": "CONNECTOR SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "CONNECTOR SECTION(ELSET, BEHAVIOR, CONTROLS, ELIMINATION)": {
    "prefix": "*CONNECTOR SECTION",
    "body": [
      "*CONNECTOR SECTION, ELSET=${1}, BEHAVIOR=${2}, CONTROLS=${3}, ELIMINATION=${4}"
    ],
    "description": "CONNECTOR SECTION with parameter(s) ELSET, BEHAVIOR, CONTROLS, ELIMINATION.",
    "scope": "source.inp"
  },
  "CONNECTOR STOP(COMPONENT)": {
    "prefix": "*CONNECTOR STOP",
    "body": [
      "*CONNECTOR STOP, COMPONENT=${1}"
    ],
    "description": "CONNECTOR STOP with parameter(s) COMPONENT.",
    "scope": "source.inp"
  },
  "CONNECTOR UNIAXIAL BEHAVIOR(COMPONENT)": {
    "prefix": "*CONNECTOR UNIAXIAL BEHAVIOR",
    "body": [
      "*CONNECTOR UNIAXIAL BEHAVIOR, COMPONENT=${1}"
    ],
    "description": "CONNECTOR UNIAXIAL BEHAVIOR with parameter(s) COMPONENT.",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS()": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS"
    ],
    "description": "CONSTRAINT CONTROLS without parameter(s).",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS(DELETE SLAVE)": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS, DELETE SLAVE=${1}"
    ],
    "description": "CONSTRAINT CONTROLS with parameter(s) DELETE SLAVE.",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS(NO CHANGES)": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS, NO CHANGES=${1}"
    ],
    "description": "CONSTRAINT CONTROLS with parameter(s) NO CHANGES.",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS(NO CHECKS)": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS, NO CHECKS=${1}"
    ],
    "description": "CONSTRAINT CONTROLS with parameter(s) NO CHECKS.",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS(PRINT)": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS, PRINT=${1}"
    ],
    "description": "CONSTRAINT CONTROLS with parameter(s) PRINT.",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS(CHECK FREQUENCY)": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS, CHECK FREQUENCY=${1}"
    ],
    "description": "CONSTRAINT CONTROLS with parameter(s) CHECK FREQUENCY.",
    "scope": "source.inp"
  },
  "CONSTRAINT CONTROLS(TERMINATE ANALYSIS)": {
    "prefix": "*CONSTRAINT CONTROLS",
    "body": [
      "*CONSTRAINT CONTROLS, TERMINATE ANALYSIS=${1}"
    ],
    "description": "CONSTRAINT CONTROLS with parameter(s) TERMINATE ANALYSIS.",
    "scope": "source.inp"
  },
  "CONTACT CLEARANCE ASSIGNMENT()": {
    "prefix": "*CONTACT CLEARANCE ASSIGNMENT",
    "body": [
      "*CONTACT CLEARANCE ASSIGNMENT"
    ],
    "description": "CONTACT CLEARANCE ASSIGNMENT without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT CLEARANCE(NAME)": {
    "prefix": "*CONTACT CLEARANCE",
    "body": [
      "*CONTACT CLEARANCE, NAME=${1}"
    ],
    "description": "CONTACT CLEARANCE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "CONTACT CLEARANCE(NAME, ADJUST, CLEARANCE, SEARCH ABOVE, SEARCH BELOW, SEARCH NSET)": {
    "prefix": "*CONTACT CLEARANCE",
    "body": [
      "*CONTACT CLEARANCE, NAME=${1}, ADJUST=${2}, CLEARANCE=${3}, SEARCH ABOVE=${4}, SEARCH BELOW=${5}, SEARCH NSET=${6}"
    ],
    "description": "CONTACT CLEARANCE with parameter(s) NAME, ADJUST, CLEARANCE, SEARCH ABOVE, SEARCH BELOW, SEARCH NSET.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS ASSIGNMENT(AUTOMATIC OVERCLOSURE RESOLUTION)": {
    "prefix": "*CONTACT CONTROLS ASSIGNMENT",
    "body": [
      "*CONTACT CONTROLS ASSIGNMENT, AUTOMATIC OVERCLOSURE RESOLUTION=${1}"
    ],
    "description": "CONTACT CONTROLS ASSIGNMENT with parameter(s) AUTOMATIC OVERCLOSURE RESOLUTION.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS ASSIGNMENT(CONTACT THICKNESS REDUCTION)": {
    "prefix": "*CONTACT CONTROLS ASSIGNMENT",
    "body": [
      "*CONTACT CONTROLS ASSIGNMENT, CONTACT THICKNESS REDUCTION=${1}"
    ],
    "description": "CONTACT CONTROLS ASSIGNMENT with parameter(s) CONTACT THICKNESS REDUCTION.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS ASSIGNMENT(NODAL EROSION)": {
    "prefix": "*CONTACT CONTROLS ASSIGNMENT",
    "body": [
      "*CONTACT CONTROLS ASSIGNMENT, NODAL EROSION=${1}"
    ],
    "description": "CONTACT CONTROLS ASSIGNMENT with parameter(s) NODAL EROSION.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS ASSIGNMENT(TYPE)": {
    "prefix": "*CONTACT CONTROLS ASSIGNMENT",
    "body": [
      "*CONTACT CONTROLS ASSIGNMENT, TYPE=${1}"
    ],
    "description": "CONTACT CONTROLS ASSIGNMENT with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS()": {
    "prefix": "*CONTACT CONTROLS",
    "body": [
      "*CONTACT CONTROLS"
    ],
    "description": "CONTACT CONTROLS without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS(CPSET)": {
    "prefix": "*CONTACT CONTROLS",
    "body": [
      "*CONTACT CONTROLS, CPSET=${1}"
    ],
    "description": "CONTACT CONTROLS with parameter(s) CPSET.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS(MASTER, PERTURBATION TANGENT SCALE FACTOR, RESET, SLAVE, STABILIZE, STIFFNESS SCALE FACTOR, TANGENT FRACTION)": {
    "prefix": "*CONTACT CONTROLS",
    "body": [
      "*CONTACT CONTROLS, MASTER=${1}, PERTURBATION TANGENT SCALE FACTOR=${2}, RESET=${3}, SLAVE=${4}, STABILIZE=${5}, STIFFNESS SCALE FACTOR=${6}, TANGENT FRACTION=${7}"
    ],
    "description": "CONTACT CONTROLS with parameter(s) MASTER, PERTURBATION TANGENT SCALE FACTOR, RESET, SLAVE, STABILIZE, STIFFNESS SCALE FACTOR, TANGENT FRACTION.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS(MASTER, PERTURBATION TANGENT SCALE FACTOR, RESET, SLAVE, STABILIZE, STIFFNESS SCALE FACTOR, TANGENT FRACTION, ABSOLUTE PENETRATION TOLERANCE)": {
    "prefix": "*CONTACT CONTROLS",
    "body": [
      "*CONTACT CONTROLS, MASTER=${1}, PERTURBATION TANGENT SCALE FACTOR=${2}, RESET=${3}, SLAVE=${4}, STABILIZE=${5}, STIFFNESS SCALE FACTOR=${6}, TANGENT FRACTION=${7}, ABSOLUTE PENETRATION TOLERANCE=${8}"
    ],
    "description": "CONTACT CONTROLS with parameter(s) MASTER, PERTURBATION TANGENT SCALE FACTOR, RESET, SLAVE, STABILIZE, STIFFNESS SCALE FACTOR, TANGENT FRACTION, ABSOLUTE PENETRATION TOLERANCE.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS(MASTER, PERTURBATION TANGENT SCALE FACTOR, RESET, SLAVE, STABILIZE, STIFFNESS SCALE FACTOR, TANGENT FRACTION, RELATIVE PENETRATION TOLERANCE)": {
    "prefix": "*CONTACT CONTROLS",
    "body": [
      "*CONTACT CONTROLS, MASTER=${1}, PERTURBATION TANGENT SCALE FACTOR=${2}, RESET=${3}, SLAVE=${4}, STABILIZE=${5}, STIFFNESS SCALE FACTOR=${6}, TANGENT FRACTION=${7}, RELATIVE PENETRATION TOLERANCE=${8}"
    ],
    "description": "CONTACT CONTROLS with parameter(s) MASTER, PERTURBATION TANGENT SCALE FACTOR, RESET, SLAVE, STABILIZE, STIFFNESS SCALE FACTOR, TANGENT FRACTION, RELATIVE PENETRATION TOLERANCE.",
    "scope": "source.inp"
  },
  "CONTACT CONTROLS(CPSET, FASTLOCALTRK, GLOBTRKINC, RESET, SCALE PENALTY, WARP CHECK PERIOD, WARP CUT OFF)": {
    "prefix": "*CONTACT CONTROLS",
    "body": [
      "*CONTACT CONTROLS, CPSET=${1}, FASTLOCALTRK=${2}, GLOBTRKINC=${3}, RESET=${4}, SCALE PENALTY=${5}, WARP CHECK PERIOD=${6}, WARP CUT OFF=${7}"
    ],
    "description": "CONTACT CONTROLS with parameter(s) CPSET, FASTLOCALTRK, GLOBTRKINC, RESET, SCALE PENALTY, WARP CHECK PERIOD, WARP CUT OFF.",
    "scope": "source.inp"
  },
  "CONTACT DAMPING(DEFINITION)": {
    "prefix": "*CONTACT DAMPING",
    "body": [
      "*CONTACT DAMPING, DEFINITION=${1}"
    ],
    "description": "CONTACT DAMPING with parameter(s) DEFINITION.",
    "scope": "source.inp"
  },
  "CONTACT DAMPING(DEFINITION, TANGENT FRACTION)": {
    "prefix": "*CONTACT DAMPING",
    "body": [
      "*CONTACT DAMPING, DEFINITION=${1}, TANGENT FRACTION=${2}"
    ],
    "description": "CONTACT DAMPING with parameter(s) DEFINITION, TANGENT FRACTION.",
    "scope": "source.inp"
  },
  "CONTACT EXCLUSIONS()": {
    "prefix": "*CONTACT EXCLUSIONS",
    "body": [
      "*CONTACT EXCLUSIONS"
    ],
    "description": "CONTACT EXCLUSIONS without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT FILE()": {
    "prefix": "*CONTACT FILE",
    "body": [
      "*CONTACT FILE"
    ],
    "description": "CONTACT FILE without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT FILE(FREQUENCY, MASTER, NSET, SLAVE)": {
    "prefix": "*CONTACT FILE",
    "body": [
      "*CONTACT FILE, FREQUENCY=${1}, MASTER=${2}, NSET=${3}, SLAVE=${4}"
    ],
    "description": "CONTACT FILE with parameter(s) FREQUENCY, MASTER, NSET, SLAVE.",
    "scope": "source.inp"
  },
  "CONTACT FORMULATION(TYPE)": {
    "prefix": "*CONTACT FORMULATION",
    "body": [
      "*CONTACT FORMULATION, TYPE=${1}"
    ],
    "description": "CONTACT FORMULATION with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "CONTACT INCLUSIONS()": {
    "prefix": "*CONTACT INCLUSIONS",
    "body": [
      "*CONTACT INCLUSIONS"
    ],
    "description": "CONTACT INCLUSIONS without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT INCLUSIONS(ALL EXTERIOR)": {
    "prefix": "*CONTACT INCLUSIONS",
    "body": [
      "*CONTACT INCLUSIONS, ALL EXTERIOR=${1}"
    ],
    "description": "CONTACT INCLUSIONS with parameter(s) ALL EXTERIOR.",
    "scope": "source.inp"
  },
  "CONTACT INITIALIZATION ASSIGNMENT()": {
    "prefix": "*CONTACT INITIALIZATION ASSIGNMENT",
    "body": [
      "*CONTACT INITIALIZATION ASSIGNMENT"
    ],
    "description": "CONTACT INITIALIZATION ASSIGNMENT without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT INITIALIZATION DATA(NAME)": {
    "prefix": "*CONTACT INITIALIZATION DATA",
    "body": [
      "*CONTACT INITIALIZATION DATA, NAME=${1}"
    ],
    "description": "CONTACT INITIALIZATION DATA with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "CONTACT INITIALIZATION DATA(NAME, MINIMUM DISTANCE, SEARCH ABOVE, SEARCH BELOW)": {
    "prefix": "*CONTACT INITIALIZATION DATA",
    "body": [
      "*CONTACT INITIALIZATION DATA, NAME=${1}, MINIMUM DISTANCE=${2}, SEARCH ABOVE=${3}, SEARCH BELOW=${4}"
    ],
    "description": "CONTACT INITIALIZATION DATA with parameter(s) NAME, MINIMUM DISTANCE, SEARCH ABOVE, SEARCH BELOW.",
    "scope": "source.inp"
  },
  "CONTACT INITIALIZATION DATA(NAME, MINIMUM DISTANCE, SEARCH ABOVE, SEARCH BELOW, INITIAL CLEARANCE)": {
    "prefix": "*CONTACT INITIALIZATION DATA",
    "body": [
      "*CONTACT INITIALIZATION DATA, NAME=${1}, MINIMUM DISTANCE=${2}, SEARCH ABOVE=${3}, SEARCH BELOW=${4}, INITIAL CLEARANCE=${5}"
    ],
    "description": "CONTACT INITIALIZATION DATA with parameter(s) NAME, MINIMUM DISTANCE, SEARCH ABOVE, SEARCH BELOW, INITIAL CLEARANCE.",
    "scope": "source.inp"
  },
  "CONTACT INITIALIZATION DATA(NAME, MINIMUM DISTANCE, SEARCH ABOVE, SEARCH BELOW, INTERFERENCE FIT)": {
    "prefix": "*CONTACT INITIALIZATION DATA",
    "body": [
      "*CONTACT INITIALIZATION DATA, NAME=${1}, MINIMUM DISTANCE=${2}, SEARCH ABOVE=${3}, SEARCH BELOW=${4}, INTERFERENCE FIT=${5}"
    ],
    "description": "CONTACT INITIALIZATION DATA with parameter(s) NAME, MINIMUM DISTANCE, SEARCH ABOVE, SEARCH BELOW, INTERFERENCE FIT.",
    "scope": "source.inp"
  },
  "CONTACT INTERFERENCE()": {
    "prefix": "*CONTACT INTERFERENCE",
    "body": [
      "*CONTACT INTERFERENCE"
    ],
    "description": "CONTACT INTERFERENCE without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT INTERFERENCE(AMPLITUDE, OP, SHRINK, TYPE)": {
    "prefix": "*CONTACT INTERFERENCE",
    "body": [
      "*CONTACT INTERFERENCE, AMPLITUDE=${1}, OP=${2}, SHRINK=${3}, TYPE=${4}"
    ],
    "description": "CONTACT INTERFERENCE with parameter(s) AMPLITUDE, OP, SHRINK, TYPE.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT()": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT"
    ],
    "description": "CONTACT OUTPUT without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(CPSET)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, CPSET=${1}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) CPSET.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(NSET)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, NSET=${1}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) NSET.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(SURFACE)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, SURFACE=${1}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) SURFACE.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(VARIABLE)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, VARIABLE=${1}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) VARIABLE.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(SURFACE, SECOND SURFACE)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, SURFACE=${1}, SECOND SURFACE=${2}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) SURFACE, SECOND SURFACE.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(CPSET, GENERAL CONTACT, SURFACE)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, CPSET=${1}, GENERAL CONTACT=${2}, SURFACE=${3}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) CPSET, GENERAL CONTACT, SURFACE.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(CPSET, GENERAL CONTACT, SURFACE, SECOND SURFACE)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, CPSET=${1}, GENERAL CONTACT=${2}, SURFACE=${3}, SECOND SURFACE=${4}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) CPSET, GENERAL CONTACT, SURFACE, SECOND SURFACE.",
    "scope": "source.inp"
  },
  "CONTACT OUTPUT(MASTER, NSET, SLAVE, VARIABLE)": {
    "prefix": "*CONTACT OUTPUT",
    "body": [
      "*CONTACT OUTPUT, MASTER=${1}, NSET=${2}, SLAVE=${3}, VARIABLE=${4}"
    ],
    "description": "CONTACT OUTPUT with parameter(s) MASTER, NSET, SLAVE, VARIABLE.",
    "scope": "source.inp"
  },
  "CONTACT PAIR()": {
    "prefix": "*CONTACT PAIR",
    "body": [
      "*CONTACT PAIR"
    ],
    "description": "CONTACT PAIR without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT PAIR(INTERACTION)": {
    "prefix": "*CONTACT PAIR",
    "body": [
      "*CONTACT PAIR, INTERACTION=${1}"
    ],
    "description": "CONTACT PAIR with parameter(s) INTERACTION.",
    "scope": "source.inp"
  },
  "CONTACT PAIR(CPSET, INTERACTION, MECHANICAL CONSTRAINT, OP, SMALL SLIDING, WEIGHT)": {
    "prefix": "*CONTACT PAIR",
    "body": [
      "*CONTACT PAIR, CPSET=${1}, INTERACTION=${2}, MECHANICAL CONSTRAINT=${3}, OP=${4}, SMALL SLIDING=${5}, WEIGHT=${6}"
    ],
    "description": "CONTACT PAIR with parameter(s) CPSET, INTERACTION, MECHANICAL CONSTRAINT, OP, SMALL SLIDING, WEIGHT.",
    "scope": "source.inp"
  },
  "CONTACT PAIR(INTERACTION, ADJUST, EXTENSION ZONE, GEOMETRIC CORRECTION, HCRIT, MIDFACE NODES, MINIMUM DISTANCE, NO THICKNESS, SMALL SLIDING, SMOOTH, SLIDING TRANSITION, SUPPLEMENTARY CONSTRAINTS, TIED, TRACKING, TYPE)": {
    "prefix": "*CONTACT PAIR",
    "body": [
      "*CONTACT PAIR, INTERACTION=${1}, ADJUST=${2}, EXTENSION ZONE=${3}, GEOMETRIC CORRECTION=${4}, HCRIT=${5}, MIDFACE NODES=${6}, MINIMUM DISTANCE=${7}, NO THICKNESS=${8}, SMALL SLIDING=${9}, SMOOTH=${10}, SLIDING TRANSITION=${11}, SUPPLEMENTARY CONSTRAINTS=${12}, TIED=${13}, TRACKING=${14}, TYPE=${15}"
    ],
    "description": "CONTACT PAIR with parameter(s) INTERACTION, ADJUST, EXTENSION ZONE, GEOMETRIC CORRECTION, HCRIT, MIDFACE NODES, MINIMUM DISTANCE, NO THICKNESS, SMALL SLIDING, SMOOTH, SLIDING TRANSITION, SUPPLEMENTARY CONSTRAINTS, TIED, TRACKING, TYPE.",
    "scope": "source.inp"
  },
  "CONTACT PERMEABILITY()": {
    "prefix": "*CONTACT PERMEABILITY",
    "body": [
      "*CONTACT PERMEABILITY"
    ],
    "description": "CONTACT PERMEABILITY without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT PERMEABILITY(CUTOFF FLOW ACROSS, CUTOFF GAP FILL, DEPENDENCIES)": {
    "prefix": "*CONTACT PERMEABILITY",
    "body": [
      "*CONTACT PERMEABILITY, CUTOFF FLOW ACROSS=${1}, CUTOFF GAP FILL=${2}, DEPENDENCIES=${3}"
    ],
    "description": "CONTACT PERMEABILITY with parameter(s) CUTOFF FLOW ACROSS, CUTOFF GAP FILL, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CONTACT PRINT()": {
    "prefix": "*CONTACT PRINT",
    "body": [
      "*CONTACT PRINT"
    ],
    "description": "CONTACT PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT PRINT(FREQUENCY, MASTER, NSET, SLAVE, SUMMARY, TOTALS)": {
    "prefix": "*CONTACT PRINT",
    "body": [
      "*CONTACT PRINT, FREQUENCY=${1}, MASTER=${2}, NSET=${3}, SLAVE=${4}, SUMMARY=${5}, TOTALS=${6}"
    ],
    "description": "CONTACT PRINT with parameter(s) FREQUENCY, MASTER, NSET, SLAVE, SUMMARY, TOTALS.",
    "scope": "source.inp"
  },
  "CONTACT PROPERTY ASSIGNMENT()": {
    "prefix": "*CONTACT PROPERTY ASSIGNMENT",
    "body": [
      "*CONTACT PROPERTY ASSIGNMENT"
    ],
    "description": "CONTACT PROPERTY ASSIGNMENT without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT RESPONSE()": {
    "prefix": "*CONTACT RESPONSE",
    "body": [
      "*CONTACT RESPONSE"
    ],
    "description": "CONTACT RESPONSE without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT RESPONSE(MASTER, NSET, SLAVE)": {
    "prefix": "*CONTACT RESPONSE",
    "body": [
      "*CONTACT RESPONSE, MASTER=${1}, NSET=${2}, SLAVE=${3}"
    ],
    "description": "CONTACT RESPONSE with parameter(s) MASTER, NSET, SLAVE.",
    "scope": "source.inp"
  },
  "CONTACT STABILIZATION()": {
    "prefix": "*CONTACT STABILIZATION",
    "body": [
      "*CONTACT STABILIZATION"
    ],
    "description": "CONTACT STABILIZATION without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT STABILIZATION(AMPLITUDE, RANGE, REDUCTION PER INCREMENT, RESET, SCALE FACTOR, TANGENT FRACTION)": {
    "prefix": "*CONTACT STABILIZATION",
    "body": [
      "*CONTACT STABILIZATION, AMPLITUDE=${1}, RANGE=${2}, REDUCTION PER INCREMENT=${3}, RESET=${4}, SCALE FACTOR=${5}, TANGENT FRACTION=${6}"
    ],
    "description": "CONTACT STABILIZATION with parameter(s) AMPLITUDE, RANGE, REDUCTION PER INCREMENT, RESET, SCALE FACTOR, TANGENT FRACTION.",
    "scope": "source.inp"
  },
  "CONTACT()": {
    "prefix": "*CONTACT",
    "body": [
      "*CONTACT"
    ],
    "description": "CONTACT without parameter(s).",
    "scope": "source.inp"
  },
  "CONTACT(OP)": {
    "prefix": "*CONTACT",
    "body": [
      "*CONTACT, OP=${1}"
    ],
    "description": "CONTACT with parameter(s) OP.",
    "scope": "source.inp"
  },
  "CONTOUR INTEGRAL(CONTOURS)": {
    "prefix": "*CONTOUR INTEGRAL",
    "body": [
      "*CONTOUR INTEGRAL, CONTOURS=${1}"
    ],
    "description": "CONTOUR INTEGRAL with parameter(s) CONTOURS.",
    "scope": "source.inp"
  },
  "CONTOUR INTEGRAL(CONTOURS, CRACK NAME, CRACK TIP NODES, DIRECTION, FREQUENCY, NORMAL, OUTPUT, RESIDUAL STRESS STEP, SYMM, TYPE, XFEM)": {
    "prefix": "*CONTOUR INTEGRAL",
    "body": [
      "*CONTOUR INTEGRAL, CONTOURS=${1}, CRACK NAME=${2}, CRACK TIP NODES=${3}, DIRECTION=${4}, FREQUENCY=${5}, NORMAL=${6}, OUTPUT=${7}, RESIDUAL STRESS STEP=${8}, SYMM=${9}, TYPE=${10}, XFEM=${11}"
    ],
    "description": "CONTOUR INTEGRAL with parameter(s) CONTOURS, CRACK NAME, CRACK TIP NODES, DIRECTION, FREQUENCY, NORMAL, OUTPUT, RESIDUAL STRESS STEP, SYMM, TYPE, XFEM.",
    "scope": "source.inp"
  },
  "CONTROLS(ANALYSIS)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, ANALYSIS=${1}"
    ],
    "description": "CONTROLS with parameter(s) ANALYSIS.",
    "scope": "source.inp"
  },
  "CONTROLS(PARAMETERS)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, PARAMETERS=${1}"
    ],
    "description": "CONTROLS with parameter(s) PARAMETERS.",
    "scope": "source.inp"
  },
  "CONTROLS(RESET)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, RESET=${1}"
    ],
    "description": "CONTROLS with parameter(s) RESET.",
    "scope": "source.inp"
  },
  "CONTROLS(TYPE)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, TYPE=${1}"
    ],
    "description": "CONTROLS with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "CONTROLS(ANALYSIS, DISTORTION CONTROL, FIELD)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, ANALYSIS=${1}, DISTORTION CONTROL=${2}, FIELD=${3}"
    ],
    "description": "CONTROLS with parameter(s) ANALYSIS, DISTORTION CONTROL, FIELD.",
    "scope": "source.inp"
  },
  "CONTROLS(PARAMETERS, DISTORTION CONTROL, FIELD)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, PARAMETERS=${1}, DISTORTION CONTROL=${2}, FIELD=${3}"
    ],
    "description": "CONTROLS with parameter(s) PARAMETERS, DISTORTION CONTROL, FIELD.",
    "scope": "source.inp"
  },
  "CONTROLS(RESET, DISTORTION CONTROL, FIELD)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, RESET=${1}, DISTORTION CONTROL=${2}, FIELD=${3}"
    ],
    "description": "CONTROLS with parameter(s) RESET, DISTORTION CONTROL, FIELD.",
    "scope": "source.inp"
  },
  "CONTROLS(TYPE, DISTORTION CONTROL, FIELD)": {
    "prefix": "*CONTROLS",
    "body": [
      "*CONTROLS, TYPE=${1}, DISTORTION CONTROL=${2}, FIELD=${3}"
    ],
    "description": "CONTROLS with parameter(s) TYPE, DISTORTION CONTROL, FIELD.",
    "scope": "source.inp"
  },
  "CONWEP CHARGE PROPERTY()": {
    "prefix": "*CONWEP CHARGE PROPERTY",
    "body": [
      "*CONWEP CHARGE PROPERTY"
    ],
    "description": "CONWEP CHARGE PROPERTY without parameter(s).",
    "scope": "source.inp"
  },
  "CORRELATION(PSD)": {
    "prefix": "*CORRELATION",
    "body": [
      "*CORRELATION, PSD=${1}"
    ],
    "description": "CORRELATION with parameter(s) PSD.",
    "scope": "source.inp"
  },
  "CORRELATION(PSD, COMPLEX, INPUT, USER)": {
    "prefix": "*CORRELATION",
    "body": [
      "*CORRELATION, PSD=${1}, COMPLEX=${2}, INPUT=${3}, USER=${4}"
    ],
    "description": "CORRELATION with parameter(s) PSD, COMPLEX, INPUT, USER.",
    "scope": "source.inp"
  },
  "CORRELATION(TYPE=MOVING NOISE, INPUT, USER)": {
    "prefix": "*CORRELATION",
    "body": [
      "*CORRELATION, TYPE=MOVING NOISE, INPUT=${1}, USER=${2}"
    ],
    "description": "CORRELATION with parameter(s) TYPE, INPUT, USER.",
    "scope": "source.inp"
  },
  "COUPLED TEMPERATURE-DISPLACEMENT()": {
    "prefix": "*COUPLED TEMPERATURE-DISPLACEMENT",
    "body": [
      "*COUPLED TEMPERATURE-DISPLACEMENT"
    ],
    "description": "COUPLED TEMPERATURE-DISPLACEMENT without parameter(s).",
    "scope": "source.inp"
  },
  "COUPLED TEMPERATURE-DISPLACEMENT(ALLSDTOL, CONTINUE, CREEP, ELECTRICAL, FACTOR, STABILIZE, STEADY STATE, CETOL, DELTMX)": {
    "prefix": "*COUPLED TEMPERATURE-DISPLACEMENT",
    "body": [
      "*COUPLED TEMPERATURE-DISPLACEMENT, ALLSDTOL=${1}, CONTINUE=${2}, CREEP=${3}, ELECTRICAL=${4}, FACTOR=${5}, STABILIZE=${6}, STEADY STATE=${7}, CETOL=${8}, DELTMX=${9}"
    ],
    "description": "COUPLED TEMPERATURE-DISPLACEMENT with parameter(s) ALLSDTOL, CONTINUE, CREEP, ELECTRICAL, FACTOR, STABILIZE, STEADY STATE, CETOL, DELTMX.",
    "scope": "source.inp"
  },
  "COUPLED THERMAL-ELECTRICAL()": {
    "prefix": "*COUPLED THERMAL-ELECTRICAL",
    "body": [
      "*COUPLED THERMAL-ELECTRICAL"
    ],
    "description": "COUPLED THERMAL-ELECTRICAL without parameter(s).",
    "scope": "source.inp"
  },
  "COUPLED THERMAL-ELECTRICAL(DELTMX, END, MXDEM, STEADY STATE)": {
    "prefix": "*COUPLED THERMAL-ELECTRICAL",
    "body": [
      "*COUPLED THERMAL-ELECTRICAL, DELTMX=${1}, END=${2}, MXDEM=${3}, STEADY STATE=${4}"
    ],
    "description": "COUPLED THERMAL-ELECTRICAL with parameter(s) DELTMX, END, MXDEM, STEADY STATE.",
    "scope": "source.inp"
  },
  "COUPLING(CONSTRAINT NAME, REF NODE, SURFACE)": {
    "prefix": "*COUPLING",
    "body": [
      "*COUPLING, CONSTRAINT NAME=${1}, REF NODE=${2}, SURFACE=${3}"
    ],
    "description": "COUPLING with parameter(s) CONSTRAINT NAME, REF NODE, SURFACE.",
    "scope": "source.inp"
  },
  "COUPLING(CONSTRAINT NAME, REF NODE, SURFACE, INFLUENCE RADIUS, ORIENTATION)": {
    "prefix": "*COUPLING",
    "body": [
      "*COUPLING, CONSTRAINT NAME=${1}, REF NODE=${2}, SURFACE=${3}, INFLUENCE RADIUS=${4}, ORIENTATION=${5}"
    ],
    "description": "COUPLING with parameter(s) CONSTRAINT NAME, REF NODE, SURFACE, INFLUENCE RADIUS, ORIENTATION.",
    "scope": "source.inp"
  },
  "CRADIATE()": {
    "prefix": "*CRADIATE",
    "body": [
      "*CRADIATE"
    ],
    "description": "CRADIATE without parameter(s).",
    "scope": "source.inp"
  },
  "CRADIATE(AMPLITUDE, OP, REGION TYPE)": {
    "prefix": "*CRADIATE",
    "body": [
      "*CRADIATE, AMPLITUDE=${1}, OP=${2}, REGION TYPE=${3}"
    ],
    "description": "CRADIATE with parameter(s) AMPLITUDE, OP, REGION TYPE.",
    "scope": "source.inp"
  },
  "CREEP STRAIN RATE CONTROL(AMPLITUDE, ELSET)": {
    "prefix": "*CREEP STRAIN RATE CONTROL",
    "body": [
      "*CREEP STRAIN RATE CONTROL, AMPLITUDE=${1}, ELSET=${2}"
    ],
    "description": "CREEP STRAIN RATE CONTROL with parameter(s) AMPLITUDE, ELSET.",
    "scope": "source.inp"
  },
  "CREEP STRAIN RATE CONTROL(AMPLITUDE, ELSET, DEPENDENCIES, OP)": {
    "prefix": "*CREEP STRAIN RATE CONTROL",
    "body": [
      "*CREEP STRAIN RATE CONTROL, AMPLITUDE=${1}, ELSET=${2}, DEPENDENCIES=${3}, OP=${4}"
    ],
    "description": "CREEP STRAIN RATE CONTROL with parameter(s) AMPLITUDE, ELSET, DEPENDENCIES, OP.",
    "scope": "source.inp"
  },
  "CREEP()": {
    "prefix": "*CREEP",
    "body": [
      "*CREEP"
    ],
    "description": "CREEP without parameter(s).",
    "scope": "source.inp"
  },
  "CREEP(DEPENDENCIES, LAW, TIME)": {
    "prefix": "*CREEP",
    "body": [
      "*CREEP, DEPENDENCIES=${1}, LAW=${2}, TIME=${3}"
    ],
    "description": "CREEP with parameter(s) DEPENDENCIES, LAW, TIME.",
    "scope": "source.inp"
  },
  "CRUSHABLE FOAM HARDENING()": {
    "prefix": "*CRUSHABLE FOAM HARDENING",
    "body": [
      "*CRUSHABLE FOAM HARDENING"
    ],
    "description": "CRUSHABLE FOAM HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CRUSHABLE FOAM HARDENING(DEPENDENCIES)": {
    "prefix": "*CRUSHABLE FOAM HARDENING",
    "body": [
      "*CRUSHABLE FOAM HARDENING, DEPENDENCIES=${1}"
    ],
    "description": "CRUSHABLE FOAM HARDENING with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "CRUSHABLE FOAM()": {
    "prefix": "*CRUSHABLE FOAM",
    "body": [
      "*CRUSHABLE FOAM"
    ],
    "description": "CRUSHABLE FOAM without parameter(s).",
    "scope": "source.inp"
  },
  "CRUSHABLE FOAM(DEPENDENCIES, HARDENING)": {
    "prefix": "*CRUSHABLE FOAM",
    "body": [
      "*CRUSHABLE FOAM, DEPENDENCIES=${1}, HARDENING=${2}"
    ],
    "description": "CRUSHABLE FOAM with parameter(s) DEPENDENCIES, HARDENING.",
    "scope": "source.inp"
  },
  "CYCLED PLASTIC()": {
    "prefix": "*CYCLED PLASTIC",
    "body": [
      "*CYCLED PLASTIC"
    ],
    "description": "CYCLED PLASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "CYCLIC HARDENING()": {
    "prefix": "*CYCLIC HARDENING",
    "body": [
      "*CYCLIC HARDENING"
    ],
    "description": "CYCLIC HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "CYCLIC HARDENING(DEPENDENCIES, RATE)": {
    "prefix": "*CYCLIC HARDENING",
    "body": [
      "*CYCLIC HARDENING, DEPENDENCIES=${1}, RATE=${2}"
    ],
    "description": "CYCLIC HARDENING with parameter(s) DEPENDENCIES, RATE.",
    "scope": "source.inp"
  },
  "CYCLIC HARDENING(DEPENDENCIES, PARAMETERS)": {
    "prefix": "*CYCLIC HARDENING",
    "body": [
      "*CYCLIC HARDENING, DEPENDENCIES=${1}, PARAMETERS=${2}"
    ],
    "description": "CYCLIC HARDENING with parameter(s) DEPENDENCIES, PARAMETERS.",
    "scope": "source.inp"
  },
  "CYCLIC HARDENING(DEPENDENCIES, PARAMETERS, USER, PROPERTIES)": {
    "prefix": "*CYCLIC HARDENING",
    "body": [
      "*CYCLIC HARDENING, DEPENDENCIES=${1}, PARAMETERS=${2}, USER=${3}, PROPERTIES=${4}"
    ],
    "description": "CYCLIC HARDENING with parameter(s) DEPENDENCIES, PARAMETERS, USER, PROPERTIES.",
    "scope": "source.inp"
  },
  "CYCLIC SYMMETRY MODEL(N)": {
    "prefix": "*CYCLIC SYMMETRY MODEL",
    "body": [
      "*CYCLIC SYMMETRY MODEL, N=${1}"
    ],
    "description": "CYCLIC SYMMETRY MODEL with parameter(s) N.",
    "scope": "source.inp"
  },
  "CYCLIC(NC, TYPE)": {
    "prefix": "*CYCLIC",
    "body": [
      "*CYCLIC, NC=${1}, TYPE=${2}"
    ],
    "description": "CYCLIC with parameter(s) NC, TYPE.",
    "scope": "source.inp"
  },
  "D ADDED MASS()": {
    "prefix": "*D ADDED MASS",
    "body": [
      "*D ADDED MASS"
    ],
    "description": "D ADDED MASS without parameter(s).",
    "scope": "source.inp"
  },
  "D EM POTENTIAL()": {
    "prefix": "*D EM POTENTIAL",
    "body": [
      "*D EM POTENTIAL"
    ],
    "description": "D EM POTENTIAL without parameter(s).",
    "scope": "source.inp"
  },
  "D EM POTENTIAL(AMPLITUDE, OP)": {
    "prefix": "*D EM POTENTIAL",
    "body": [
      "*D EM POTENTIAL, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "D EM POTENTIAL with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DAMAGE EVOLUTION(TYPE)": {
    "prefix": "*DAMAGE EVOLUTION",
    "body": [
      "*DAMAGE EVOLUTION, TYPE=${1}"
    ],
    "description": "DAMAGE EVOLUTION with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "DAMAGE EVOLUTION(TYPE, DEGRADATION, DEPENDENCIES, FAILURE INDEX, MIXED MODE BEHAVIOR, MODE MIX RATIO, POWER, SOFTENING)": {
    "prefix": "*DAMAGE EVOLUTION",
    "body": [
      "*DAMAGE EVOLUTION, TYPE=${1}, DEGRADATION=${2}, DEPENDENCIES=${3}, FAILURE INDEX=${4}, MIXED MODE BEHAVIOR=${5}, MODE MIX RATIO=${6}, POWER=${7}, SOFTENING=${8}"
    ],
    "description": "DAMAGE EVOLUTION with parameter(s) TYPE, DEGRADATION, DEPENDENCIES, FAILURE INDEX, MIXED MODE BEHAVIOR, MODE MIX RATIO, POWER, SOFTENING.",
    "scope": "source.inp"
  },
  "DAMAGE INITIATION(CRITERION)": {
    "prefix": "*DAMAGE INITIATION",
    "body": [
      "*DAMAGE INITIATION, CRITERION=${1}"
    ],
    "description": "DAMAGE INITIATION with parameter(s) CRITERION.",
    "scope": "source.inp"
  },
  "DAMAGE INITIATION(CRITERION, DEPENDENCIES)": {
    "prefix": "*DAMAGE INITIATION",
    "body": [
      "*DAMAGE INITIATION, CRITERION=${1}, DEPENDENCIES=${2}"
    ],
    "description": "DAMAGE INITIATION with parameter(s) CRITERION, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "DAMAGE INITIATION(CRITERION, ALPHA, DEFINITION, DEPENDENCIES, FAILURE MECHANISMS, FEQ, FNN, FNT, FREQUENCY, KS, LODE DEPENDENT, NORMAL DIRECTION, NUMBER IMPERFECTIONS, OMEGA, PEINC, PROPERTIES, TOLERANCE)": {
    "prefix": "*DAMAGE INITIATION",
    "body": [
      "*DAMAGE INITIATION, CRITERION=${1}, ALPHA=${2}, DEFINITION=${3}, DEPENDENCIES=${4}, FAILURE MECHANISMS=${5}, FEQ=${6}, FNN=${7}, FNT=${8}, FREQUENCY=${9}, KS=${10}, LODE DEPENDENT=${11}, NORMAL DIRECTION=${12}, NUMBER IMPERFECTIONS=${13}, OMEGA=${14}, PEINC=${15}, PROPERTIES=${16}, TOLERANCE=${17}"
    ],
    "description": "DAMAGE INITIATION with parameter(s) CRITERION, ALPHA, DEFINITION, DEPENDENCIES, FAILURE MECHANISMS, FEQ, FNN, FNT, FREQUENCY, KS, LODE DEPENDENT, NORMAL DIRECTION, NUMBER IMPERFECTIONS, OMEGA, PEINC, PROPERTIES, TOLERANCE.",
    "scope": "source.inp"
  },
  "DAMAGE STABILIZATION()": {
    "prefix": "*DAMAGE STABILIZATION",
    "body": [
      "*DAMAGE STABILIZATION"
    ],
    "description": "DAMAGE STABILIZATION without parameter(s).",
    "scope": "source.inp"
  },
  "DAMPING CONTROLS()": {
    "prefix": "*DAMPING CONTROLS",
    "body": [
      "*DAMPING CONTROLS"
    ],
    "description": "DAMPING CONTROLS without parameter(s).",
    "scope": "source.inp"
  },
  "DAMPING CONTROLS(STRUCTURAL, VISCOUS)": {
    "prefix": "*DAMPING CONTROLS",
    "body": [
      "*DAMPING CONTROLS, STRUCTURAL=${1}, VISCOUS=${2}"
    ],
    "description": "DAMPING CONTROLS with parameter(s) STRUCTURAL, VISCOUS.",
    "scope": "source.inp"
  },
  "DAMPING()": {
    "prefix": "*DAMPING",
    "body": [
      "*DAMPING"
    ],
    "description": "DAMPING without parameter(s).",
    "scope": "source.inp"
  },
  "DAMPING(ALPHA, BETA, COMPOSITE, DEPENDENCIES, STRUCTURAL)": {
    "prefix": "*DAMPING",
    "body": [
      "*DAMPING, ALPHA=${1}, BETA=${2}, COMPOSITE=${3}, DEPENDENCIES=${4}, STRUCTURAL=${5}"
    ],
    "description": "DAMPING with parameter(s) ALPHA, BETA, COMPOSITE, DEPENDENCIES, STRUCTURAL.",
    "scope": "source.inp"
  },
  "DASHPOT(ELSET)": {
    "prefix": "*DASHPOT",
    "body": [
      "*DASHPOT, ELSET=${1}"
    ],
    "description": "DASHPOT with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "DASHPOT(ELSET, DEPENDENCIES, NONLINEAR, ORIENTATION, RTOL)": {
    "prefix": "*DASHPOT",
    "body": [
      "*DASHPOT, ELSET=${1}, DEPENDENCIES=${2}, NONLINEAR=${3}, ORIENTATION=${4}, RTOL=${5}"
    ],
    "description": "DASHPOT with parameter(s) ELSET, DEPENDENCIES, NONLINEAR, ORIENTATION, RTOL.",
    "scope": "source.inp"
  },
  "DEBOND(MASTER, SLAVE)": {
    "prefix": "*DEBOND",
    "body": [
      "*DEBOND, MASTER=${1}, SLAVE=${2}"
    ],
    "description": "DEBOND with parameter(s) MASTER, SLAVE.",
    "scope": "source.inp"
  },
  "DEBOND(MASTER, SLAVE, DEBONDING FORCE, FREQUENCY, OUTPUT, TIME INCREMENT)": {
    "prefix": "*DEBOND",
    "body": [
      "*DEBOND, MASTER=${1}, SLAVE=${2}, DEBOND,ING FORCE=${3}, FREQUENCY=${4}, OUTPUT=${5}, TIME INCREMENT=${6}"
    ],
    "description": "DEBOND with parameter(s) MASTER, SLAVE, DEBONDING FORCE, FREQUENCY, OUTPUT, TIME INCREMENT.",
    "scope": "source.inp"
  },
  "DECHARGE()": {
    "prefix": "*DECHARGE",
    "body": [
      "*DECHARGE"
    ],
    "description": "DECHARGE without parameter(s).",
    "scope": "source.inp"
  },
  "DECHARGE(AMPLITUDE, OP)": {
    "prefix": "*DECHARGE",
    "body": [
      "*DECHARGE, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DECHARGE with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DECHARGE(AMPLITUDE, OP, IMAGINARY)": {
    "prefix": "*DECHARGE",
    "body": [
      "*DECHARGE, AMPLITUDE=${1}, OP=${2}, IMAGINARY=${3}"
    ],
    "description": "DECHARGE with parameter(s) AMPLITUDE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "DECHARGE(AMPLITUDE, OP, REAL)": {
    "prefix": "*DECHARGE",
    "body": [
      "*DECHARGE, AMPLITUDE=${1}, OP=${2}, REAL=${3}"
    ],
    "description": "DECHARGE with parameter(s) AMPLITUDE, OP, REAL.",
    "scope": "source.inp"
  },
  "DECURRENT()": {
    "prefix": "*DECURRENT",
    "body": [
      "*DECURRENT"
    ],
    "description": "DECURRENT without parameter(s).",
    "scope": "source.inp"
  },
  "DECURRENT(AMPLITUDE, OP)": {
    "prefix": "*DECURRENT",
    "body": [
      "*DECURRENT, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DECURRENT with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DECURRENT(AMPLITUDE, OP, IMAGINARY)": {
    "prefix": "*DECURRENT",
    "body": [
      "*DECURRENT, AMPLITUDE=${1}, OP=${2}, IMAGINARY=${3}"
    ],
    "description": "DECURRENT with parameter(s) AMPLITUDE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "DECURRENT(AMPLITUDE, OP, REAL)": {
    "prefix": "*DECURRENT",
    "body": [
      "*DECURRENT, AMPLITUDE=${1}, OP=${2}, REAL=${3}"
    ],
    "description": "DECURRENT with parameter(s) AMPLITUDE, OP, REAL.",
    "scope": "source.inp"
  },
  "DEFORMATION PLASTICITY()": {
    "prefix": "*DEFORMATION PLASTICITY",
    "body": [
      "*DEFORMATION PLASTICITY"
    ],
    "description": "DEFORMATION PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "DENSITY()": {
    "prefix": "*DENSITY",
    "body": [
      "*DENSITY"
    ],
    "description": "DENSITY without parameter(s).",
    "scope": "source.inp"
  },
  "DENSITY(DEPENDENCIES, PORE FLUID)": {
    "prefix": "*DENSITY",
    "body": [
      "*DENSITY, DEPENDENCIES=${1}, PORE FLUID=${2}"
    ],
    "description": "DENSITY with parameter(s) DEPENDENCIES, PORE FLUID.",
    "scope": "source.inp"
  },
  "DEPVAR()": {
    "prefix": "*DEPVAR",
    "body": [
      "*DEPVAR"
    ],
    "description": "DEPVAR without parameter(s).",
    "scope": "source.inp"
  },
  "DEPVAR(DELETE)": {
    "prefix": "*DEPVAR",
    "body": [
      "*DEPVAR, DELETE=${1}"
    ],
    "description": "DEPVAR with parameter(s) DELETE.",
    "scope": "source.inp"
  },
  "DEPVAR(CONVERT)": {
    "prefix": "*DEPVAR",
    "body": [
      "*DEPVAR, CONVERT=${1}"
    ],
    "description": "DEPVAR with parameter(s) CONVERT.",
    "scope": "source.inp"
  },
  "DESIGN GRADIENT(DEPENDENT, INDEPENDENT)": {
    "prefix": "*DESIGN GRADIENT",
    "body": [
      "*DESIGN GRADIENT, DEPENDENT=${1}, INDEPENDENT=${2}"
    ],
    "description": "DESIGN GRADIENT with parameter(s) DEPENDENT, INDEPENDENT.",
    "scope": "source.inp"
  },
  "DESIGN PARAMETER()": {
    "prefix": "*DESIGN PARAMETER",
    "body": [
      "*DESIGN PARAMETER"
    ],
    "description": "DESIGN PARAMETER without parameter(s).",
    "scope": "source.inp"
  },
  "DESIGN RESPONSE()": {
    "prefix": "*DESIGN RESPONSE",
    "body": [
      "*DESIGN RESPONSE"
    ],
    "description": "DESIGN RESPONSE without parameter(s).",
    "scope": "source.inp"
  },
  "DESIGN RESPONSE(FREQUENCY, MODE LIST)": {
    "prefix": "*DESIGN RESPONSE",
    "body": [
      "*DESIGN RESPONSE, FREQUENCY=${1}, MODE LIST=${2}"
    ],
    "description": "DESIGN RESPONSE with parameter(s) FREQUENCY, MODE LIST.",
    "scope": "source.inp"
  },
  "DETONATION POINT()": {
    "prefix": "*DETONATION POINT",
    "body": [
      "*DETONATION POINT"
    ],
    "description": "DETONATION POINT without parameter(s).",
    "scope": "source.inp"
  },
  "DFLOW()": {
    "prefix": "*DFLOW",
    "body": [
      "*DFLOW"
    ],
    "description": "DFLOW without parameter(s).",
    "scope": "source.inp"
  },
  "DFLOW(AMPLITUDE, OP)": {
    "prefix": "*DFLOW",
    "body": [
      "*DFLOW, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DFLOW with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DFLUX()": {
    "prefix": "*DFLUX",
    "body": [
      "*DFLUX"
    ],
    "description": "DFLUX without parameter(s).",
    "scope": "source.inp"
  },
  "DFLUX(AMPLITUDE, OP)": {
    "prefix": "*DFLUX",
    "body": [
      "*DFLUX, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DFLUX with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DIAGNOSTICS()": {
    "prefix": "*DIAGNOSTICS",
    "body": [
      "*DIAGNOSTICS"
    ],
    "description": "DIAGNOSTICS without parameter(s).",
    "scope": "source.inp"
  },
  "DIAGNOSTICS(ADAPTIVE MESH, CONTACT INITIAL OVERCLOSURE, CRITICAL ELEMENTS, CUTOFF RATIO, DEEP PENETRATION FACTOR, DEFORMATION SPEED CHECK, DETECT CROSSED SURFACES, PLASTICITY, WARNING RATIO, WARPED SURFACE)": {
    "prefix": "*DIAGNOSTICS",
    "body": [
      "*DIAGNOSTICS, ADAPTIVE MESH=${1}, CONTACT INITIAL OVERCLOSURE=${2}, CRITICAL ELEMENTS=${3}, CUTOFF RATIO=${4}, DEEP PENETRATION FACTOR=${5}, DEFORMATION SPEED CHECK=${6}, DETECT CROSSED SURFACES=${7}, PLASTICITY=${8}, WARNING RATIO=${9}, WARPED SURFACE=${10}"
    ],
    "description": "DIAGNOSTICS with parameter(s) ADAPTIVE MESH, CONTACT INITIAL OVERCLOSURE, CRITICAL ELEMENTS, CUTOFF RATIO, DEEP PENETRATION FACTOR, DEFORMATION SPEED CHECK, DETECT CROSSED SURFACES, PLASTICITY, WARNING RATIO, WARPED SURFACE.",
    "scope": "source.inp"
  },
  "DIELECTRIC()": {
    "prefix": "*DIELECTRIC",
    "body": [
      "*DIELECTRIC"
    ],
    "description": "DIELECTRIC without parameter(s).",
    "scope": "source.inp"
  },
  "DIELECTRIC(DEPENDENCIES, TYPE)": {
    "prefix": "*DIELECTRIC",
    "body": [
      "*DIELECTRIC, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "DIELECTRIC with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "DIFFUSIVITY()": {
    "prefix": "*DIFFUSIVITY",
    "body": [
      "*DIFFUSIVITY"
    ],
    "description": "DIFFUSIVITY without parameter(s).",
    "scope": "source.inp"
  },
  "DIFFUSIVITY(DEPENDENCIES, LAW, TYPE)": {
    "prefix": "*DIFFUSIVITY",
    "body": [
      "*DIFFUSIVITY, DEPENDENCIES=${1}, LAW=${2}, TYPE=${3}"
    ],
    "description": "DIFFUSIVITY with parameter(s) DEPENDENCIES, LAW, TYPE.",
    "scope": "source.inp"
  },
  "DIRECT CYCLIC()": {
    "prefix": "*DIRECT CYCLIC",
    "body": [
      "*DIRECT CYCLIC"
    ],
    "description": "DIRECT CYCLIC without parameter(s).",
    "scope": "source.inp"
  },
  "DIRECT CYCLIC(CETOL, CONTINUE, DELTMX, FATIGUE, TIME POINTS)": {
    "prefix": "*DIRECT CYCLIC",
    "body": [
      "*DIRECT CYCLIC, CETOL=${1}, CONTINUE=${2}, DELTMX=${3}, FATIGUE=${4}, TIME POINTS=${5}"
    ],
    "description": "DIRECT CYCLIC with parameter(s) CETOL, CONTINUE, DELTMX, FATIGUE, TIME POINTS.",
    "scope": "source.inp"
  },
  "DISPLAY BODY(INSTANCE)": {
    "prefix": "*DISPLAY BODY",
    "body": [
      "*DISPLAY BODY, INSTANCE=${1}"
    ],
    "description": "DISPLAY BODY with parameter(s) INSTANCE.",
    "scope": "source.inp"
  },
  "DISTRIBUTING COUPLING(ELSET)": {
    "prefix": "*DISTRIBUTING COUPLING",
    "body": [
      "*DISTRIBUTING COUPLING, ELSET=${1}"
    ],
    "description": "DISTRIBUTING COUPLING with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "DISTRIBUTING COUPLING(ELSET, MASS)": {
    "prefix": "*DISTRIBUTING COUPLING",
    "body": [
      "*DISTRIBUTING COUPLING, ELSET=${1}, MASS=${2}"
    ],
    "description": "DISTRIBUTING COUPLING with parameter(s) ELSET, MASS.",
    "scope": "source.inp"
  },
  "DISTRIBUTING()": {
    "prefix": "*DISTRIBUTING",
    "body": [
      "*DISTRIBUTING"
    ],
    "description": "DISTRIBUTING without parameter(s).",
    "scope": "source.inp"
  },
  "DISTRIBUTING(COUPLING, WEIGHTING METHOD)": {
    "prefix": "*DISTRIBUTING",
    "body": [
      "*DISTRIBUTING, COUPLING=${1}, WEIGHTING METHOD=${2}"
    ],
    "description": "DISTRIBUTING with parameter(s) COUPLING, WEIGHTING METHOD.",
    "scope": "source.inp"
  },
  "DISTRIBUTION TABLE(NAME)": {
    "prefix": "*DISTRIBUTION TABLE",
    "body": [
      "*DISTRIBUTION TABLE, NAME=${1}"
    ],
    "description": "DISTRIBUTION TABLE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "DISTRIBUTION(LOCATION, NAME, TABLE)": {
    "prefix": "*DISTRIBUTION",
    "body": [
      "*DISTRIBUTION, LOCATION=${1}, NAME=${2}, TABLE=${3}"
    ],
    "description": "DISTRIBUTION with parameter(s) LOCATION, NAME, TABLE.",
    "scope": "source.inp"
  },
  "DISTRIBUTION(LOCATION, NAME, TABLE, INPUT)": {
    "prefix": "*DISTRIBUTION",
    "body": [
      "*DISTRIBUTION, LOCATION=${1}, NAME=${2}, TABLE=${3}, INPUT=${4}"
    ],
    "description": "DISTRIBUTION with parameter(s) LOCATION, NAME, TABLE, INPUT.",
    "scope": "source.inp"
  },
  "DLOAD()": {
    "prefix": "*DLOAD",
    "body": [
      "*DLOAD"
    ],
    "description": "DLOAD without parameter(s).",
    "scope": "source.inp"
  },
  "DLOAD(CYCLIC MODE)": {
    "prefix": "*DLOAD",
    "body": [
      "*DLOAD, CYCLIC MODE=${1}"
    ],
    "description": "DLOAD with parameter(s) CYCLIC MODE.",
    "scope": "source.inp"
  },
  "DLOAD(AMPLITUDE, OP)": {
    "prefix": "*DLOAD",
    "body": [
      "*DLOAD, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DLOAD with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DLOAD(CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REGION TYPE)": {
    "prefix": "*DLOAD",
    "body": [
      "*DLOAD, CYCLIC MODE=${1}, AMPLITUDE=${2}, CONSTANT RESULTANT=${3}, FOLLOWER=${4}, OP=${5}, ORIENTATION=${6}, REF NODE=${7}, REGION TYPE=${8}"
    ],
    "description": "DLOAD with parameter(s) CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REGION TYPE.",
    "scope": "source.inp"
  },
  "DLOAD(CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REGION TYPE, IMAGINARY)": {
    "prefix": "*DLOAD",
    "body": [
      "*DLOAD, CYCLIC MODE=${1}, AMPLITUDE=${2}, CONSTANT RESULTANT=${3}, FOLLOWER=${4}, OP=${5}, ORIENTATION=${6}, REF NODE=${7}, REGION TYPE=${8}, IMAGINARY=${9}"
    ],
    "description": "DLOAD with parameter(s) CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REGION TYPE, IMAGINARY.",
    "scope": "source.inp"
  },
  "DLOAD(CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REGION TYPE, REAL)": {
    "prefix": "*DLOAD",
    "body": [
      "*DLOAD, CYCLIC MODE=${1}, AMPLITUDE=${2}, CONSTANT RESULTANT=${3}, FOLLOWER=${4}, OP=${5}, ORIENTATION=${6}, REF NODE=${7}, REGION TYPE=${8}, REAL=${9}"
    ],
    "description": "DLOAD with parameter(s) CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REGION TYPE, REAL.",
    "scope": "source.inp"
  },
  "DRAG CHAIN(ELSET)": {
    "prefix": "*DRAG CHAIN",
    "body": [
      "*DRAG CHAIN, ELSET=${1}"
    ],
    "description": "DRAG CHAIN with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "DRUCKER PRAGER CREEP()": {
    "prefix": "*DRUCKER PRAGER CREEP",
    "body": [
      "*DRUCKER PRAGER CREEP"
    ],
    "description": "DRUCKER PRAGER CREEP without parameter(s).",
    "scope": "source.inp"
  },
  "DRUCKER PRAGER CREEP(DEPENDENCIES, LAW, TIME)": {
    "prefix": "*DRUCKER PRAGER CREEP",
    "body": [
      "*DRUCKER PRAGER CREEP, DEPENDENCIES=${1}, LAW=${2}, TIME=${3}"
    ],
    "description": "DRUCKER PRAGER CREEP with parameter(s) DEPENDENCIES, LAW, TIME.",
    "scope": "source.inp"
  },
  "DRUCKER PRAGER HARDENING()": {
    "prefix": "*DRUCKER PRAGER HARDENING",
    "body": [
      "*DRUCKER PRAGER HARDENING"
    ],
    "description": "DRUCKER PRAGER HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "DRUCKER PRAGER HARDENING(DEPENDENCIES, RATE, TYPE)": {
    "prefix": "*DRUCKER PRAGER HARDENING",
    "body": [
      "*DRUCKER PRAGER HARDENING, DEPENDENCIES=${1}, RATE=${2}, TYPE=${3}"
    ],
    "description": "DRUCKER PRAGER HARDENING with parameter(s) DEPENDENCIES, RATE, TYPE.",
    "scope": "source.inp"
  },
  "DRUCKER PRAGER()": {
    "prefix": "*DRUCKER PRAGER",
    "body": [
      "*DRUCKER PRAGER"
    ],
    "description": "DRUCKER PRAGER without parameter(s).",
    "scope": "source.inp"
  },
  "DRUCKER PRAGER(DEPENDENCIES, ECCENTRICITY, SHEAR CRITERION, TEST DATA)": {
    "prefix": "*DRUCKER PRAGER",
    "body": [
      "*DRUCKER PRAGER, DEPENDENCIES=${1}, ECCENTRICITY=${2}, SHEAR CRITERION=${3}, TEST DATA=${4}"
    ],
    "description": "DRUCKER PRAGER with parameter(s) DEPENDENCIES, ECCENTRICITY, SHEAR CRITERION, TEST DATA.",
    "scope": "source.inp"
  },
  "DSA CONTROLS()": {
    "prefix": "*DSA CONTROLS",
    "body": [
      "*DSA CONTROLS"
    ],
    "description": "DSA CONTROLS without parameter(s).",
    "scope": "source.inp"
  },
  "DSA CONTROLS(FORMULATION, RESET, SIZING FREQUENCY, TOLERANCE)": {
    "prefix": "*DSA CONTROLS",
    "body": [
      "*DSA CONTROLS, FORMULATION=${1}, RESET=${2}, SIZING FREQUENCY=${3}, TOLERANCE=${4}"
    ],
    "description": "DSA CONTROLS with parameter(s) FORMULATION, RESET, SIZING FREQUENCY, TOLERANCE.",
    "scope": "source.inp"
  },
  "DSECHARGE()": {
    "prefix": "*DSECHARGE",
    "body": [
      "*DSECHARGE"
    ],
    "description": "DSECHARGE without parameter(s).",
    "scope": "source.inp"
  },
  "DSECHARGE(AMPLITUDE, OP)": {
    "prefix": "*DSECHARGE",
    "body": [
      "*DSECHARGE, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DSECHARGE with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DSECHARGE(AMPLITUDE, OP, IMAGINARY)": {
    "prefix": "*DSECHARGE",
    "body": [
      "*DSECHARGE, AMPLITUDE=${1}, OP=${2}, IMAGINARY=${3}"
    ],
    "description": "DSECHARGE with parameter(s) AMPLITUDE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "DSECHARGE(AMPLITUDE, OP, REAL)": {
    "prefix": "*DSECHARGE",
    "body": [
      "*DSECHARGE, AMPLITUDE=${1}, OP=${2}, REAL=${3}"
    ],
    "description": "DSECHARGE with parameter(s) AMPLITUDE, OP, REAL.",
    "scope": "source.inp"
  },
  "DSECURRENT()": {
    "prefix": "*DSECURRENT",
    "body": [
      "*DSECURRENT"
    ],
    "description": "DSECURRENT without parameter(s).",
    "scope": "source.inp"
  },
  "DSECURRENT(AMPLITUDE, OP)": {
    "prefix": "*DSECURRENT",
    "body": [
      "*DSECURRENT, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DSECURRENT with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DSECURRENT(AMPLITUDE, OP, IMAGINARY)": {
    "prefix": "*DSECURRENT",
    "body": [
      "*DSECURRENT, AMPLITUDE=${1}, OP=${2}, IMAGINARY=${3}"
    ],
    "description": "DSECURRENT with parameter(s) AMPLITUDE, OP, IMAGINARY.",
    "scope": "source.inp"
  },
  "DSECURRENT(AMPLITUDE, OP, REAL)": {
    "prefix": "*DSECURRENT",
    "body": [
      "*DSECURRENT, AMPLITUDE=${1}, OP=${2}, REAL=${3}"
    ],
    "description": "DSECURRENT with parameter(s) AMPLITUDE, OP, REAL.",
    "scope": "source.inp"
  },
  "DSFLOW()": {
    "prefix": "*DSFLOW",
    "body": [
      "*DSFLOW"
    ],
    "description": "DSFLOW without parameter(s).",
    "scope": "source.inp"
  },
  "DSFLOW(AMPLITUDE, OP)": {
    "prefix": "*DSFLOW",
    "body": [
      "*DSFLOW, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DSFLOW with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DSFLUX()": {
    "prefix": "*DSFLUX",
    "body": [
      "*DSFLUX"
    ],
    "description": "DSFLUX without parameter(s).",
    "scope": "source.inp"
  },
  "DSFLUX(AMPLITUDE, OP)": {
    "prefix": "*DSFLUX",
    "body": [
      "*DSFLUX, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "DSFLUX with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "DSLOAD(CYCLIC MODE)": {
    "prefix": "*DSLOAD",
    "body": [
      "*DSLOAD, CYCLIC MODE=${1}"
    ],
    "description": "DSLOAD with parameter(s) CYCLIC MODE.",
    "scope": "source.inp"
  },
  "DSLOAD(STEP, SUBMODEL)": {
    "prefix": "*DSLOAD",
    "body": [
      "*DSLOAD, STEP=${1}, SUBMODEL=${2}"
    ],
    "description": "DSLOAD with parameter(s) STEP, SUBMODEL.",
    "scope": "source.inp"
  },
  "DSLOAD(STEP, SUBMODEL, INC, OP)": {
    "prefix": "*DSLOAD",
    "body": [
      "*DSLOAD, STEP=${1}, SUBMODEL=${2}, INC=${3}, OP=${4}"
    ],
    "description": "DSLOAD with parameter(s) STEP, SUBMODEL, INC, OP.",
    "scope": "source.inp"
  },
  "DSLOAD(CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE)": {
    "prefix": "*DSLOAD",
    "body": [
      "*DSLOAD, CYCLIC MODE=${1}, AMPLITUDE=${2}, CONSTANT RESULTANT=${3}, FOLLOWER=${4}, OP=${5}, ORIENTATION=${6}, REF NODE=${7}"
    ],
    "description": "DSLOAD with parameter(s) CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE.",
    "scope": "source.inp"
  },
  "DSLOAD(CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, IMAGINARY)": {
    "prefix": "*DSLOAD",
    "body": [
      "*DSLOAD, CYCLIC MODE=${1}, AMPLITUDE=${2}, CONSTANT RESULTANT=${3}, FOLLOWER=${4}, OP=${5}, ORIENTATION=${6}, REF NODE=${7}, IMAGINARY=${8}"
    ],
    "description": "DSLOAD with parameter(s) CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, IMAGINARY.",
    "scope": "source.inp"
  },
  "DSLOAD(CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REAL)": {
    "prefix": "*DSLOAD",
    "body": [
      "*DSLOAD, CYCLIC MODE=${1}, AMPLITUDE=${2}, CONSTANT RESULTANT=${3}, FOLLOWER=${4}, OP=${5}, ORIENTATION=${6}, REF NODE=${7}, REAL=${8}"
    ],
    "description": "DSLOAD with parameter(s) CYCLIC MODE, AMPLITUDE, CONSTANT RESULTANT, FOLLOWER, OP, ORIENTATION, REF NODE, REAL.",
    "scope": "source.inp"
  },
  "DYNAMIC TEMPERATURE-DISPLACEMENT(EXPLICIT)": {
    "prefix": "*DYNAMIC TEMPERATURE-DISPLACEMENT",
    "body": [
      "*DYNAMIC TEMPERATURE-DISPLACEMENT, EXPLICIT=${1}"
    ],
    "description": "DYNAMIC TEMPERATURE-DISPLACEMENT with parameter(s) EXPLICIT.",
    "scope": "source.inp"
  },
  "DYNAMIC TEMPERATURE-DISPLACEMENT(EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR)": {
    "prefix": "*DYNAMIC TEMPERATURE-DISPLACEMENT",
    "body": [
      "*DYNAMIC TEMPERATURE-DISPLACEMENT, EXPLICIT=${1}, IMPROVED DT METHOD=${2}, SCALE FACTOR=${3}"
    ],
    "description": "DYNAMIC TEMPERATURE-DISPLACEMENT with parameter(s) EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR.",
    "scope": "source.inp"
  },
  "DYNAMIC TEMPERATURE-DISPLACEMENT(EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR, DIRECT USER CONTROL)": {
    "prefix": "*DYNAMIC TEMPERATURE-DISPLACEMENT",
    "body": [
      "*DYNAMIC TEMPERATURE-DISPLACEMENT, EXPLICIT=${1}, IMPROVED DT METHOD=${2}, SCALE FACTOR=${3}, DIRECT USER CONTROL=${4}"
    ],
    "description": "DYNAMIC TEMPERATURE-DISPLACEMENT with parameter(s) EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR, DIRECT USER CONTROL.",
    "scope": "source.inp"
  },
  "DYNAMIC TEMPERATURE-DISPLACEMENT(EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR, ELEMENT BY ELEMENT)": {
    "prefix": "*DYNAMIC TEMPERATURE-DISPLACEMENT",
    "body": [
      "*DYNAMIC TEMPERATURE-DISPLACEMENT, EXPLICIT=${1}, IMPROVED DT METHOD=${2}, SCALE FACTOR=${3}, ELEMENT BY ELEMENT=${4}"
    ],
    "description": "DYNAMIC TEMPERATURE-DISPLACEMENT with parameter(s) EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR, ELEMENT BY ELEMENT.",
    "scope": "source.inp"
  },
  "DYNAMIC TEMPERATURE-DISPLACEMENT(EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR, FIXED TIME INCREMENTATION)": {
    "prefix": "*DYNAMIC TEMPERATURE-DISPLACEMENT",
    "body": [
      "*DYNAMIC TEMPERATURE-DISPLACEMENT, EXPLICIT=${1}, IMPROVED DT METHOD=${2}, SCALE FACTOR=${3}, FIXED TIME INCREMENTATION=${4}"
    ],
    "description": "DYNAMIC TEMPERATURE-DISPLACEMENT with parameter(s) EXPLICIT, IMPROVED DT METHOD, SCALE FACTOR, FIXED TIME INCREMENTATION.",
    "scope": "source.inp"
  },
  "DYNAMIC()": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC"
    ],
    "description": "DYNAMIC without parameter(s).",
    "scope": "source.inp"
  },
  "DYNAMIC(SUBSPACE)": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC, SUBSPACE=${1}"
    ],
    "description": "DYNAMIC with parameter(s) SUBSPACE.",
    "scope": "source.inp"
  },
  "DYNAMIC(EXPLICIT)": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC, EXPLICIT=${1}"
    ],
    "description": "DYNAMIC with parameter(s) EXPLICIT.",
    "scope": "source.inp"
  },
  "DYNAMIC(EXPLICIT, DIRECT USER CONTROL, ADIABATIC, IMPROVED DT METHOD, SCALE FACTOR)": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC, EXPLICIT=${1}, DIRECT USER CONTROL=${2}, ADIABATIC=${3}, IMPROVED DT METHOD=${4}, SCALE FACTOR=${5}"
    ],
    "description": "DYNAMIC with parameter(s) EXPLICIT, DIRECT USER CONTROL, ADIABATIC, IMPROVED DT METHOD, SCALE FACTOR.",
    "scope": "source.inp"
  },
  "DYNAMIC(EXPLICIT, ELEMENT BY ELEMENT, ADIABATIC, IMPROVED DT METHOD, SCALE FACTOR)": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC, EXPLICIT=${1}, ELEMENT BY ELEMENT=${2}, ADIABATIC=${3}, IMPROVED DT METHOD=${4}, SCALE FACTOR=${5}"
    ],
    "description": "DYNAMIC with parameter(s) EXPLICIT, ELEMENT BY ELEMENT, ADIABATIC, IMPROVED DT METHOD, SCALE FACTOR.",
    "scope": "source.inp"
  },
  "DYNAMIC(EXPLICIT, FIXED TIME INCREMENTATION, ADIABATIC, IMPROVED DT METHOD, SCALE FACTOR)": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC, EXPLICIT=${1}, FIXED TIME INCREMENTATION=${2}, ADIABATIC=${3}, IMPROVED DT METHOD=${4}, SCALE FACTOR=${5}"
    ],
    "description": "DYNAMIC with parameter(s) EXPLICIT, FIXED TIME INCREMENTATION, ADIABATIC, IMPROVED DT METHOD, SCALE FACTOR.",
    "scope": "source.inp"
  },
  "DYNAMIC(ADIABATIC, ALPHA, APPLICATION, BETA, DIRECT, GAMMA, HAFTOL, HALFINC SCALE FACTOR, IMPACT, INCREMENTATION, INITIAL, NOHAF, SINGULAR MASS, TIME INTEGRATOR)": {
    "prefix": "*DYNAMIC",
    "body": [
      "*DYNAMIC, ADIABATIC=${1}, ALPHA=${2}, APPLICATION=${3}, BETA=${4}, DIRECT=${5}, GAMMA=${6}, HAFTOL=${7}, HALFINC SCALE FACTOR=${8}, IMPACT=${9}, INCREMENTATION=${10}, INITIAL=${11}, NOHAF=${12}, SINGULAR MASS=${13}, TIME INTEGRATOR=${14}"
    ],
    "description": "DYNAMIC with parameter(s) ADIABATIC, ALPHA, APPLICATION, BETA, DIRECT, GAMMA, HAFTOL, HALFINC SCALE FACTOR, IMPACT, INCREMENTATION, INITIAL, NOHAF, SINGULAR MASS, TIME INTEGRATOR.",
    "scope": "source.inp"
  },
  "EL FILE()": {
    "prefix": "*EL FILE",
    "body": [
      "*EL FILE"
    ],
    "description": "EL FILE without parameter(s).",
    "scope": "source.inp"
  },
  "EL FILE(DIRECTIONS, ELSET, FREQUENCY, LAST MODE, MODE, POSITION, REBAR)": {
    "prefix": "*EL FILE",
    "body": [
      "*EL FILE, DIRECTIONS=${1}, ELSET=${2}, FREQUENCY=${3}, LAST MODE=${4}, MODE=${5}, POSITION=${6}, REBAR=${7}"
    ],
    "description": "EL FILE with parameter(s) DIRECTIONS, ELSET, FREQUENCY, LAST MODE, MODE, POSITION, REBAR.",
    "scope": "source.inp"
  },
  "EL PRINT()": {
    "prefix": "*EL PRINT",
    "body": [
      "*EL PRINT"
    ],
    "description": "EL PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "EL PRINT(ELSET, FREQUENCY, LAST MODE, MODE, POSITION, REBAR, SUMMARY, TOTALS)": {
    "prefix": "*EL PRINT",
    "body": [
      "*EL PRINT, ELSET=${1}, FREQUENCY=${2}, LAST MODE=${3}, MODE=${4}, POSITION=${5}, REBAR=${6}, SUMMARY=${7}, TOTALS=${8}"
    ],
    "description": "EL PRINT with parameter(s) ELSET, FREQUENCY, LAST MODE, MODE, POSITION, REBAR, SUMMARY, TOTALS.",
    "scope": "source.inp"
  },
  "ELASTIC()": {
    "prefix": "*ELASTIC",
    "body": [
      "*ELASTIC"
    ],
    "description": "ELASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "ELASTIC(DEPENDENCIES, MODULI, TYPE)": {
    "prefix": "*ELASTIC",
    "body": [
      "*ELASTIC, DEPENDENCIES=${1}, MODULI=${2}, TYPE=${3}"
    ],
    "description": "ELASTIC with parameter(s) DEPENDENCIES, MODULI, TYPE.",
    "scope": "source.inp"
  },
  "ELCOPY(ELEMENT SHIFT, OLD SET, SHIFT NODES)": {
    "prefix": "*ELCOPY",
    "body": [
      "*ELCOPY, ELEMENT SHIFT=${1}, OLD SET=${2}, SHIFT NODES=${3}"
    ],
    "description": "ELCOPY with parameter(s) ELEMENT SHIFT, OLD SET, SHIFT NODES.",
    "scope": "source.inp"
  },
  "ELCOPY(ELEMENT SHIFT, OLD SET, SHIFT NODES, NEW SET, REFLECT)": {
    "prefix": "*ELCOPY",
    "body": [
      "*ELCOPY, ELEMENT SHIFT=${1}, OLD SET=${2}, SHIFT NODES=${3}, NEW SET=${4}, REFLECT=${5}"
    ],
    "description": "ELCOPY with parameter(s) ELEMENT SHIFT, OLD SET, SHIFT NODES, NEW SET, REFLECT.",
    "scope": "source.inp"
  },
  "ELECTRICAL CONDUCTIVITY()": {
    "prefix": "*ELECTRICAL CONDUCTIVITY",
    "body": [
      "*ELECTRICAL CONDUCTIVITY"
    ],
    "description": "ELECTRICAL CONDUCTIVITY without parameter(s).",
    "scope": "source.inp"
  },
  "ELECTRICAL CONDUCTIVITY(DEPENDENCIES, FREQUENCY, TYPE)": {
    "prefix": "*ELECTRICAL CONDUCTIVITY",
    "body": [
      "*ELECTRICAL CONDUCTIVITY, DEPENDENCIES=${1}, FREQUENCY=${2}, TYPE=${3}"
    ],
    "description": "ELECTRICAL CONDUCTIVITY with parameter(s) DEPENDENCIES, FREQUENCY, TYPE.",
    "scope": "source.inp"
  },
  "ELECTROMAGNETIC(LOW FREQUENCY, TIME HARMONIC)": {
    "prefix": "*ELECTROMAGNETIC",
    "body": [
      "*ELECTROMAGNETIC, LOW FREQUENCY=${1}, TIME HARMONIC=${2}"
    ],
    "description": "ELECTROMAGNETIC with parameter(s) LOW FREQUENCY, TIME HARMONIC.",
    "scope": "source.inp"
  },
  "ELECTROMAGNETIC(LOW FREQUENCY, TRANSIENT)": {
    "prefix": "*ELECTROMAGNETIC",
    "body": [
      "*ELECTROMAGNETIC, LOW FREQUENCY=${1}, TRANSIENT=${2}"
    ],
    "description": "ELECTROMAGNETIC with parameter(s) LOW FREQUENCY, TRANSIENT.",
    "scope": "source.inp"
  },
  "ELECTROMAGNETIC(LOW FREQUENCY, TIME HARMONIC, DIRECT, STABILIZATION)": {
    "prefix": "*ELECTROMAGNETIC",
    "body": [
      "*ELECTROMAGNETIC, LOW FREQUENCY=${1}, TIME HARMONIC=${2}, DIRECT=${3}, STABILIZATION=${4}"
    ],
    "description": "ELECTROMAGNETIC with parameter(s) LOW FREQUENCY, TIME HARMONIC, DIRECT, STABILIZATION.",
    "scope": "source.inp"
  },
  "ELECTROMAGNETIC(LOW FREQUENCY, TRANSIENT, DIRECT, STABILIZATION)": {
    "prefix": "*ELECTROMAGNETIC",
    "body": [
      "*ELECTROMAGNETIC, LOW FREQUENCY=${1}, TRANSIENT=${2}, DIRECT=${3}, STABILIZATION=${4}"
    ],
    "description": "ELECTROMAGNETIC with parameter(s) LOW FREQUENCY, TRANSIENT, DIRECT, STABILIZATION.",
    "scope": "source.inp"
  },
  "ELEMENT MATRIX OUTPUT(ELSET)": {
    "prefix": "*ELEMENT MATRIX OUTPUT",
    "body": [
      "*ELEMENT MATRIX OUTPUT, ELSET=${1}"
    ],
    "description": "ELEMENT MATRIX OUTPUT with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "ELEMENT MATRIX OUTPUT(ELSET, DLOAD, FILE NAME, FREQUENCY, MASS, OUTPUT FILE, STIFFNESS)": {
    "prefix": "*ELEMENT MATRIX OUTPUT",
    "body": [
      "*ELEMENT MATRIX OUTPUT, ELSET=${1}, DLOAD=${2}, FILE NAME=${3}, FREQUENCY=${4}, MASS=${5}, OUTPUT FILE=${6}, STIFFNESS=${7}"
    ],
    "description": "ELEMENT MATRIX OUTPUT with parameter(s) ELSET, DLOAD, FILE NAME, FREQUENCY, MASS, OUTPUT FILE, STIFFNESS.",
    "scope": "source.inp"
  },
  "ELEMENT OUTPUT(ELSET)": {
    "prefix": "*ELEMENT OUTPUT",
    "body": [
      "*ELEMENT OUTPUT, ELSET=${1}"
    ],
    "description": "ELEMENT OUTPUT with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "ELEMENT OUTPUT(TRACER SET)": {
    "prefix": "*ELEMENT OUTPUT",
    "body": [
      "*ELEMENT OUTPUT, TRACER SET=${1}"
    ],
    "description": "ELEMENT OUTPUT with parameter(s) TRACER SET.",
    "scope": "source.inp"
  },
  "ELEMENT OUTPUT(ELSET, REBAR, VARIABLE)": {
    "prefix": "*ELEMENT OUTPUT",
    "body": [
      "*ELEMENT OUTPUT, ELSET=${1}, REBAR=${2}, VARIABLE=${3}"
    ],
    "description": "ELEMENT OUTPUT with parameter(s) ELSET, REBAR, VARIABLE.",
    "scope": "source.inp"
  },
  "ELEMENT OUTPUT(TRACER SET, REBAR, VARIABLE)": {
    "prefix": "*ELEMENT OUTPUT",
    "body": [
      "*ELEMENT OUTPUT, TRACER SET=${1}, REBAR=${2}, VARIABLE=${3}"
    ],
    "description": "ELEMENT OUTPUT with parameter(s) TRACER SET, REBAR, VARIABLE.",
    "scope": "source.inp"
  },
  "ELEMENT OUTPUT(DIRECTIONS, ELSET, EXTERIOR, POSITION)": {
    "prefix": "*ELEMENT OUTPUT",
    "body": [
      "*ELEMENT OUTPUT, DIRECTIONS=${1}, ELSET=${2}, EXTERIOR=${3}, POSITION=${4}"
    ],
    "description": "ELEMENT OUTPUT with parameter(s) DIRECTIONS, ELSET, EXTERIOR, POSITION.",
    "scope": "source.inp"
  },
  "ELEMENT OUTPUT(DIRECTIONS, ELSET, EXTERIOR, POSITION, REBAR, VARIABLE)": {
    "prefix": "*ELEMENT OUTPUT",
    "body": [
      "*ELEMENT OUTPUT, DIRECTIONS=${1}, ELSET=${2}, EXTERIOR=${3}, POSITION=${4}, REBAR=${5}, VARIABLE=${6}"
    ],
    "description": "ELEMENT OUTPUT with parameter(s) DIRECTIONS, ELSET, EXTERIOR, POSITION, REBAR, VARIABLE.",
    "scope": "source.inp"
  },
  "ELEMENT RESPONSE()": {
    "prefix": "*ELEMENT RESPONSE",
    "body": [
      "*ELEMENT RESPONSE"
    ],
    "description": "ELEMENT RESPONSE without parameter(s).",
    "scope": "source.inp"
  },
  "ELEMENT RESPONSE(ELSET)": {
    "prefix": "*ELEMENT RESPONSE",
    "body": [
      "*ELEMENT RESPONSE, ELSET=${1}"
    ],
    "description": "ELEMENT RESPONSE with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "ELEMENT(TYPE)": {
    "prefix": "*ELEMENT",
    "body": [
      "*ELEMENT, TYPE=${1}"
    ],
    "description": "ELEMENT with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "ELEMENT(TYPE, ELSET, FILE, INPUT, OFFSET, SOLID ELEMENT NUMBERING)": {
    "prefix": "*ELEMENT",
    "body": [
      "*ELEMENT, TYPE=${1}, ELSET=${2}, FILE=${3}, INPUT=${4}, OFFSET=${5}, SOLID ELEMENT, NUMBERING=${6}"
    ],
    "description": "ELEMENT with parameter(s) TYPE, ELSET, FILE, INPUT, OFFSET, SOLID ELEMENT NUMBERING.",
    "scope": "source.inp"
  },
  "ELGEN()": {
    "prefix": "*ELGEN",
    "body": [
      "*ELGEN"
    ],
    "description": "ELGEN without parameter(s).",
    "scope": "source.inp"
  },
  "ELGEN(ALL NODES, ELSET)": {
    "prefix": "*ELGEN",
    "body": [
      "*ELGEN, ALL NODES=${1}, ELSET=${2}"
    ],
    "description": "ELGEN with parameter(s) ALL NODES, ELSET.",
    "scope": "source.inp"
  },
  "ELSET(ELSET)": {
    "prefix": "*ELSET",
    "body": [
      "*ELSET, ELSET,=${1}"
    ],
    "description": "ELSET with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "ELSET(ELSET, GENERATE, INSTANCE, INTERNAL, UNSORTED)": {
    "prefix": "*ELSET",
    "body": [
      "*ELSET, ELSET,=${1}, GENERATE=${2}, INSTANCE=${3}, INTERNAL=${4}, UNSORTED=${5}"
    ],
    "description": "ELSET with parameter(s) ELSET, GENERATE, INSTANCE, INTERNAL, UNSORTED.",
    "scope": "source.inp"
  },
  "EMBEDDED ELEMENT()": {
    "prefix": "*EMBEDDED ELEMENT",
    "body": [
      "*EMBEDDED ELEMENT"
    ],
    "description": "EMBEDDED ELEMENT without parameter(s).",
    "scope": "source.inp"
  },
  "EMBEDDED ELEMENT(ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, HOST ELSET, ROUNDOFF TOLERANCE)": {
    "prefix": "*EMBEDDED ELEMENT",
    "body": [
      "*EMBEDDED ELEMENT, ABSOLUTE EXTERIOR TOLERANCE=${1}, EXTERIOR TOLERANCE=${2}, HOST ELSET=${3}, ROUNDOFF TOLERANCE=${4}"
    ],
    "description": "EMBEDDED ELEMENT with parameter(s) ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, HOST ELSET, ROUNDOFF TOLERANCE.",
    "scope": "source.inp"
  },
  "EMISSIVITY()": {
    "prefix": "*EMISSIVITY",
    "body": [
      "*EMISSIVITY"
    ],
    "description": "EMISSIVITY without parameter(s).",
    "scope": "source.inp"
  },
  "EMISSIVITY(DEPENDENCIES)": {
    "prefix": "*EMISSIVITY",
    "body": [
      "*EMISSIVITY, DEPENDENCIES=${1}"
    ],
    "description": "EMISSIVITY with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "END ASSEMBLY()": {
    "prefix": "*END ASSEMBLY",
    "body": [
      "*END ASSEMBLY"
    ],
    "description": "END ASSEMBLY without parameter(s).",
    "scope": "source.inp"
  },
  "END INSTANCE()": {
    "prefix": "*END INSTANCE",
    "body": [
      "*END INSTANCE"
    ],
    "description": "END INSTANCE without parameter(s).",
    "scope": "source.inp"
  },
  "END LOAD CASE()": {
    "prefix": "*END LOAD CASE",
    "body": [
      "*END LOAD CASE"
    ],
    "description": "END LOAD CASE without parameter(s).",
    "scope": "source.inp"
  },
  "END PART()": {
    "prefix": "*END PART",
    "body": [
      "*END PART"
    ],
    "description": "END PART without parameter(s).",
    "scope": "source.inp"
  },
  "END STEP()": {
    "prefix": "*END STEP",
    "body": [
      "*END STEP"
    ],
    "description": "END STEP without parameter(s).",
    "scope": "source.inp"
  },
  "ENERGY FILE()": {
    "prefix": "*ENERGY FILE",
    "body": [
      "*ENERGY FILE"
    ],
    "description": "ENERGY FILE without parameter(s).",
    "scope": "source.inp"
  },
  "ENERGY FILE(ELSET, FREQUENCY)": {
    "prefix": "*ENERGY FILE",
    "body": [
      "*ENERGY FILE, ELSET=${1}, FREQUENCY=${2}"
    ],
    "description": "ENERGY FILE with parameter(s) ELSET, FREQUENCY.",
    "scope": "source.inp"
  },
  "ENERGY OUTPUT()": {
    "prefix": "*ENERGY OUTPUT",
    "body": [
      "*ENERGY OUTPUT"
    ],
    "description": "ENERGY OUTPUT without parameter(s).",
    "scope": "source.inp"
  },
  "ENERGY OUTPUT(ELSET, VARIABLE, PER ELEMENT SET, PER SECTION)": {
    "prefix": "*ENERGY OUTPUT",
    "body": [
      "*ENERGY OUTPUT, ELSET=${1}, VARIABLE=${2}, PER ELEMENT SET=${3}, PER SECTION=${4}"
    ],
    "description": "ENERGY OUTPUT with parameter(s) ELSET, VARIABLE, PER ELEMENT SET, PER SECTION.",
    "scope": "source.inp"
  },
  "ENERGY PRINT()": {
    "prefix": "*ENERGY PRINT",
    "body": [
      "*ENERGY PRINT"
    ],
    "description": "ENERGY PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "ENERGY PRINT(ELSET, FREQUENCY)": {
    "prefix": "*ENERGY PRINT",
    "body": [
      "*ENERGY PRINT, ELSET=${1}, FREQUENCY=${2}"
    ],
    "description": "ENERGY PRINT with parameter(s) ELSET, FREQUENCY.",
    "scope": "source.inp"
  },
  "ENRICHMENT ACTIVATION(NAME)": {
    "prefix": "*ENRICHMENT ACTIVATION",
    "body": [
      "*ENRICHMENT ACTIVATION, NAME=${1}"
    ],
    "description": "ENRICHMENT ACTIVATION with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "ENRICHMENT ACTIVATION(NAME, ACTIVATE, TYPE)": {
    "prefix": "*ENRICHMENT ACTIVATION",
    "body": [
      "*ENRICHMENT ACTIVATION, NAME=${1}, ACTIVATE=${2}, TYPE=${3}"
    ],
    "description": "ENRICHMENT ACTIVATION with parameter(s) NAME, ACTIVATE, TYPE.",
    "scope": "source.inp"
  },
  "ENRICHMENT(ELSET, NAME)": {
    "prefix": "*ENRICHMENT",
    "body": [
      "*ENRICHMENT, ELSET=${1}, NAME=${2}"
    ],
    "description": "ENRICHMENT with parameter(s) ELSET, NAME.",
    "scope": "source.inp"
  },
  "ENRICHMENT(ELSET, NAME, ENRICHMENT RADIUS, INTERACTION, TYPE)": {
    "prefix": "*ENRICHMENT",
    "body": [
      "*ENRICHMENT, ELSET=${1}, NAME=${2}, ENRICHMENT, RADIUS=${3}, INTERACTION=${4}, TYPE=${5}"
    ],
    "description": "ENRICHMENT with parameter(s) ELSET, NAME, ENRICHMENT RADIUS, INTERACTION, TYPE.",
    "scope": "source.inp"
  },
  "EOS COMPACTION()": {
    "prefix": "*EOS COMPACTION",
    "body": [
      "*EOS COMPACTION"
    ],
    "description": "EOS COMPACTION without parameter(s).",
    "scope": "source.inp"
  },
  "EOS(TYPE)": {
    "prefix": "*EOS",
    "body": [
      "*EOS, TYPE=${1}"
    ],
    "description": "EOS with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "EOS(TYPE, DETONATION ENERGY)": {
    "prefix": "*EOS",
    "body": [
      "*EOS, TYPE=${1}, DETONATION ENERGY=${2}"
    ],
    "description": "EOS with parameter(s) TYPE, DETONATION ENERGY.",
    "scope": "source.inp"
  },
  "EPJOINT(ELSET, ORIENTATION)": {
    "prefix": "*EPJOINT",
    "body": [
      "*EPJOINT, ELSET=${1}, ORIENTATION=${2}"
    ],
    "description": "EPJOINT with parameter(s) ELSET, ORIENTATION.",
    "scope": "source.inp"
  },
  "EPJOINT(ELSET, ORIENTATION, SECTION)": {
    "prefix": "*EPJOINT",
    "body": [
      "*EPJOINT, ELSET=${1}, ORIENTATION=${2}, SECTION=${3}"
    ],
    "description": "EPJOINT with parameter(s) ELSET, ORIENTATION, SECTION.",
    "scope": "source.inp"
  },
  "EQUATION()": {
    "prefix": "*EQUATION",
    "body": [
      "*EQUATION"
    ],
    "description": "EQUATION without parameter(s).",
    "scope": "source.inp"
  },
  "EQUATION(INPUT)": {
    "prefix": "*EQUATION",
    "body": [
      "*EQUATION, INPUT=${1}"
    ],
    "description": "EQUATION with parameter(s) INPUT.",
    "scope": "source.inp"
  },
  "EULERIAN BOUNDARY()": {
    "prefix": "*EULERIAN BOUNDARY",
    "body": [
      "*EULERIAN BOUNDARY"
    ],
    "description": "EULERIAN BOUNDARY without parameter(s).",
    "scope": "source.inp"
  },
  "EULERIAN BOUNDARY(INFLOW, OP, OUTFLOW)": {
    "prefix": "*EULERIAN BOUNDARY",
    "body": [
      "*EULERIAN BOUNDARY, INFLOW=${1}, OP=${2}, OUTFLOW=${3}"
    ],
    "description": "EULERIAN BOUNDARY with parameter(s) INFLOW, OP, OUTFLOW.",
    "scope": "source.inp"
  },
  "EULERIAN MESH MOTION(ELSET)": {
    "prefix": "*EULERIAN MESH MOTION",
    "body": [
      "*EULERIAN MESH MOTION, ELSET=${1}"
    ],
    "description": "EULERIAN MESH MOTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "EULERIAN MESH MOTION(ELSET, SURFACE)": {
    "prefix": "*EULERIAN MESH MOTION",
    "body": [
      "*EULERIAN MESH MOTION, ELSET=${1}, SURFACE=${2}"
    ],
    "description": "EULERIAN MESH MOTION with parameter(s) ELSET, SURFACE.",
    "scope": "source.inp"
  },
  "EULERIAN MESH MOTION(ELSET, ASPECT RATIO MAX, BUFFER, CENTER, CONTRACT, OP, ORIENTATION, VMAX FACTOR, VOLFRAC MIN)": {
    "prefix": "*EULERIAN MESH MOTION",
    "body": [
      "*EULERIAN MESH MOTION, ELSET=${1}, ASPECT RATIO MAX=${2}, BUFFER=${3}, CENTER=${4}, CONTRACT=${5}, OP=${6}, ORIENTATION=${7}, VMAX FACTOR=${8}, VOLFRAC MIN=${9}"
    ],
    "description": "EULERIAN MESH MOTION with parameter(s) ELSET, ASPECT RATIO MAX, BUFFER, CENTER, CONTRACT, OP, ORIENTATION, VMAX FACTOR, VOLFRAC MIN.",
    "scope": "source.inp"
  },
  "EULERIAN MESH MOTION(ELSET, SURFACE, ASPECT RATIO MAX, BUFFER, CENTER, CONTRACT, OP, ORIENTATION, VMAX FACTOR, VOLFRAC MIN)": {
    "prefix": "*EULERIAN MESH MOTION",
    "body": [
      "*EULERIAN MESH MOTION, ELSET=${1}, SURFACE=${2}, ASPECT RATIO MAX=${3}, BUFFER=${4}, CENTER=${5}, CONTRACT=${6}, OP=${7}, ORIENTATION=${8}, VMAX FACTOR=${9}, VOLFRAC MIN=${10}"
    ],
    "description": "EULERIAN MESH MOTION with parameter(s) ELSET, SURFACE, ASPECT RATIO MAX, BUFFER, CENTER, CONTRACT, OP, ORIENTATION, VMAX FACTOR, VOLFRAC MIN.",
    "scope": "source.inp"
  },
  "EULERIAN SECTION(ELSET)": {
    "prefix": "*EULERIAN SECTION",
    "body": [
      "*EULERIAN SECTION, ELSET=${1}"
    ],
    "description": "EULERIAN SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "EULERIAN SECTION(ELSET, ADVECTION, CONTROLS, FLUX LIMIT RATIO)": {
    "prefix": "*EULERIAN SECTION",
    "body": [
      "*EULERIAN SECTION, ELSET=${1}, ADVECTION=${2}, CONTROLS=${3}, FLUX LIMIT RATIO=${4}"
    ],
    "description": "EULERIAN SECTION with parameter(s) ELSET, ADVECTION, CONTROLS, FLUX LIMIT RATIO.",
    "scope": "source.inp"
  },
  "EXPANSION()": {
    "prefix": "*EXPANSION",
    "body": [
      "*EXPANSION"
    ],
    "description": "EXPANSION without parameter(s).",
    "scope": "source.inp"
  },
  "EXPANSION(DEPENDENCIES, FIELD, PORE FLUID, TYPE, USER, ZERO)": {
    "prefix": "*EXPANSION",
    "body": [
      "*EXPANSION, DEPENDENCIES=${1}, FIELD=${2}, PORE FLUID=${3}, TYPE=${4}, USER=${5}, ZERO=${6}"
    ],
    "description": "EXPANSION with parameter(s) DEPENDENCIES, FIELD, PORE FLUID, TYPE, USER, ZERO.",
    "scope": "source.inp"
  },
  "EXTREME ELEMENT VALUE(ELSET, ABS)": {
    "prefix": "*EXTREME ELEMENT VALUE",
    "body": [
      "*EXTREME ELEMENT VALUE, ELSET=${1}, ABS=${2}"
    ],
    "description": "EXTREME ELEMENT VALUE with parameter(s) ELSET, ABS.",
    "scope": "source.inp"
  },
  "EXTREME ELEMENT VALUE(ELSET, MAX)": {
    "prefix": "*EXTREME ELEMENT VALUE",
    "body": [
      "*EXTREME ELEMENT VALUE, ELSET=${1}, MAX=${2}"
    ],
    "description": "EXTREME ELEMENT VALUE with parameter(s) ELSET, MAX.",
    "scope": "source.inp"
  },
  "EXTREME ELEMENT VALUE(ELSET, MIN)": {
    "prefix": "*EXTREME ELEMENT VALUE",
    "body": [
      "*EXTREME ELEMENT VALUE, ELSET=${1}, MIN=${2}"
    ],
    "description": "EXTREME ELEMENT VALUE with parameter(s) ELSET, MIN.",
    "scope": "source.inp"
  },
  "EXTREME ELEMENT VALUE(ELSET, ABS, OUTPUT)": {
    "prefix": "*EXTREME ELEMENT VALUE",
    "body": [
      "*EXTREME ELEMENT VALUE, ELSET=${1}, ABS=${2}, OUTPUT=${3}"
    ],
    "description": "EXTREME ELEMENT VALUE with parameter(s) ELSET, ABS, OUTPUT.",
    "scope": "source.inp"
  },
  "EXTREME ELEMENT VALUE(ELSET, MAX, OUTPUT)": {
    "prefix": "*EXTREME ELEMENT VALUE",
    "body": [
      "*EXTREME ELEMENT VALUE, ELSET=${1}, MAX=${2}, OUTPUT=${3}"
    ],
    "description": "EXTREME ELEMENT VALUE with parameter(s) ELSET, MAX, OUTPUT.",
    "scope": "source.inp"
  },
  "EXTREME ELEMENT VALUE(ELSET, MIN, OUTPUT)": {
    "prefix": "*EXTREME ELEMENT VALUE",
    "body": [
      "*EXTREME ELEMENT VALUE, ELSET=${1}, MIN=${2}, OUTPUT=${3}"
    ],
    "description": "EXTREME ELEMENT VALUE with parameter(s) ELSET, MIN, OUTPUT.",
    "scope": "source.inp"
  },
  "EXTREME NODE VALUE(NSET, ABS)": {
    "prefix": "*EXTREME NODE VALUE",
    "body": [
      "*EXTREME NODE VALUE, NSET=${1}, ABS=${2}"
    ],
    "description": "EXTREME NODE VALUE with parameter(s) NSET, ABS.",
    "scope": "source.inp"
  },
  "EXTREME NODE VALUE(NSET, MAX)": {
    "prefix": "*EXTREME NODE VALUE",
    "body": [
      "*EXTREME NODE VALUE, NSET=${1}, MAX=${2}"
    ],
    "description": "EXTREME NODE VALUE with parameter(s) NSET, MAX.",
    "scope": "source.inp"
  },
  "EXTREME NODE VALUE(NSET, MIN)": {
    "prefix": "*EXTREME NODE VALUE",
    "body": [
      "*EXTREME NODE VALUE, NSET=${1}, MIN=${2}"
    ],
    "description": "EXTREME NODE VALUE with parameter(s) NSET, MIN.",
    "scope": "source.inp"
  },
  "EXTREME NODE VALUE(NSET, ABS, OUTPUT)": {
    "prefix": "*EXTREME NODE VALUE",
    "body": [
      "*EXTREME NODE VALUE, NSET=${1}, ABS=${2}, OUTPUT=${3}"
    ],
    "description": "EXTREME NODE VALUE with parameter(s) NSET, ABS, OUTPUT.",
    "scope": "source.inp"
  },
  "EXTREME NODE VALUE(NSET, MAX, OUTPUT)": {
    "prefix": "*EXTREME NODE VALUE",
    "body": [
      "*EXTREME NODE VALUE, NSET=${1}, MAX=${2}, OUTPUT=${3}"
    ],
    "description": "EXTREME NODE VALUE with parameter(s) NSET, MAX, OUTPUT.",
    "scope": "source.inp"
  },
  "EXTREME NODE VALUE(NSET, MIN, OUTPUT)": {
    "prefix": "*EXTREME NODE VALUE",
    "body": [
      "*EXTREME NODE VALUE, NSET=${1}, MIN=${2}, OUTPUT=${3}"
    ],
    "description": "EXTREME NODE VALUE with parameter(s) NSET, MIN, OUTPUT.",
    "scope": "source.inp"
  },
  "EXTREME VALUE()": {
    "prefix": "*EXTREME VALUE",
    "body": [
      "*EXTREME VALUE"
    ],
    "description": "EXTREME VALUE without parameter(s).",
    "scope": "source.inp"
  },
  "EXTREME VALUE(HALT)": {
    "prefix": "*EXTREME VALUE",
    "body": [
      "*EXTREME VALUE, HALT=${1}"
    ],
    "description": "EXTREME VALUE with parameter(s) HALT.",
    "scope": "source.inp"
  },
  "FABRIC()": {
    "prefix": "*FABRIC",
    "body": [
      "*FABRIC"
    ],
    "description": "FABRIC without parameter(s).",
    "scope": "source.inp"
  },
  "FABRIC(PROPERTIES, STRESS FREE INITIAL SLACK, USER)": {
    "prefix": "*FABRIC",
    "body": [
      "*FABRIC, PROPERTIES=${1}, STRESS FREE INITIAL SLACK=${2}, USER=${3}"
    ],
    "description": "FABRIC with parameter(s) PROPERTIES, STRESS FREE INITIAL SLACK, USER.",
    "scope": "source.inp"
  },
  "FAIL STRAIN()": {
    "prefix": "*FAIL STRAIN",
    "body": [
      "*FAIL STRAIN"
    ],
    "description": "FAIL STRAIN without parameter(s).",
    "scope": "source.inp"
  },
  "FAIL STRAIN(DEPENDENCIES)": {
    "prefix": "*FAIL STRAIN",
    "body": [
      "*FAIL STRAIN, DEPENDENCIES=${1}"
    ],
    "description": "FAIL STRAIN with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "FAIL STRESS()": {
    "prefix": "*FAIL STRESS",
    "body": [
      "*FAIL STRESS"
    ],
    "description": "FAIL STRESS without parameter(s).",
    "scope": "source.inp"
  },
  "FAIL STRESS(DEPENDENCIES)": {
    "prefix": "*FAIL STRESS",
    "body": [
      "*FAIL STRESS, DEPENDENCIES=${1}"
    ],
    "description": "FAIL STRESS with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "FAILURE RATIOS()": {
    "prefix": "*FAILURE RATIOS",
    "body": [
      "*FAILURE RATIOS"
    ],
    "description": "FAILURE RATIOS without parameter(s).",
    "scope": "source.inp"
  },
  "FAILURE RATIOS(DEPENDENCIES)": {
    "prefix": "*FAILURE RATIOS",
    "body": [
      "*FAILURE RATIOS, DEPENDENCIES=${1}"
    ],
    "description": "FAILURE RATIOS with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "FASTENER PROPERTY(NAME)": {
    "prefix": "*FASTENER PROPERTY",
    "body": [
      "*FASTENER PROPERTY, NAME=${1}"
    ],
    "description": "FASTENER PROPERTY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "FASTENER PROPERTY(NAME, MASS)": {
    "prefix": "*FASTENER PROPERTY",
    "body": [
      "*FASTENER PROPERTY, NAME=${1}, MASS=${2}"
    ],
    "description": "FASTENER PROPERTY with parameter(s) NAME, MASS.",
    "scope": "source.inp"
  },
  "FASTENER(INTERACTION NAME, PROPERTY, ELSET)": {
    "prefix": "*FASTENER",
    "body": [
      "*FASTENER, INTERACTION NAME=${1}, PROPERTY=${2}, ELSET=${3}"
    ],
    "description": "FASTENER with parameter(s) INTERACTION NAME, PROPERTY, ELSET.",
    "scope": "source.inp"
  },
  "FASTENER(INTERACTION NAME, PROPERTY, REFERENCE NODE SET)": {
    "prefix": "*FASTENER",
    "body": [
      "*FASTENER, INTERACTION NAME=${1}, PROPERTY=${2}, REFERENCE NODE SET=${3}"
    ],
    "description": "FASTENER with parameter(s) INTERACTION NAME, PROPERTY, REFERENCE NODE SET.",
    "scope": "source.inp"
  },
  "FASTENER(INTERACTION NAME, PROPERTY, ELSET, REFERENCE NODE SET)": {
    "prefix": "*FASTENER",
    "body": [
      "*FASTENER, INTERACTION NAME=${1}, PROPERTY=${2}, ELSET=${3}, REFERENCE NODE SET=${4}"
    ],
    "description": "FASTENER with parameter(s) INTERACTION NAME, PROPERTY, ELSET, REFERENCE NODE SET.",
    "scope": "source.inp"
  },
  "FASTENER(INTERACTION NAME, PROPERTY, ELSET, ADJUST ORIENTATION, ATTACHMENT METHOD, COUPLING, NUMBER OF LAYERS, ORIENTATION, RADIUS OF INFLUENCE, SEARCH RADIUS, UNSORTED, WEIGHTING METHOD)": {
    "prefix": "*FASTENER",
    "body": [
      "*FASTENER, INTERACTION NAME=${1}, PROPERTY=${2}, ELSET=${3}, ADJUST ORIENTATION=${4}, ATTACHMENT METHOD=${5}, COUPLING=${6}, NUMBER OF LAYERS=${7}, ORIENTATION=${8}, RADIUS OF INFLUENCE=${9}, SEARCH RADIUS=${10}, UNSORTED=${11}, WEIGHTING METHOD=${12}"
    ],
    "description": "FASTENER with parameter(s) INTERACTION NAME, PROPERTY, ELSET, ADJUST ORIENTATION, ATTACHMENT METHOD, COUPLING, NUMBER OF LAYERS, ORIENTATION, RADIUS OF INFLUENCE, SEARCH RADIUS, UNSORTED, WEIGHTING METHOD.",
    "scope": "source.inp"
  },
  "FASTENER(INTERACTION NAME, PROPERTY, REFERENCE NODE SET, ADJUST ORIENTATION, ATTACHMENT METHOD, COUPLING, NUMBER OF LAYERS, ORIENTATION, RADIUS OF INFLUENCE, SEARCH RADIUS, UNSORTED, WEIGHTING METHOD)": {
    "prefix": "*FASTENER",
    "body": [
      "*FASTENER, INTERACTION NAME=${1}, PROPERTY=${2}, REFERENCE NODE SET=${3}, ADJUST ORIENTATION=${4}, ATTACHMENT METHOD=${5}, COUPLING=${6}, NUMBER OF LAYERS=${7}, ORIENTATION=${8}, RADIUS OF INFLUENCE=${9}, SEARCH RADIUS=${10}, UNSORTED=${11}, WEIGHTING METHOD=${12}"
    ],
    "description": "FASTENER with parameter(s) INTERACTION NAME, PROPERTY, REFERENCE NODE SET, ADJUST ORIENTATION, ATTACHMENT METHOD, COUPLING, NUMBER OF LAYERS, ORIENTATION, RADIUS OF INFLUENCE, SEARCH RADIUS, UNSORTED, WEIGHTING METHOD.",
    "scope": "source.inp"
  },
  "FASTENER(INTERACTION NAME, PROPERTY, ELSET, REFERENCE NODE SET, ADJUST ORIENTATION, ATTACHMENT METHOD, COUPLING, NUMBER OF LAYERS, ORIENTATION, RADIUS OF INFLUENCE, SEARCH RADIUS, UNSORTED, WEIGHTING METHOD)": {
    "prefix": "*FASTENER",
    "body": [
      "*FASTENER, INTERACTION NAME=${1}, PROPERTY=${2}, ELSET=${3}, REFERENCE NODE SET=${4}, ADJUST ORIENTATION=${5}, ATTACHMENT METHOD=${6}, COUPLING=${7}, NUMBER OF LAYERS=${8}, ORIENTATION=${9}, RADIUS OF INFLUENCE=${10}, SEARCH RADIUS=${11}, UNSORTED=${12}, WEIGHTING METHOD=${13}"
    ],
    "description": "FASTENER with parameter(s) INTERACTION NAME, PROPERTY, ELSET, REFERENCE NODE SET, ADJUST ORIENTATION, ATTACHMENT METHOD, COUPLING, NUMBER OF LAYERS, ORIENTATION, RADIUS OF INFLUENCE, SEARCH RADIUS, UNSORTED, WEIGHTING METHOD.",
    "scope": "source.inp"
  },
  "FIELD()": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD"
    ],
    "description": "FIELD without parameter(s).",
    "scope": "source.inp"
  },
  "FIELD(VARIABLE)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, VARIABLE=${1}"
    ],
    "description": "FIELD with parameter(s) VARIABLE.",
    "scope": "source.inp"
  },
  "FIELD(FILE)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, FILE=${1}"
    ],
    "description": "FIELD with parameter(s) FILE.",
    "scope": "source.inp"
  },
  "FIELD(OUTPUT VARIABLE)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, OUTPUT VARIABLE=${1}"
    ],
    "description": "FIELD with parameter(s) OUTPUT VARIABLE.",
    "scope": "source.inp"
  },
  "FIELD(USER)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, USER=${1}"
    ],
    "description": "FIELD with parameter(s) USER.",
    "scope": "source.inp"
  },
  "FIELD(OUTPUT VARIABLE, INTERPOLATE)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, OUTPUT VARIABLE=${1}, INTERPOLATE=${2}"
    ],
    "description": "FIELD with parameter(s) OUTPUT VARIABLE, INTERPOLATE.",
    "scope": "source.inp"
  },
  "FIELD(USER, NUMBER, BLOCKING)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, USER=${1}, NUMBER=${2}, BLOCKING=${3}"
    ],
    "description": "FIELD with parameter(s) USER, NUMBER, BLOCKING.",
    "scope": "source.inp"
  },
  "FIELD(AMPLITUDE, INPUT, OP)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, AMPLITUDE=${1}, INPUT=${2}, OP=${3}"
    ],
    "description": "FIELD with parameter(s) AMPLITUDE, INPUT, OP.",
    "scope": "source.inp"
  },
  "FIELD(FILE, BSTEP, BINC, ESTEP, EINC)": {
    "prefix": "*FIELD",
    "body": [
      "*FIELD, FILE=${1}, BSTEP=${2}, BINC=${3}, ESTEP=${4}, EINC=${5}"
    ],
    "description": "FIELD with parameter(s) FILE, BSTEP, BINC, ESTEP, EINC.",
    "scope": "source.inp"
  },
  "FILE FORMAT()": {
    "prefix": "*FILE FORMAT",
    "body": [
      "*FILE FORMAT"
    ],
    "description": "FILE FORMAT without parameter(s).",
    "scope": "source.inp"
  },
  "FILE FORMAT(ASCII, ZERO INCREMENT)": {
    "prefix": "*FILE FORMAT",
    "body": [
      "*FILE FORMAT, ASCII=${1}, ZERO INCREMENT=${2}"
    ],
    "description": "FILE FORMAT with parameter(s) ASCII, ZERO INCREMENT.",
    "scope": "source.inp"
  },
  "FILE OUTPUT(NUMBER INTERVAL)": {
    "prefix": "*FILE OUTPUT",
    "body": [
      "*FILE OUTPUT, NUMBER INTERVAL=${1}"
    ],
    "description": "FILE OUTPUT with parameter(s) NUMBER INTERVAL.",
    "scope": "source.inp"
  },
  "FILE OUTPUT(NUMBER INTERVAL, TIME MARKS)": {
    "prefix": "*FILE OUTPUT",
    "body": [
      "*FILE OUTPUT, NUMBER INTERVAL=${1}, TIME MARKS=${2}"
    ],
    "description": "FILE OUTPUT with parameter(s) NUMBER INTERVAL, TIME MARKS.",
    "scope": "source.inp"
  },
  "FILM PROPERTY(NAME)": {
    "prefix": "*FILM PROPERTY",
    "body": [
      "*FILM PROPERTY, NAME=${1}"
    ],
    "description": "FILM PROPERTY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "FILM PROPERTY(NAME, DEPENDENCIES)": {
    "prefix": "*FILM PROPERTY",
    "body": [
      "*FILM PROPERTY, NAME=${1}, DEPENDENCIES=${2}"
    ],
    "description": "FILM PROPERTY with parameter(s) NAME, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "FILM()": {
    "prefix": "*FILM",
    "body": [
      "*FILM"
    ],
    "description": "FILM without parameter(s).",
    "scope": "source.inp"
  },
  "FILM(AMPLITUDE, FILM AMPLITUDE, OP, REGION TYPE)": {
    "prefix": "*FILM",
    "body": [
      "*FILM, AMPLITUDE=${1}, FILM, AMPLITUDE=${2}, OP=${3}, REGION TYPE=${4}"
    ],
    "description": "FILM with parameter(s) AMPLITUDE, FILM AMPLITUDE, OP, REGION TYPE.",
    "scope": "source.inp"
  },
  "FILTER(NAME)": {
    "prefix": "*FILTER",
    "body": [
      "*FILTER, NAME=${1}"
    ],
    "description": "FILTER with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "FILTER(NAME, HALT, INVARIANT, LIMIT, OPERATOR, START CONDITION, TYPE)": {
    "prefix": "*FILTER",
    "body": [
      "*FILTER, NAME=${1}, HALT=${2}, INVARIANT=${3}, LIMIT=${4}, OPERATOR=${5}, START CONDITION=${6}, TYPE=${7}"
    ],
    "description": "FILTER with parameter(s) NAME, HALT, INVARIANT, LIMIT, OPERATOR, START CONDITION, TYPE.",
    "scope": "source.inp"
  },
  "FIXED MASS SCALING()": {
    "prefix": "*FIXED MASS SCALING",
    "body": [
      "*FIXED MASS SCALING"
    ],
    "description": "FIXED MASS SCALING without parameter(s).",
    "scope": "source.inp"
  },
  "FIXED MASS SCALING(DT, ELSET, FACTOR, TYPE)": {
    "prefix": "*FIXED MASS SCALING",
    "body": [
      "*FIXED MASS SCALING, DT=${1}, ELSET=${2}, FACTOR=${3}, TYPE=${4}"
    ],
    "description": "FIXED MASS SCALING with parameter(s) DT, ELSET, FACTOR, TYPE.",
    "scope": "source.inp"
  },
  "FLOW()": {
    "prefix": "*FLOW",
    "body": [
      "*FLOW"
    ],
    "description": "FLOW without parameter(s).",
    "scope": "source.inp"
  },
  "FLOW(AMPLITUDE, OP)": {
    "prefix": "*FLOW",
    "body": [
      "*FLOW, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "FLOW with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "FLUID BEHAVIOR(NAME)": {
    "prefix": "*FLUID BEHAVIOR",
    "body": [
      "*FLUID BEHAVIOR, NAME=${1}"
    ],
    "description": "FLUID BEHAVIOR with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "FLUID BEHAVIOR(NAME, USER)": {
    "prefix": "*FLUID BEHAVIOR",
    "body": [
      "*FLUID BEHAVIOR, NAME=${1}, USER=${2}"
    ],
    "description": "FLUID BEHAVIOR with parameter(s) NAME, USER.",
    "scope": "source.inp"
  },
  "FLUID BOUNDARY(TYPE)": {
    "prefix": "*FLUID BOUNDARY",
    "body": [
      "*FLUID BOUNDARY, TYPE=${1}"
    ],
    "description": "FLUID BOUNDARY with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "FLUID BOUNDARY(TYPE, AMPLITUDE, DISTRIBUTION, OP)": {
    "prefix": "*FLUID BOUNDARY",
    "body": [
      "*FLUID BOUNDARY, TYPE=${1}, AMPLITUDE=${2}, DISTRIBUTION=${3}, OP=${4}"
    ],
    "description": "FLUID BOUNDARY with parameter(s) TYPE, AMPLITUDE, DISTRIBUTION, OP.",
    "scope": "source.inp"
  },
  "FLUID BULK MODULUS()": {
    "prefix": "*FLUID BULK MODULUS",
    "body": [
      "*FLUID BULK MODULUS"
    ],
    "description": "FLUID BULK MODULUS without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID BULK MODULUS(DEPENDENCIES)": {
    "prefix": "*FLUID BULK MODULUS",
    "body": [
      "*FLUID BULK MODULUS, DEPENDENCIES=${1}"
    ],
    "description": "FLUID BULK MODULUS with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "FLUID CAVITY(NAME, REF NODE, BEHAVIOR)": {
    "prefix": "*FLUID CAVITY",
    "body": [
      "*FLUID CAVITY, NAME=${1}, REF NODE=${2}, BEHAVIOR=${3}"
    ],
    "description": "FLUID CAVITY with parameter(s) NAME, REF NODE, BEHAVIOR.",
    "scope": "source.inp"
  },
  "FLUID CAVITY(NAME, REF NODE, MIXTURE)": {
    "prefix": "*FLUID CAVITY",
    "body": [
      "*FLUID CAVITY, NAME=${1}, REF NODE=${2}, MIXTURE=${3}"
    ],
    "description": "FLUID CAVITY with parameter(s) NAME, REF NODE, MIXTURE.",
    "scope": "source.inp"
  },
  "FLUID CAVITY(NAME, REF NODE, BEHAVIOR, ADDED VOLUME, ADIABATIC, AMBIENT PRESSURE, AMBIENT TEMPERATURE, CHECK NORMALS, MINIMUM VOLUME, SURFACE)": {
    "prefix": "*FLUID CAVITY",
    "body": [
      "*FLUID CAVITY, NAME=${1}, REF NODE=${2}, BEHAVIOR=${3}, ADDED VOLUME=${4}, ADIABATIC=${5}, AMBIENT PRESSURE=${6}, AMBIENT TEMPERATURE=${7}, CHECK NORMALS=${8}, MINIMUM VOLUME=${9}, SURFACE=${10}"
    ],
    "description": "FLUID CAVITY with parameter(s) NAME, REF NODE, BEHAVIOR, ADDED VOLUME, ADIABATIC, AMBIENT PRESSURE, AMBIENT TEMPERATURE, CHECK NORMALS, MINIMUM VOLUME, SURFACE.",
    "scope": "source.inp"
  },
  "FLUID CAVITY(NAME, REF NODE, MIXTURE, ADDED VOLUME, ADIABATIC, AMBIENT PRESSURE, AMBIENT TEMPERATURE, CHECK NORMALS, MINIMUM VOLUME, SURFACE)": {
    "prefix": "*FLUID CAVITY",
    "body": [
      "*FLUID CAVITY, NAME=${1}, REF NODE=${2}, MIXTURE=${3}, ADDED VOLUME=${4}, ADIABATIC=${5}, AMBIENT PRESSURE=${6}, AMBIENT TEMPERATURE=${7}, CHECK NORMALS=${8}, MINIMUM VOLUME=${9}, SURFACE=${10}"
    ],
    "description": "FLUID CAVITY with parameter(s) NAME, REF NODE, MIXTURE, ADDED VOLUME, ADIABATIC, AMBIENT PRESSURE, AMBIENT TEMPERATURE, CHECK NORMALS, MINIMUM VOLUME, SURFACE.",
    "scope": "source.inp"
  },
  "FLUID DENSITY()": {
    "prefix": "*FLUID DENSITY",
    "body": [
      "*FLUID DENSITY"
    ],
    "description": "FLUID DENSITY without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID EXCHANGE ACTIVATION()": {
    "prefix": "*FLUID EXCHANGE ACTIVATION",
    "body": [
      "*FLUID EXCHANGE ACTIVATION"
    ],
    "description": "FLUID EXCHANGE ACTIVATION without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID EXCHANGE ACTIVATION(AMPLITUDE, BLOCKAGE, DELTA LEAKAGE AREA, OP, OUTFLOW ONLY)": {
    "prefix": "*FLUID EXCHANGE ACTIVATION",
    "body": [
      "*FLUID EXCHANGE ACTIVATION, AMPLITUDE=${1}, BLOCKAGE=${2}, DELTA LEAKAGE AREA=${3}, OP=${4}, OUTFLOW ONLY=${5}"
    ],
    "description": "FLUID EXCHANGE ACTIVATION with parameter(s) AMPLITUDE, BLOCKAGE, DELTA LEAKAGE AREA, OP, OUTFLOW ONLY.",
    "scope": "source.inp"
  },
  "FLUID EXCHANGE PROPERTY(NAME, TYPE)": {
    "prefix": "*FLUID EXCHANGE PROPERTY",
    "body": [
      "*FLUID EXCHANGE PROPERTY, NAME=${1}, TYPE=${2}"
    ],
    "description": "FLUID EXCHANGE PROPERTY with parameter(s) NAME, TYPE.",
    "scope": "source.inp"
  },
  "FLUID EXCHANGE PROPERTY(NAME, TYPE, CONSTANTS, DEPENDENCIES, DEPVAR)": {
    "prefix": "*FLUID EXCHANGE PROPERTY",
    "body": [
      "*FLUID EXCHANGE PROPERTY, NAME=${1}, TYPE=${2}, CONSTANTS=${3}, DEPENDENCIES=${4}, DEPVAR=${5}"
    ],
    "description": "FLUID EXCHANGE PROPERTY with parameter(s) NAME, TYPE, CONSTANTS, DEPENDENCIES, DEPVAR.",
    "scope": "source.inp"
  },
  "FLUID EXCHANGE(NAME, PROPERTY)": {
    "prefix": "*FLUID EXCHANGE",
    "body": [
      "*FLUID EXCHANGE, NAME=${1}, PROPERTY=${2}"
    ],
    "description": "FLUID EXCHANGE with parameter(s) NAME, PROPERTY.",
    "scope": "source.inp"
  },
  "FLUID EXCHANGE(NAME, PROPERTY, CAVITY PRESSURE, CONSTANTS, EFFECTIVE AREA, SURFACE)": {
    "prefix": "*FLUID EXCHANGE",
    "body": [
      "*FLUID EXCHANGE, NAME=${1}, PROPERTY=${2}, CAVITY PRESSURE=${3}, CONSTANTS=${4}, EFFECTIVE AREA=${5}, SURFACE=${6}"
    ],
    "description": "FLUID EXCHANGE with parameter(s) NAME, PROPERTY, CAVITY PRESSURE, CONSTANTS, EFFECTIVE AREA, SURFACE.",
    "scope": "source.inp"
  },
  "FLUID EXPANSION()": {
    "prefix": "*FLUID EXPANSION",
    "body": [
      "*FLUID EXPANSION"
    ],
    "description": "FLUID EXPANSION without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID EXPANSION(DEPENDENCIES, ZERO)": {
    "prefix": "*FLUID EXPANSION",
    "body": [
      "*FLUID EXPANSION, DEPENDENCIES=${1}, ZERO=${2}"
    ],
    "description": "FLUID EXPANSION with parameter(s) DEPENDENCIES, ZERO.",
    "scope": "source.inp"
  },
  "FLUID FLUX()": {
    "prefix": "*FLUID FLUX",
    "body": [
      "*FLUID FLUX"
    ],
    "description": "FLUID FLUX without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID FLUX(AMPLITUDE, OP)": {
    "prefix": "*FLUID FLUX",
    "body": [
      "*FLUID FLUX, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "FLUID FLUX with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "FLUID INFLATOR ACTIVATION()": {
    "prefix": "*FLUID INFLATOR ACTIVATION",
    "body": [
      "*FLUID INFLATOR ACTIVATION"
    ],
    "description": "FLUID INFLATOR ACTIVATION without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID INFLATOR ACTIVATION(INFLATION TIME AMPLITUDE, MASS FLOW AMPLITUDE, OP)": {
    "prefix": "*FLUID INFLATOR ACTIVATION",
    "body": [
      "*FLUID INFLATOR ACTIVATION, INFLATION TIME AMPLITUDE=${1}, MASS FLOW AMPLITUDE=${2}, OP=${3}"
    ],
    "description": "FLUID INFLATOR ACTIVATION with parameter(s) INFLATION TIME AMPLITUDE, MASS FLOW AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "FLUID INFLATOR MIXTURE(NUMBER SPECIES)": {
    "prefix": "*FLUID INFLATOR MIXTURE",
    "body": [
      "*FLUID INFLATOR MIXTURE, NUMBER SPECIES=${1}"
    ],
    "description": "FLUID INFLATOR MIXTURE with parameter(s) NUMBER SPECIES.",
    "scope": "source.inp"
  },
  "FLUID INFLATOR MIXTURE(NUMBER SPECIES, TYPE)": {
    "prefix": "*FLUID INFLATOR MIXTURE",
    "body": [
      "*FLUID INFLATOR MIXTURE, NUMBER SPECIES=${1}, TYPE=${2}"
    ],
    "description": "FLUID INFLATOR MIXTURE with parameter(s) NUMBER SPECIES, TYPE.",
    "scope": "source.inp"
  },
  "FLUID INFLATOR PROPERTY(EFFECTIVE AREA, NAME, TANK VOLUME, TYPE)": {
    "prefix": "*FLUID INFLATOR PROPERTY",
    "body": [
      "*FLUID INFLATOR PROPERTY, EFFECTIVE AREA=${1}, NAME=${2}, TANK VOLUME=${3}, TYPE=${4}"
    ],
    "description": "FLUID INFLATOR PROPERTY with parameter(s) EFFECTIVE AREA, NAME, TANK VOLUME, TYPE.",
    "scope": "source.inp"
  },
  "FLUID INFLATOR PROPERTY(EFFECTIVE AREA, NAME, TANK VOLUME, TYPE, DISCHARGE COEFFICIENT)": {
    "prefix": "*FLUID INFLATOR PROPERTY",
    "body": [
      "*FLUID INFLATOR PROPERTY, EFFECTIVE AREA=${1}, NAME=${2}, TANK VOLUME=${3}, TYPE=${4}, DISCHARGE COEFFICIENT=${5}"
    ],
    "description": "FLUID INFLATOR PROPERTY with parameter(s) EFFECTIVE AREA, NAME, TANK VOLUME, TYPE, DISCHARGE COEFFICIENT.",
    "scope": "source.inp"
  },
  "FLUID INFLATOR(NAME, PROPERTY)": {
    "prefix": "*FLUID INFLATOR",
    "body": [
      "*FLUID INFLATOR, NAME=${1}, PROPERTY=${2}"
    ],
    "description": "FLUID INFLATOR with parameter(s) NAME, PROPERTY.",
    "scope": "source.inp"
  },
  "FLUID LEAKOFF()": {
    "prefix": "*FLUID LEAKOFF",
    "body": [
      "*FLUID LEAKOFF"
    ],
    "description": "FLUID LEAKOFF without parameter(s).",
    "scope": "source.inp"
  },
  "FLUID LEAKOFF(DEPENDENCIES)": {
    "prefix": "*FLUID LEAKOFF",
    "body": [
      "*FLUID LEAKOFF, DEPENDENCIES=${1}"
    ],
    "description": "FLUID LEAKOFF with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "FLUID LEAKOFF(USER)": {
    "prefix": "*FLUID LEAKOFF",
    "body": [
      "*FLUID LEAKOFF, USER=${1}"
    ],
    "description": "FLUID LEAKOFF with parameter(s) USER.",
    "scope": "source.inp"
  },
  "FLUID SECTION(ELSET)": {
    "prefix": "*FLUID SECTION",
    "body": [
      "*FLUID SECTION, ELSET=${1}"
    ],
    "description": "FLUID SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "FLUID SECTION(ELSET, TYPE)": {
    "prefix": "*FLUID SECTION",
    "body": [
      "*FLUID SECTION, ELSET=${1}, TYPE=${2}"
    ],
    "description": "FLUID SECTION with parameter(s) ELSET, TYPE.",
    "scope": "source.inp"
  },
  "FOUNDATION()": {
    "prefix": "*FOUNDATION",
    "body": [
      "*FOUNDATION"
    ],
    "description": "FOUNDATION without parameter(s).",
    "scope": "source.inp"
  },
  "FRACTURE CRITERION(DISTANCE, NSET, TYPE)": {
    "prefix": "*FRACTURE CRITERION",
    "body": [
      "*FRACTURE CRITERION, DISTANCE=${1}, NSET=${2}, TYPE=${3}"
    ],
    "description": "FRACTURE CRITERION with parameter(s) DISTANCE, NSET, TYPE.",
    "scope": "source.inp"
  },
  "FRACTURE CRITERION(DISTANCE, NSET, TYPE, DEPENDENCIES, MIXED MODE BEHAVIOR, NODAL ENERGY RATE, NORMAL DIRECTION, SYMMETRY, UNSTABLE GROWTH TOLERANCE, TOLERANCE, VISCOSITY)": {
    "prefix": "*FRACTURE CRITERION",
    "body": [
      "*FRACTURE CRITERION, DISTANCE=${1}, NSET=${2}, TYPE=${3}, DEPENDENCIES=${4}, MIXED MODE BEHAVIOR=${5}, NODAL ENERGY RATE=${6}, NORMAL DIRECTION=${7}, SYMMETRY=${8}, UNSTABLE GROWTH TOLERANCE=${9}, TOLERANCE=${10}, VISCOSITY=${11}"
    ],
    "description": "FRACTURE CRITERION with parameter(s) DISTANCE, NSET, TYPE, DEPENDENCIES, MIXED MODE BEHAVIOR, NODAL ENERGY RATE, NORMAL DIRECTION, SYMMETRY, UNSTABLE GROWTH TOLERANCE, TOLERANCE, VISCOSITY.",
    "scope": "source.inp"
  },
  "FRAME SECTION(ELSET)": {
    "prefix": "*FRAME SECTION",
    "body": [
      "*FRAME SECTION, ELSET=${1}"
    ],
    "description": "FRAME SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "FRAME SECTION(ELSET, BUCKLING, DENSITY, DEPENDENCIES, PINNED, PLASTIC DEFAULTS, SECTION, YIELD STRESS, ZERO)": {
    "prefix": "*FRAME SECTION",
    "body": [
      "*FRAME SECTION, ELSET=${1}, BUCKLING=${2}, DENSITY=${3}, DEPENDENCIES=${4}, PINNED=${5}, PLASTIC DEFAULTS=${6}, SECTION=${7}, YIELD STRESS=${8}, ZERO=${9}"
    ],
    "description": "FRAME SECTION with parameter(s) ELSET, BUCKLING, DENSITY, DEPENDENCIES, PINNED, PLASTIC DEFAULTS, SECTION, YIELD STRESS, ZERO.",
    "scope": "source.inp"
  },
  "FREQUENCY()": {
    "prefix": "*FREQUENCY",
    "body": [
      "*FREQUENCY"
    ],
    "description": "FREQUENCY without parameter(s).",
    "scope": "source.inp"
  },
  "FREQUENCY(EIGENSOLVER, ACOUSTIC COUPLING, DAMPING PROJECTION, NORMALIZATION, PROPERTY EVALUATION, RESIDUAL MODES, SIM)": {
    "prefix": "*FREQUENCY",
    "body": [
      "*FREQUENCY, EIGENSOLVER=${1}, ACOUSTIC COUPLING=${2}, DAMPING PROJECTION=${3}, NORMALIZATION=${4}, PROPERTY EVALUATION=${5}, RESIDUAL MODES=${6}, SIM=${7}"
    ],
    "description": "FREQUENCY with parameter(s) EIGENSOLVER, ACOUSTIC COUPLING, DAMPING PROJECTION, NORMALIZATION, PROPERTY EVALUATION, RESIDUAL MODES, SIM.",
    "scope": "source.inp"
  },
  "FREQUENCY(EIGENSOLVER=AMS, ACOUSTIC COUPLING, DAMPING PROJECTION, NORMALIZATION, PROPERTY EVALUATION, RESIDUAL MODES, SIM, NSET)": {
    "prefix": "*FREQUENCY",
    "body": [
      "*FREQUENCY, EIGENSOLVER=AMS, ACOUSTIC COUPLING=${1}, DAMPING PROJECTION=${2}, NORMALIZATION=${3}, PROPERTY EVALUATION=${4}, RESIDUAL MODES=${5}, SIM=${6}, NSET=${7}"
    ],
    "description": "FREQUENCY with parameter(s) EIGENSOLVER, ACOUSTIC COUPLING, DAMPING PROJECTION, NORMALIZATION, PROPERTY EVALUATION, RESIDUAL MODES, SIM, NSET.",
    "scope": "source.inp"
  },
  "FRICTION()": {
    "prefix": "*FRICTION",
    "body": [
      "*FRICTION"
    ],
    "description": "FRICTION without parameter(s).",
    "scope": "source.inp"
  },
  "FRICTION(ELASTIC SLIP, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA)": {
    "prefix": "*FRICTION",
    "body": [
      "*FRICTION, ELASTIC SLIP=${1}, ANISOTROPIC=${2}, DEPENDENCIES=${3}, DEPVAR=${4}, EXPONENTIAL DECAY=${5}, PROPERTIES=${6}, SHEAR TRACTION SLOPE=${7}, TAUMAX=${8}, TEST DATA=${9}"
    ],
    "description": "FRICTION with parameter(s) ELASTIC SLIP, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA.",
    "scope": "source.inp"
  },
  "FRICTION(LAGRANGE, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA)": {
    "prefix": "*FRICTION",
    "body": [
      "*FRICTION, LAGRANGE=${1}, ANISOTROPIC=${2}, DEPENDENCIES=${3}, DEPVAR=${4}, EXPONENTIAL DECAY=${5}, PROPERTIES=${6}, SHEAR TRACTION SLOPE=${7}, TAUMAX=${8}, TEST DATA=${9}"
    ],
    "description": "FRICTION with parameter(s) LAGRANGE, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA.",
    "scope": "source.inp"
  },
  "FRICTION(ROUGH, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA)": {
    "prefix": "*FRICTION",
    "body": [
      "*FRICTION, ROUGH=${1}, ANISOTROPIC=${2}, DEPENDENCIES=${3}, DEPVAR=${4}, EXPONENTIAL DECAY=${5}, PROPERTIES=${6}, SHEAR TRACTION SLOPE=${7}, TAUMAX=${8}, TEST DATA=${9}"
    ],
    "description": "FRICTION with parameter(s) ROUGH, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA.",
    "scope": "source.inp"
  },
  "FRICTION(SLIP TOLERANCE, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA)": {
    "prefix": "*FRICTION",
    "body": [
      "*FRICTION, SLIP TOLERANCE=${1}, ANISOTROPIC=${2}, DEPENDENCIES=${3}, DEPVAR=${4}, EXPONENTIAL DECAY=${5}, PROPERTIES=${6}, SHEAR TRACTION SLOPE=${7}, TAUMAX=${8}, TEST DATA=${9}"
    ],
    "description": "FRICTION with parameter(s) SLIP TOLERANCE, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA.",
    "scope": "source.inp"
  },
  "FRICTION(USER, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA)": {
    "prefix": "*FRICTION",
    "body": [
      "*FRICTION, USER=${1}, ANISOTROPIC=${2}, DEPENDENCIES=${3}, DEPVAR=${4}, EXPONENTIAL DECAY=${5}, PROPERTIES=${6}, SHEAR TRACTION SLOPE=${7}, TAUMAX=${8}, TEST DATA=${9}"
    ],
    "description": "FRICTION with parameter(s) USER, ANISOTROPIC, DEPENDENCIES, DEPVAR, EXPONENTIAL DECAY, PROPERTIES, SHEAR TRACTION SLOPE, TAUMAX, TEST DATA.",
    "scope": "source.inp"
  },
  "GAP CONDUCTANCE()": {
    "prefix": "*GAP CONDUCTANCE",
    "body": [
      "*GAP CONDUCTANCE"
    ],
    "description": "GAP CONDUCTANCE without parameter(s).",
    "scope": "source.inp"
  },
  "GAP CONDUCTANCE(DEPENDENCIES, PRESSURE, USER)": {
    "prefix": "*GAP CONDUCTANCE",
    "body": [
      "*GAP CONDUCTANCE, DEPENDENCIES=${1}, PRESSURE=${2}, USER=${3}"
    ],
    "description": "GAP CONDUCTANCE with parameter(s) DEPENDENCIES, PRESSURE, USER.",
    "scope": "source.inp"
  },
  "GAP ELECTRICAL CONDUCTANCE()": {
    "prefix": "*GAP ELECTRICAL CONDUCTANCE",
    "body": [
      "*GAP ELECTRICAL CONDUCTANCE"
    ],
    "description": "GAP ELECTRICAL CONDUCTANCE without parameter(s).",
    "scope": "source.inp"
  },
  "GAP ELECTRICAL CONDUCTANCE(DEPENDENCIES, PRESSURE, USER)": {
    "prefix": "*GAP ELECTRICAL CONDUCTANCE",
    "body": [
      "*GAP ELECTRICAL CONDUCTANCE, DEPENDENCIES=${1}, PRESSURE=${2}, USER=${3}"
    ],
    "description": "GAP ELECTRICAL CONDUCTANCE with parameter(s) DEPENDENCIES, PRESSURE, USER.",
    "scope": "source.inp"
  },
  "GAP FLOW()": {
    "prefix": "*GAP FLOW",
    "body": [
      "*GAP FLOW"
    ],
    "description": "GAP FLOW without parameter(s).",
    "scope": "source.inp"
  },
  "GAP FLOW(DEPENDENCIES, TYPE, KMAX)": {
    "prefix": "*GAP FLOW",
    "body": [
      "*GAP FLOW, DEPENDENCIES=${1}, TYPE=${2}, KMAX=${3}"
    ],
    "description": "GAP FLOW with parameter(s) DEPENDENCIES, TYPE, KMAX.",
    "scope": "source.inp"
  },
  "GAP HEAT GENERATION()": {
    "prefix": "*GAP HEAT GENERATION",
    "body": [
      "*GAP HEAT GENERATION"
    ],
    "description": "GAP HEAT GENERATION without parameter(s).",
    "scope": "source.inp"
  },
  "GAP RADIATION()": {
    "prefix": "*GAP RADIATION",
    "body": [
      "*GAP RADIATION"
    ],
    "description": "GAP RADIATION without parameter(s).",
    "scope": "source.inp"
  },
  "GAP(ELSET)": {
    "prefix": "*GAP",
    "body": [
      "*GAP, ELSET=${1}"
    ],
    "description": "GAP with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "GAS SPECIFIC HEAT()": {
    "prefix": "*GAS SPECIFIC HEAT",
    "body": [
      "*GAS SPECIFIC HEAT"
    ],
    "description": "GAS SPECIFIC HEAT without parameter(s).",
    "scope": "source.inp"
  },
  "GAS SPECIFIC HEAT(DEPENDENCIES)": {
    "prefix": "*GAS SPECIFIC HEAT",
    "body": [
      "*GAS SPECIFIC HEAT, DEPENDENCIES=${1}"
    ],
    "description": "GAS SPECIFIC HEAT with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "GASKET BEHAVIOR(NAME)": {
    "prefix": "*GASKET BEHAVIOR",
    "body": [
      "*GASKET BEHAVIOR, NAME=${1}"
    ],
    "description": "GASKET BEHAVIOR with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "GASKET CONTACT AREA()": {
    "prefix": "*GASKET CONTACT AREA",
    "body": [
      "*GASKET CONTACT AREA"
    ],
    "description": "GASKET CONTACT AREA without parameter(s).",
    "scope": "source.inp"
  },
  "GASKET CONTACT AREA(DEPENDENCIES)": {
    "prefix": "*GASKET CONTACT AREA",
    "body": [
      "*GASKET CONTACT AREA, DEPENDENCIES=${1}"
    ],
    "description": "GASKET CONTACT AREA with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "GASKET ELASTICITY()": {
    "prefix": "*GASKET ELASTICITY",
    "body": [
      "*GASKET ELASTICITY"
    ],
    "description": "GASKET ELASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "GASKET ELASTICITY(COMPONENT, DEPENDENCIES, VARIABLE)": {
    "prefix": "*GASKET ELASTICITY",
    "body": [
      "*GASKET ELASTICITY, COMPONENT=${1}, DEPENDENCIES=${2}, VARIABLE=${3}"
    ],
    "description": "GASKET ELASTICITY with parameter(s) COMPONENT, DEPENDENCIES, VARIABLE.",
    "scope": "source.inp"
  },
  "GASKET SECTION(ELSET, BEHAVIOR)": {
    "prefix": "*GASKET SECTION",
    "body": [
      "*GASKET SECTION, ELSET=${1}, BEHAVIOR=${2}"
    ],
    "description": "GASKET SECTION with parameter(s) ELSET, BEHAVIOR.",
    "scope": "source.inp"
  },
  "GASKET SECTION(ELSET, MATERIAL)": {
    "prefix": "*GASKET SECTION",
    "body": [
      "*GASKET SECTION, ELSET=${1}, MATERIAL=${2}"
    ],
    "description": "GASKET SECTION with parameter(s) ELSET, MATERIAL.",
    "scope": "source.inp"
  },
  "GASKET SECTION(ELSET, BEHAVIOR, ORIENTATION, STABILIZATION STIFFNESS)": {
    "prefix": "*GASKET SECTION",
    "body": [
      "*GASKET SECTION, ELSET=${1}, BEHAVIOR=${2}, ORIENTATION=${3}, STABILIZATION STIFFNESS=${4}"
    ],
    "description": "GASKET SECTION with parameter(s) ELSET, BEHAVIOR, ORIENTATION, STABILIZATION STIFFNESS.",
    "scope": "source.inp"
  },
  "GASKET SECTION(ELSET, MATERIAL, ORIENTATION, STABILIZATION STIFFNESS)": {
    "prefix": "*GASKET SECTION",
    "body": [
      "*GASKET SECTION, ELSET=${1}, MATERIAL=${2}, ORIENTATION=${3}, STABILIZATION STIFFNESS=${4}"
    ],
    "description": "GASKET SECTION with parameter(s) ELSET, MATERIAL, ORIENTATION, STABILIZATION STIFFNESS.",
    "scope": "source.inp"
  },
  "GASKET THICKNESS BEHAVIOR()": {
    "prefix": "*GASKET THICKNESS BEHAVIOR",
    "body": [
      "*GASKET THICKNESS BEHAVIOR"
    ],
    "description": "GASKET THICKNESS BEHAVIOR without parameter(s).",
    "scope": "source.inp"
  },
  "GASKET THICKNESS BEHAVIOR(DIRECTION, DEPENDENCIES, TENSILE STIFFNESS FACTOR, TYPE, VARIABLE)": {
    "prefix": "*GASKET THICKNESS BEHAVIOR",
    "body": [
      "*GASKET THICKNESS BEHAVIOR, DIRECTION=${1}, DEPENDENCIES=${2}, TENSILE STIFFNESS FACTOR=${3}, TYPE=${4}, VARIABLE=${5}"
    ],
    "description": "GASKET THICKNESS BEHAVIOR with parameter(s) DIRECTION, DEPENDENCIES, TENSILE STIFFNESS FACTOR, TYPE, VARIABLE.",
    "scope": "source.inp"
  },
  "GASKET THICKNESS BEHAVIOR(DIRECTION=LOADING, DEPENDENCIES, TENSILE STIFFNESS FACTOR, TYPE, VARIABLE, SLOPE DROP)": {
    "prefix": "*GASKET THICKNESS BEHAVIOR",
    "body": [
      "*GASKET THICKNESS BEHAVIOR, DIRECTION=LOADING, DEPENDENCIES=${1}, TENSILE STIFFNESS FACTOR=${2}, TYPE=${4}, VARIABLE=${3}, SLOPE DROP=${4}"
    ],
    "description": "GASKET THICKNESS BEHAVIOR with parameter(s) DIRECTION, DEPENDENCIES, TENSILE STIFFNESS FACTOR, TYPE, VARIABLE, SLOPE DROP.",
    "scope": "source.inp"
  },
  "GASKET THICKNESS BEHAVIOR(DIRECTION=LOADING, DEPENDENCIES, TENSILE STIFFNESS FACTOR, TYPE, VARIABLE, YIELD ONSET)": {
    "prefix": "*GASKET THICKNESS BEHAVIOR",
    "body": [
      "*GASKET THICKNESS BEHAVIOR, DIRECTION=LOADING, DEPENDENCIES=${1}, TENSILE STIFFNESS FACTOR=${2}, TYPE=${4}, VARIABLE=${3}, YIELD ONSET=${4}"
    ],
    "description": "GASKET THICKNESS BEHAVIOR with parameter(s) DIRECTION, DEPENDENCIES, TENSILE STIFFNESS FACTOR, TYPE, VARIABLE, YIELD ONSET.",
    "scope": "source.inp"
  },
  "GEL()": {
    "prefix": "*GEL",
    "body": [
      "*GEL"
    ],
    "description": "GEL without parameter(s).",
    "scope": "source.inp"
  },
  "GEOSTATIC()": {
    "prefix": "*GEOSTATIC",
    "body": [
      "*GEOSTATIC"
    ],
    "description": "GEOSTATIC without parameter(s).",
    "scope": "source.inp"
  },
  "GEOSTATIC(HEAT, UTOL)": {
    "prefix": "*GEOSTATIC",
    "body": [
      "*GEOSTATIC, HEAT=${1}, UTOL=${2}"
    ],
    "description": "GEOSTATIC with parameter(s) HEAT, UTOL.",
    "scope": "source.inp"
  },
  "GLOBAL DAMPING()": {
    "prefix": "*GLOBAL DAMPING",
    "body": [
      "*GLOBAL DAMPING"
    ],
    "description": "GLOBAL DAMPING without parameter(s).",
    "scope": "source.inp"
  },
  "GLOBAL DAMPING(FIELD, ALPHA, BETA, STRUCTURAL)": {
    "prefix": "*GLOBAL DAMPING",
    "body": [
      "*GLOBAL DAMPING, FIELD=${1}, ALPHA=${2}, BETA=${3}, STRUCTURAL=${4}"
    ],
    "description": "GLOBAL DAMPING with parameter(s) FIELD, ALPHA, BETA, STRUCTURAL.",
    "scope": "source.inp"
  },
  "HEADING()": {
    "prefix": "*HEADING",
    "body": [
      "*HEADING"
    ],
    "description": "HEADING without parameter(s).",
    "scope": "source.inp"
  },
  "HEAT GENERATION()": {
    "prefix": "*HEAT GENERATION",
    "body": [
      "*HEAT GENERATION"
    ],
    "description": "HEAT GENERATION without parameter(s).",
    "scope": "source.inp"
  },
  "HEAT TRANSFER()": {
    "prefix": "*HEAT TRANSFER",
    "body": [
      "*HEAT TRANSFER"
    ],
    "description": "HEAT TRANSFER without parameter(s).",
    "scope": "source.inp"
  },
  "HEAT TRANSFER(DELTMX, END, STEADY STATE)": {
    "prefix": "*HEAT TRANSFER",
    "body": [
      "*HEAT TRANSFER, DELTMX=${1}, END=${2}, STEADY STATE=${3}"
    ],
    "description": "HEAT TRANSFER with parameter(s) DELTMX, END, STEADY STATE.",
    "scope": "source.inp"
  },
  "HEAT TRANSFER(DELTMX, END, STEADY STATE, MXDEM)": {
    "prefix": "*HEAT TRANSFER",
    "body": [
      "*HEAT TRANSFER, DELTMX=${1}, END=${2}, STEADY STATE=${3}, MXDEM=${4}"
    ],
    "description": "HEAT TRANSFER with parameter(s) DELTMX, END, STEADY STATE, MXDEM.",
    "scope": "source.inp"
  },
  "HEATCAP(DEPENDENCIES, ELSET)": {
    "prefix": "*HEATCAP",
    "body": [
      "*HEATCAP, DEPENDENCIES=${1}, ELSET=${2}"
    ],
    "description": "HEATCAP with parameter(s) DEPENDENCIES, ELSET.",
    "scope": "source.inp"
  },
  "HOURGLASS STIFFNESS()": {
    "prefix": "*HOURGLASS STIFFNESS",
    "body": [
      "*HOURGLASS STIFFNESS"
    ],
    "description": "HOURGLASS STIFFNESS without parameter(s).",
    "scope": "source.inp"
  },
  "HYPERELASTIC()": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC"
    ],
    "description": "HYPERELASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "HYPERELASTIC(ARRUDA-BOYCE, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, ARRUDA-BOYCE=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) ARRUDA-BOYCE, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(MARLOW, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, MARLOW=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) MARLOW, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(MOONEY-RIVLIN, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, MOONEY-RIVLIN=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) MOONEY-RIVLIN, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(NEO HOOKE, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, NEO HOOKE=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) NEO HOOKE, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(OGDEN, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, OGDEN=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) OGDEN, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(POLYNOMIAL, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, POLYNOMIAL=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) POLYNOMIAL, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(REDUCED POLYNOMIAL, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, REDUCED POLYNOMIAL=${1}, BETA=${2}, MODULI=${3}, N=${4}, POISSON=${5}, PROPERTIES=${6}, TEST DATA INPUT=${7}"
    ],
    "description": "HYPERELASTIC with parameter(s) REDUCED POLYNOMIAL, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(TYPE, USER, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, TYPE=${1}, USER=${2}, BETA=${3}, MODULI=${4}, N=${5}, POISSON=${6}, PROPERTIES=${7}, TEST DATA INPUT=${8}"
    ],
    "description": "HYPERELASTIC with parameter(s) TYPE, USER, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(TYPE, VAN DER WAALS, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, TYPE=${1}, VAN DER WAALS=${2}, BETA=${3}, MODULI=${4}, N=${5}, POISSON=${6}, PROPERTIES=${7}, TEST DATA INPUT=${8}"
    ],
    "description": "HYPERELASTIC with parameter(s) TYPE, VAN DER WAALS, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERELASTIC(TYPE, YEOH, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT)": {
    "prefix": "*HYPERELASTIC",
    "body": [
      "*HYPERELASTIC, TYPE=${1}, YEOH=${2}, BETA=${3}, MODULI=${4}, N=${5}, POISSON=${6}, PROPERTIES=${7}, TEST DATA INPUT=${8}"
    ],
    "description": "HYPERELASTIC with parameter(s) TYPE, YEOH, BETA, MODULI, N, POISSON, PROPERTIES, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPERFOAM()": {
    "prefix": "*HYPERFOAM",
    "body": [
      "*HYPERFOAM"
    ],
    "description": "HYPERFOAM without parameter(s).",
    "scope": "source.inp"
  },
  "HYPERFOAM(MODULI, N, POISSON, TEST DATA INPUT)": {
    "prefix": "*HYPERFOAM",
    "body": [
      "*HYPERFOAM, MODULI=${1}, N=${2}, POISSON=${3}, TEST DATA INPUT=${4}"
    ],
    "description": "HYPERFOAM with parameter(s) MODULI, N, POISSON, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "HYPOELASTIC()": {
    "prefix": "*HYPOELASTIC",
    "body": [
      "*HYPOELASTIC"
    ],
    "description": "HYPOELASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "HYPOELASTIC(USER)": {
    "prefix": "*HYPOELASTIC",
    "body": [
      "*HYPOELASTIC, USER=${1}"
    ],
    "description": "HYPOELASTIC with parameter(s) USER.",
    "scope": "source.inp"
  },
  "HYSTERESIS()": {
    "prefix": "*HYSTERESIS",
    "body": [
      "*HYSTERESIS"
    ],
    "description": "HYSTERESIS without parameter(s).",
    "scope": "source.inp"
  },
  "IMPEDANCE PROPERTY(NAME)": {
    "prefix": "*IMPEDANCE PROPERTY",
    "body": [
      "*IMPEDANCE PROPERTY, NAME=${1}"
    ],
    "description": "IMPEDANCE PROPERTY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "IMPEDANCE PROPERTY(NAME, DATA, INPUT)": {
    "prefix": "*IMPEDANCE PROPERTY",
    "body": [
      "*IMPEDANCE PROPERTY, NAME=${1}, DATA=${2}, INPUT=${3}"
    ],
    "description": "IMPEDANCE PROPERTY with parameter(s) NAME, DATA, INPUT.",
    "scope": "source.inp"
  },
  "IMPEDANCE(PROPERTY)": {
    "prefix": "*IMPEDANCE",
    "body": [
      "*IMPEDANCE, PROPERTY=${1}"
    ],
    "description": "IMPEDANCE with parameter(s) PROPERTY.",
    "scope": "source.inp"
  },
  "IMPEDANCE(NONREFLECTING)": {
    "prefix": "*IMPEDANCE",
    "body": [
      "*IMPEDANCE, NONREFLECTING=${1}"
    ],
    "description": "IMPEDANCE with parameter(s) NONREFLECTING.",
    "scope": "source.inp"
  },
  "IMPEDANCE(PROPERTY, OP)": {
    "prefix": "*IMPEDANCE",
    "body": [
      "*IMPEDANCE, PROPERTY=${1}, OP=${2}"
    ],
    "description": "IMPEDANCE with parameter(s) PROPERTY, OP.",
    "scope": "source.inp"
  },
  "IMPEDANCE(NONREFLECTING, OP)": {
    "prefix": "*IMPEDANCE",
    "body": [
      "*IMPEDANCE, NONREFLECTING=${1}, OP=${2}"
    ],
    "description": "IMPEDANCE with parameter(s) NONREFLECTING, OP.",
    "scope": "source.inp"
  },
  "IMPERFECTION()": {
    "prefix": "*IMPERFECTION",
    "body": [
      "*IMPERFECTION"
    ],
    "description": "IMPERFECTION without parameter(s).",
    "scope": "source.inp"
  },
  "IMPERFECTION(STEP, FILE, INC, NSET)": {
    "prefix": "*IMPERFECTION",
    "body": [
      "*IMPERFECTION, STEP=${1}, FILE=${2}, INC=${3}, NSET=${4}"
    ],
    "description": "IMPERFECTION with parameter(s) STEP, FILE, INC, NSET.",
    "scope": "source.inp"
  },
  "IMPERFECTION(INPUT, SYSTEM)": {
    "prefix": "*IMPERFECTION",
    "body": [
      "*IMPERFECTION, INPUT=${1}, SYSTEM=${2}"
    ],
    "description": "IMPERFECTION with parameter(s) INPUT, SYSTEM.",
    "scope": "source.inp"
  },
  "IMPORT CONTROLS(NORMAL TOL)": {
    "prefix": "*IMPORT CONTROLS",
    "body": [
      "*IMPORT CONTROLS, NORMAL TOL=${1}"
    ],
    "description": "IMPORT CONTROLS with parameter(s) NORMAL TOL.",
    "scope": "source.inp"
  },
  "IMPORT ELSET()": {
    "prefix": "*IMPORT ELSET",
    "body": [
      "*IMPORT ELSET"
    ],
    "description": "IMPORT ELSET without parameter(s).",
    "scope": "source.inp"
  },
  "IMPORT NSET()": {
    "prefix": "*IMPORT NSET",
    "body": [
      "*IMPORT NSET"
    ],
    "description": "IMPORT NSET without parameter(s).",
    "scope": "source.inp"
  },
  "IMPORT(UPDATE)": {
    "prefix": "*IMPORT",
    "body": [
      "*IMPORT, UPDATE=${1}"
    ],
    "description": "IMPORT with parameter(s) UPDATE.",
    "scope": "source.inp"
  },
  "IMPORT(UPDATE, STATE, STEP)": {
    "prefix": "*IMPORT",
    "body": [
      "*IMPORT, UPDATE=${1}, STATE=${2}, STEP=${3}"
    ],
    "description": "IMPORT with parameter(s) UPDATE, STATE, STEP.",
    "scope": "source.inp"
  },
  "IMPORT(UPDATE, INCREMENT, STATE, STEP)": {
    "prefix": "*IMPORT",
    "body": [
      "*IMPORT, UPDATE=${1}, INCREMENT=${2}, STATE=${3}, STEP=${4}"
    ],
    "description": "IMPORT with parameter(s) UPDATE, INCREMENT, STATE, STEP.",
    "scope": "source.inp"
  },
  "IMPORT(UPDATE, INTERVAL, STATE, STEP)": {
    "prefix": "*IMPORT",
    "body": [
      "*IMPORT, UPDATE=${1}, INTERVAL=${2}, STATE=${3}, STEP=${4}"
    ],
    "description": "IMPORT with parameter(s) UPDATE, INTERVAL, STATE, STEP.",
    "scope": "source.inp"
  },
  "IMPORT(UPDATE, ITERATION, STATE, STEP)": {
    "prefix": "*IMPORT",
    "body": [
      "*IMPORT, UPDATE=${1}, ITERATION=${2}, STATE=${3}, STEP=${4}"
    ],
    "description": "IMPORT with parameter(s) UPDATE, ITERATION, STATE, STEP.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE FLUID PROPERTY()": {
    "prefix": "*INCIDENT WAVE FLUID PROPERTY",
    "body": [
      "*INCIDENT WAVE FLUID PROPERTY"
    ],
    "description": "INCIDENT WAVE FLUID PROPERTY without parameter(s).",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION PROPERTY(NAME)": {
    "prefix": "*INCIDENT WAVE INTERACTION PROPERTY",
    "body": [
      "*INCIDENT WAVE INTERACTION PROPERTY, NAME=${1}"
    ],
    "description": "INCIDENT WAVE INTERACTION PROPERTY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION PROPERTY(NAME, TYPE)": {
    "prefix": "*INCIDENT WAVE INTERACTION PROPERTY",
    "body": [
      "*INCIDENT WAVE INTERACTION PROPERTY, NAME=${1}, TYPE=${2}"
    ],
    "description": "INCIDENT WAVE INTERACTION PROPERTY with parameter(s) NAME, TYPE.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, UNDEX)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, UNDEX=${2}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, UNDEX.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, PRESSURE AMPLITUDE)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, PRESSURE AMPLITUDE=${2}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, PRESSURE AMPLITUDE.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, CONWEP)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, CONWEP=${2}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, CONWEP.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, ACCELERATION AMPLITUDE)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, ACCELERATION AMPLITUDE=${2}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, ACCELERATION AMPLITUDE.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, UNDEX, IMAGINARY, REAL)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, UNDEX=${2}, IMAGINARY=${3}, REAL=${4}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, UNDEX, IMAGINARY, REAL.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, PRESSURE AMPLITUDE, IMAGINARY, REAL)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, PRESSURE AMPLITUDE=${2}, IMAGINARY=${3}, REAL=${4}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, PRESSURE AMPLITUDE, IMAGINARY, REAL.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, CONWEP, IMAGINARY, REAL)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, CONWEP=${2}, IMAGINARY=${3}, REAL=${4}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, CONWEP, IMAGINARY, REAL.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE INTERACTION(PROPERTY, ACCELERATION AMPLITUDE, IMAGINARY, REAL)": {
    "prefix": "*INCIDENT WAVE INTERACTION",
    "body": [
      "*INCIDENT WAVE INTERACTION, PROPERTY=${1}, ACCELERATION AMPLITUDE=${2}, IMAGINARY=${3}, REAL=${4}"
    ],
    "description": "INCIDENT WAVE INTERACTION with parameter(s) PROPERTY, ACCELERATION AMPLITUDE, IMAGINARY, REAL.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE PROPERTY(NAME)": {
    "prefix": "*INCIDENT WAVE PROPERTY",
    "body": [
      "*INCIDENT WAVE PROPERTY, NAME=${1}"
    ],
    "description": "INCIDENT WAVE PROPERTY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE PROPERTY(NAME, TYPE)": {
    "prefix": "*INCIDENT WAVE PROPERTY",
    "body": [
      "*INCIDENT WAVE PROPERTY, NAME=${1}, TYPE=${2}"
    ],
    "description": "INCIDENT WAVE PROPERTY with parameter(s) NAME, TYPE.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE REFLECTION()": {
    "prefix": "*INCIDENT WAVE REFLECTION",
    "body": [
      "*INCIDENT WAVE REFLECTION"
    ],
    "description": "INCIDENT WAVE REFLECTION without parameter(s).",
    "scope": "source.inp"
  },
  "INCIDENT WAVE(PROPERTY, ACCELERATION AMPLITUDE)": {
    "prefix": "*INCIDENT WAVE",
    "body": [
      "*INCIDENT WAVE, PROPERTY=${1}, ACCELERATION AMPLITUDE=${2}"
    ],
    "description": "INCIDENT WAVE with parameter(s) PROPERTY, ACCELERATION AMPLITUDE.",
    "scope": "source.inp"
  },
  "INCIDENT WAVE(PROPERTY, PRESSURE AMPLITUDE)": {
    "prefix": "*INCIDENT WAVE",
    "body": [
      "*INCIDENT WAVE, PROPERTY=${1}, PRESSURE AMPLITUDE=${2}"
    ],
    "description": "INCIDENT WAVE with parameter(s) PROPERTY, PRESSURE AMPLITUDE.",
    "scope": "source.inp"
  },
  "INCLUDE(INPUT)": {
    "prefix": "*INCLUDE",
    "body": [
      "*INCLUDE, INPUT=${1}"
    ],
    "description": "INCLUDE with parameter(s) INPUT.",
    "scope": "source.inp"
  },
  "INCLUDE(INPUT, PASSWORD)": {
    "prefix": "*INCLUDE",
    "body": [
      "*INCLUDE, INPUT=${1}, PASSWORD=${2}"
    ],
    "description": "INCLUDE with parameter(s) INPUT, PASSWORD.",
    "scope": "source.inp"
  },
  "INCREMENTATION OUTPUT()": {
    "prefix": "*INCREMENTATION OUTPUT",
    "body": [
      "*INCREMENTATION OUTPUT"
    ],
    "description": "INCREMENTATION OUTPUT without parameter(s).",
    "scope": "source.inp"
  },
  "INCREMENTATION OUTPUT(VARIABLE)": {
    "prefix": "*INCREMENTATION OUTPUT",
    "body": [
      "*INCREMENTATION OUTPUT, VARIABLE=${1}"
    ],
    "description": "INCREMENTATION OUTPUT with parameter(s) VARIABLE.",
    "scope": "source.inp"
  },
  "INELASTIC HEAT FRACTION()": {
    "prefix": "*INELASTIC HEAT FRACTION",
    "body": [
      "*INELASTIC HEAT FRACTION"
    ],
    "description": "INELASTIC HEAT FRACTION without parameter(s).",
    "scope": "source.inp"
  },
  "INERTIA RELIEF()": {
    "prefix": "*INERTIA RELIEF",
    "body": [
      "*INERTIA RELIEF"
    ],
    "description": "INERTIA RELIEF without parameter(s).",
    "scope": "source.inp"
  },
  "INERTIA RELIEF(ORIENTATION, FIXED)": {
    "prefix": "*INERTIA RELIEF",
    "body": [
      "*INERTIA RELIEF, ORIENTATION=${1}, FIXED=${2}"
    ],
    "description": "INERTIA RELIEF with parameter(s) ORIENTATION, FIXED.",
    "scope": "source.inp"
  },
  "INERTIA RELIEF(ORIENTATION, REMOVE)": {
    "prefix": "*INERTIA RELIEF",
    "body": [
      "*INERTIA RELIEF, ORIENTATION=${1}, REMOVE=${2}"
    ],
    "description": "INERTIA RELIEF with parameter(s) ORIENTATION, REMOVE.",
    "scope": "source.inp"
  },
  "INITIAL CONDITIONS(TYPE)": {
    "prefix": "*INITIAL CONDITIONS",
    "body": [
      "*INITIAL CONDITIONS, TYPE=${1}"
    ],
    "description": "INITIAL CONDITIONS with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "INITIAL CONDITIONS(ELEMENT AVERAGE, TYPE)": {
    "prefix": "*INITIAL CONDITIONS",
    "body": [
      "*INITIAL CONDITIONS, ELEMENT AVERAGE=${1}, TYPE=${2}"
    ],
    "description": "INITIAL CONDITIONS with parameter(s) ELEMENT AVERAGE, TYPE.",
    "scope": "source.inp"
  },
  "INITIAL CONDITIONS(TYPE, ABSOLUTE EXTERIOR TOLERANCE, DEFINITION, DRIVING ELSETS, EXTERIOR TOLERANCE, FILE, FULL TENSOR, GEOSTATIC, INC, INPUT, INTERPOLATE, MIDSIDE, NORMAL, NUMBER BACKSTRESSES, OUTPUT VARIABLE, REBAR, SECTION POINTS, STEP, UNBALANCED STRESS, USER, VARIABLE)": {
    "prefix": "*INITIAL CONDITIONS",
    "body": [
      "*INITIAL CONDITIONS, TYPE=${1}, ABSOLUTE EXTERIOR TOLERANCE=${2}, DEFINITION=${3}, DRIVING ELSETS=${4}, EXTERIOR TOLERANCE=${5}, FILE=${6}, FULL TENSOR=${7}, GEOSTATIC=${8}, INC=${9}, INPUT=${10}, INTERPOLATE=${11}, MIDSIDE=${12}, NORMAL=${13}, NUMBER BACKSTRESSES=${14}, OUTPUT VARIABLE=${15}, REBAR=${16}, SECTION POINTS=${17}, STEP=${18}, UNBALANCED STRESS=${19}, USER=${20}, VARIABLE=${21}"
    ],
    "description": "INITIAL CONDITIONS with parameter(s) TYPE, ABSOLUTE EXTERIOR TOLERANCE, DEFINITION, DRIVING ELSETS, EXTERIOR TOLERANCE, FILE, FULL TENSOR, GEOSTATIC, INC, INPUT, INTERPOLATE, MIDSIDE, NORMAL, NUMBER BACKSTRESSES, OUTPUT VARIABLE, REBAR, SECTION POINTS, STEP, UNBALANCED STRESS, USER, VARIABLE.",
    "scope": "source.inp"
  },
  "INSTANCE(NAME, PART)": {
    "prefix": "*INSTANCE",
    "body": [
      "*INSTANCE, NAME=${1}, PART=${2}"
    ],
    "description": "INSTANCE with parameter(s) NAME, PART.",
    "scope": "source.inp"
  },
  "INSTANCE(INSTANCE)": {
    "prefix": "*INSTANCE",
    "body": [
      "*INSTANCE, INSTANCE,=${1}"
    ],
    "description": "INSTANCE with parameter(s) INSTANCE.",
    "scope": "source.inp"
  },
  "INSTANCE(NAME, PART, LIBRARY)": {
    "prefix": "*INSTANCE",
    "body": [
      "*INSTANCE, NAME=${1}, PART=${2}, LIBRARY=${3}"
    ],
    "description": "INSTANCE with parameter(s) NAME, PART, LIBRARY.",
    "scope": "source.inp"
  },
  "INSTANCE(INSTANCE, LIBRARY)": {
    "prefix": "*INSTANCE",
    "body": [
      "*INSTANCE, INSTANCE,=${1}, LIBRARY=${2}"
    ],
    "description": "INSTANCE with parameter(s) INSTANCE, LIBRARY.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT SECTION(NAME, SURFACE)": {
    "prefix": "*INTEGRATED OUTPUT SECTION",
    "body": [
      "*INTEGRATED OUTPUT SECTION, NAME=${1}, SURFACE=${2}"
    ],
    "description": "INTEGRATED OUTPUT SECTION with parameter(s) NAME, SURFACE.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT SECTION(NAME, SURFACE, ORIENTATION, POSITION, PROJECT ORIENTATION, REF NODE, REF NODE MOTION)": {
    "prefix": "*INTEGRATED OUTPUT SECTION",
    "body": [
      "*INTEGRATED OUTPUT SECTION, NAME=${1}, SURFACE=${2}, ORIENTATION=${3}, POSITION=${4}, PROJECT ORIENTATION=${5}, REF NODE=${6}, REF NODE MOTION=${7}"
    ],
    "description": "INTEGRATED OUTPUT SECTION with parameter(s) NAME, SURFACE, ORIENTATION, POSITION, PROJECT ORIENTATION, REF NODE, REF NODE MOTION.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT(SECTION)": {
    "prefix": "*INTEGRATED OUTPUT",
    "body": [
      "*INTEGRATED OUTPUT, SECTION=${1}"
    ],
    "description": "INTEGRATED OUTPUT with parameter(s) SECTION.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT(ELSET)": {
    "prefix": "*INTEGRATED OUTPUT",
    "body": [
      "*INTEGRATED OUTPUT, ELSET=${1}"
    ],
    "description": "INTEGRATED OUTPUT with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT(SURFACE)": {
    "prefix": "*INTEGRATED OUTPUT",
    "body": [
      "*INTEGRATED OUTPUT, SURFACE=${1}"
    ],
    "description": "INTEGRATED OUTPUT with parameter(s) SURFACE.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT(SECTION, VARIABLE)": {
    "prefix": "*INTEGRATED OUTPUT",
    "body": [
      "*INTEGRATED OUTPUT, SECTION=${1}, VARIABLE=${2}"
    ],
    "description": "INTEGRATED OUTPUT with parameter(s) SECTION, VARIABLE.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT(ELSET, VARIABLE)": {
    "prefix": "*INTEGRATED OUTPUT",
    "body": [
      "*INTEGRATED OUTPUT, ELSET=${1}, VARIABLE=${2}"
    ],
    "description": "INTEGRATED OUTPUT with parameter(s) ELSET, VARIABLE.",
    "scope": "source.inp"
  },
  "INTEGRATED OUTPUT(SURFACE, VARIABLE)": {
    "prefix": "*INTEGRATED OUTPUT",
    "body": [
      "*INTEGRATED OUTPUT, SURFACE=${1}, VARIABLE=${2}"
    ],
    "description": "INTEGRATED OUTPUT with parameter(s) SURFACE, VARIABLE.",
    "scope": "source.inp"
  },
  "INTERFACE(ELSET)": {
    "prefix": "*INTERFACE",
    "body": [
      "*INTERFACE, ELSET=${1}"
    ],
    "description": "INTERFACE with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "INTERFACE(ELSET, NAME)": {
    "prefix": "*INTERFACE",
    "body": [
      "*INTERFACE, ELSET=${1}, NAME=${2}"
    ],
    "description": "INTERFACE with parameter(s) ELSET, NAME.",
    "scope": "source.inp"
  },
  "ITS(ELSET)": {
    "prefix": "*ITS",
    "body": [
      "*ITS, ELSET=${1}"
    ],
    "description": "ITS with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "JOINT ELASTICITY(MODULI, NDIM)": {
    "prefix": "*JOINT ELASTICITY",
    "body": [
      "*JOINT ELASTICITY, MODULI=${1}, NDIM=${2}"
    ],
    "description": "JOINT ELASTICITY with parameter(s) MODULI, NDIM.",
    "scope": "source.inp"
  },
  "JOINT ELASTICITY(MODULI, NDIM, DEPENDENCIES)": {
    "prefix": "*JOINT ELASTICITY",
    "body": [
      "*JOINT ELASTICITY, MODULI=${1}, NDIM=${2}, DEPENDENCIES=${3}"
    ],
    "description": "JOINT ELASTICITY with parameter(s) MODULI, NDIM, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "JOINT PLASTICITY(TYPE)": {
    "prefix": "*JOINT PLASTICITY",
    "body": [
      "*JOINT PLASTICITY, TYPE=${1}"
    ],
    "description": "JOINT PLASTICITY with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "JOINT PLASTICITY(TYPE, DEPENDENCIES)": {
    "prefix": "*JOINT PLASTICITY",
    "body": [
      "*JOINT PLASTICITY, TYPE=${1}, DEPENDENCIES=${2}"
    ],
    "description": "JOINT PLASTICITY with parameter(s) TYPE, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "JOINT(ELSET)": {
    "prefix": "*JOINT",
    "body": [
      "*JOINT, ELSET=${1}"
    ],
    "description": "JOINT with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "JOINT(ELSET, ORIENTATION)": {
    "prefix": "*JOINT",
    "body": [
      "*JOINT, ELSET=${1}, ORIENTATION=${2}"
    ],
    "description": "JOINT with parameter(s) ELSET, ORIENTATION.",
    "scope": "source.inp"
  },
  "JOINTED MATERIAL()": {
    "prefix": "*JOINTED MATERIAL",
    "body": [
      "*JOINTED MATERIAL"
    ],
    "description": "JOINTED MATERIAL without parameter(s).",
    "scope": "source.inp"
  },
  "JOINTED MATERIAL(DEPENDENCIES, JOINT DIRECTION, NO SEPARATION, SHEAR RETENTION)": {
    "prefix": "*JOINTED MATERIAL",
    "body": [
      "*JOINTED MATERIAL, DEPENDENCIES=${1}, JOINT DIRECTION=${2}, NO SEPARATION=${3}, SHEAR RETENTION=${4}"
    ],
    "description": "JOINTED MATERIAL with parameter(s) DEPENDENCIES, JOINT DIRECTION, NO SEPARATION, SHEAR RETENTION.",
    "scope": "source.inp"
  },
  "JOULE HEAT FRACTION()": {
    "prefix": "*JOULE HEAT FRACTION",
    "body": [
      "*JOULE HEAT FRACTION"
    ],
    "description": "JOULE HEAT FRACTION without parameter(s).",
    "scope": "source.inp"
  },
  "KAPPA()": {
    "prefix": "*KAPPA",
    "body": [
      "*KAPPA"
    ],
    "description": "KAPPA without parameter(s).",
    "scope": "source.inp"
  },
  "KAPPA(DEPENDENCIES, TYPE)": {
    "prefix": "*KAPPA",
    "body": [
      "*KAPPA, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "KAPPA with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "KINEMATIC COUPLING(REF NODE)": {
    "prefix": "*KINEMATIC COUPLING",
    "body": [
      "*KINEMATIC COUPLING, REF NODE=${1}"
    ],
    "description": "KINEMATIC COUPLING with parameter(s) REF NODE.",
    "scope": "source.inp"
  },
  "KINEMATIC COUPLING(REF NODE, ORIENTATION)": {
    "prefix": "*KINEMATIC COUPLING",
    "body": [
      "*KINEMATIC COUPLING, REF NODE=${1}, ORIENTATION=${2}"
    ],
    "description": "KINEMATIC COUPLING with parameter(s) REF NODE, ORIENTATION.",
    "scope": "source.inp"
  },
  "KINEMATIC()": {
    "prefix": "*KINEMATIC",
    "body": [
      "*KINEMATIC"
    ],
    "description": "KINEMATIC without parameter(s).",
    "scope": "source.inp"
  },
  "LATENT HEAT()": {
    "prefix": "*LATENT HEAT",
    "body": [
      "*LATENT HEAT"
    ],
    "description": "LATENT HEAT without parameter(s).",
    "scope": "source.inp"
  },
  "LATENT HEAT(PORE FLUID)": {
    "prefix": "*LATENT HEAT",
    "body": [
      "*LATENT HEAT, PORE FLUID=${1}"
    ],
    "description": "LATENT HEAT with parameter(s) PORE FLUID.",
    "scope": "source.inp"
  },
  "LOAD CASE(NAME)": {
    "prefix": "*LOAD CASE",
    "body": [
      "*LOAD CASE, NAME=${1}"
    ],
    "description": "LOAD CASE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "LOADING DATA()": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA"
    ],
    "description": "LOADING DATA without parameter(s).",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=${1}, DEPENDENCIES=${2}, DIRECTION=${3}, EXTRAPOLATION=${4}, REGULARIZE=${5}, RTOL=${6}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=${1}, DEPENDENCIES=${2}, DIRECTION=${3}, EXTRAPOLATION=${4}, INDEPENDENT COMPONENTS=${5}, REGULARIZE=${6}, RTOL=${7}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=ELASTIC, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, RATE DEPENDENT, RATE INTERPOLATION)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=ELASTIC, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, REGULARIZE=${4}, RTOL=${5}, RATE DEPENDENT=${6}, RATE INTERPOLATION=${7}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=ELASTIC, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, RATE DEPENDENT, RATE INTERPOLATION.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=ELASTIC, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, RATE DEPENDENT, RATE INTERPOLATION)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=ELASTIC, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, INDEPENDENT COMPONENTS=${4}, REGULARIZE=${5}, RTOL=${6}, RATE DEPENDENT=${7}, RATE INTERPOLATION=${8}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=ELASTIC, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, RATE DEPENDENT, RATE INTERPOLATION.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=DAMAGE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, DAMAGE ONSET)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=DAMAGE, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, REGULARIZE=${4}, RTOL=${5}, DAMAGE ONSET=${6}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=DAMAGE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, DAMAGE ONSET.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=DAMAGE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, DAMAGE ONSET)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=DAMAGE, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, INDEPENDENT COMPONENTS=${4}, REGULARIZE=${5}, RTOL=${6}, DAMAGE ONSET=${7}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=DAMAGE, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, DAMAGE ONSET.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, SLOPE DROP)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=PERMANENT DEFORMATION, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, REGULARIZE=${4}, RTOL=${5}, SLOPE DROP=${6}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, SLOPE DROP.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, SLOPE DROP)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=PERMANENT DEFORMATION, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, INDEPENDENT COMPONENTS=${4}, REGULARIZE=${5}, RTOL=${6}, SLOPE DROP=${7}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, SLOPE DROP.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, YIELD ONSET)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=PERMANENT DEFORMATION, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, REGULARIZE=${4}, RTOL=${5}, YIELD ONSET=${6}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, REGULARIZE, RTOL, YIELD ONSET.",
    "scope": "source.inp"
  },
  "LOADING DATA(TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, YIELD ONSET)": {
    "prefix": "*LOADING DATA",
    "body": [
      "*LOADING DATA, TYPE=PERMANENT DEFORMATION, DEPENDENCIES=${1}, DIRECTION=${2}, EXTRAPOLATION=${3}, INDEPENDENT COMPONENTS=${4}, REGULARIZE=${5}, RTOL=${6}, YIELD ONSET=${7}"
    ],
    "description": "LOADING DATA with parameter(s) TYPE=PERMANENT DEFORMATION, DEPENDENCIES, DIRECTION, EXTRAPOLATION, INDEPENDENT COMPONENTS, REGULARIZE, RTOL, YIELD ONSET.",
    "scope": "source.inp"
  },
  "LOW DENSITY FOAM()": {
    "prefix": "*LOW DENSITY FOAM",
    "body": [
      "*LOW DENSITY FOAM"
    ],
    "description": "LOW DENSITY FOAM without parameter(s).",
    "scope": "source.inp"
  },
  "LOW DENSITY FOAM(LATERAL STRAIN DATA, STRAIN RATE, RATE EXTRAPOLATION, TENSION CUTOFF, FAIL)": {
    "prefix": "*LOW DENSITY FOAM",
    "body": [
      "*LOW DENSITY FOAM, LATERAL STRAIN DATA=${1}, STRAIN RATE=${2}, RATE EXTRAPOLATION=${3}, TENSION CUTOFF=${4}, FAIL=${5}"
    ],
    "description": "LOW DENSITY FOAM with parameter(s) LATERAL STRAIN DATA, STRAIN RATE, RATE EXTRAPOLATION, TENSION CUTOFF, FAIL.",
    "scope": "source.inp"
  },
  "M1()": {
    "prefix": "*M1",
    "body": [
      "*M1"
    ],
    "description": "M1 without parameter(s).",
    "scope": "source.inp"
  },
  "M1(DEPENDENCIES, ELASTIC, LINEAR)": {
    "prefix": "*M1",
    "body": [
      "*M1, DEPENDENCIES=${1}, ELASTIC=${2}, LINEAR=${3}"
    ],
    "description": "M1 with parameter(s) DEPENDENCIES, ELASTIC, LINEAR.",
    "scope": "source.inp"
  },
  "M2()": {
    "prefix": "*M2",
    "body": [
      "*M2"
    ],
    "description": "M2 without parameter(s).",
    "scope": "source.inp"
  },
  "M2(DEPENDENCIES, ELASTIC, LINEAR)": {
    "prefix": "*M2",
    "body": [
      "*M2, DEPENDENCIES=${1}, ELASTIC=${2}, LINEAR=${3}"
    ],
    "description": "M2 with parameter(s) DEPENDENCIES, ELASTIC, LINEAR.",
    "scope": "source.inp"
  },
  "MAGNETIC PERMEABILITY()": {
    "prefix": "*MAGNETIC PERMEABILITY",
    "body": [
      "*MAGNETIC PERMEABILITY"
    ],
    "description": "MAGNETIC PERMEABILITY without parameter(s).",
    "scope": "source.inp"
  },
  "MAGNETIC PERMEABILITY(DEPENDENCIES, FREQUENCY, NONLINEAR, TYPE)": {
    "prefix": "*MAGNETIC PERMEABILITY",
    "body": [
      "*MAGNETIC PERMEABILITY, DEPENDENCIES=${1}, FREQUENCY=${2}, NONLINEAR=${3}, TYPE=${4}"
    ],
    "description": "MAGNETIC PERMEABILITY with parameter(s) DEPENDENCIES, FREQUENCY, NONLINEAR, TYPE.",
    "scope": "source.inp"
  },
  "MAGNETOSTATIC()": {
    "prefix": "*MAGNETOSTATIC",
    "body": [
      "*MAGNETOSTATIC"
    ],
    "description": "MAGNETOSTATIC without parameter(s).",
    "scope": "source.inp"
  },
  "MAGNETOSTATIC(DIRECT, STABILIZATION)": {
    "prefix": "*MAGNETOSTATIC",
    "body": [
      "*MAGNETOSTATIC, DIRECT=${1}, STABILIZATION=${2}"
    ],
    "description": "MAGNETOSTATIC with parameter(s) DIRECT, STABILIZATION.",
    "scope": "source.inp"
  },
  "MAP SOLUTION()": {
    "prefix": "*MAP SOLUTION",
    "body": [
      "*MAP SOLUTION"
    ],
    "description": "MAP SOLUTION without parameter(s).",
    "scope": "source.inp"
  },
  "MAP SOLUTION(INC, STEP, UNBALANCED STRESS)": {
    "prefix": "*MAP SOLUTION",
    "body": [
      "*MAP SOLUTION, INC=${1}, STEP=${2}, UNBALANCED STRESS=${3}"
    ],
    "description": "MAP SOLUTION with parameter(s) INC, STEP, UNBALANCED STRESS.",
    "scope": "source.inp"
  },
  "MASS ADJUST()": {
    "prefix": "*MASS ADJUST",
    "body": [
      "*MASS ADJUST"
    ],
    "description": "MASS ADJUST without parameter(s).",
    "scope": "source.inp"
  },
  "MASS ADJUST(TARGET DT)": {
    "prefix": "*MASS ADJUST",
    "body": [
      "*MASS ADJUST, TARGET DT=${1}"
    ],
    "description": "MASS ADJUST with parameter(s) TARGET DT.",
    "scope": "source.inp"
  },
  "MASS DIFFUSION()": {
    "prefix": "*MASS DIFFUSION",
    "body": [
      "*MASS DIFFUSION"
    ],
    "description": "MASS DIFFUSION without parameter(s).",
    "scope": "source.inp"
  },
  "MASS DIFFUSION(DCMAX, END, STEADY STATE)": {
    "prefix": "*MASS DIFFUSION",
    "body": [
      "*MASS DIFFUSION, DCMAX=${1}, END=${2}, STEADY STATE=${3}"
    ],
    "description": "MASS DIFFUSION with parameter(s) DCMAX, END, STEADY STATE.",
    "scope": "source.inp"
  },
  "MASS FLOW RATE()": {
    "prefix": "*MASS FLOW RATE",
    "body": [
      "*MASS FLOW RATE"
    ],
    "description": "MASS FLOW RATE without parameter(s).",
    "scope": "source.inp"
  },
  "MASS FLOW RATE(AMPLITUDE, INPUT, OP, USER)": {
    "prefix": "*MASS FLOW RATE",
    "body": [
      "*MASS FLOW RATE, AMPLITUDE=${1}, INPUT=${2}, OP=${3}, USER=${4}"
    ],
    "description": "MASS FLOW RATE with parameter(s) AMPLITUDE, INPUT, OP, USER.",
    "scope": "source.inp"
  },
  "MASS(ELSET)": {
    "prefix": "*MASS",
    "body": [
      "*MASS, ELSET=${1}"
    ],
    "description": "MASS with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "MASS(ELSET, ALPHA, COMPOSITE, ORIENTATION, TYPE)": {
    "prefix": "*MASS",
    "body": [
      "*MASS, ELSET=${1}, ALPHA=${2}, COMPOSITE=${3}, ORIENTATION=${4}, TYPE=${5}"
    ],
    "description": "MASS with parameter(s) ELSET, ALPHA, COMPOSITE, ORIENTATION, TYPE.",
    "scope": "source.inp"
  },
  "MATERIAL(NAME)": {
    "prefix": "*MATERIAL",
    "body": [
      "*MATERIAL, NAME=${1}"
    ],
    "description": "MATERIAL with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "MATERIAL(NAME, RTOL, SRATE FACTOR, STRAIN RATE REGULARIZATION)": {
    "prefix": "*MATERIAL",
    "body": [
      "*MATERIAL, NAME=${1}, RTOL=${2}, SRATE FACTOR=${3}, STRAIN RATE REGULARIZATION=${4}"
    ],
    "description": "MATERIAL with parameter(s) NAME, RTOL, SRATE FACTOR, STRAIN RATE REGULARIZATION.",
    "scope": "source.inp"
  },
  "MATRIX ASSEMBLE()": {
    "prefix": "*MATRIX ASSEMBLE",
    "body": [
      "*MATRIX ASSEMBLE"
    ],
    "description": "MATRIX ASSEMBLE without parameter(s).",
    "scope": "source.inp"
  },
  "MATRIX ASSEMBLE(MASS, STIFFNESS, STRUCTURAL DAMPING, VISCOUS DAMPING)": {
    "prefix": "*MATRIX ASSEMBLE",
    "body": [
      "*MATRIX ASSEMBLE, MASS=${1}, STIFFNESS=${2}, STRUCTURAL DAMPING=${3}, VISCOUS DAMPING=${4}"
    ],
    "description": "MATRIX ASSEMBLE with parameter(s) MASS, STIFFNESS, STRUCTURAL DAMPING, VISCOUS DAMPING.",
    "scope": "source.inp"
  },
  "MATRIX ASSEMBLE(MASS, STIFFNESS, STRUCTURAL DAMPING, VISCOUS DAMPING, NSET)": {
    "prefix": "*MATRIX ASSEMBLE",
    "body": [
      "*MATRIX ASSEMBLE, MASS=${1}, STIFFNESS=${2}, STRUCTURAL DAMPING=${3}, VISCOUS DAMPING=${4}, NSET=${5}"
    ],
    "description": "MATRIX ASSEMBLE with parameter(s) MASS, STIFFNESS, STRUCTURAL DAMPING, VISCOUS DAMPING, NSET.",
    "scope": "source.inp"
  },
  "MATRIX GENERATE(STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD)": {
    "prefix": "*MATRIX GENERATE",
    "body": [
      "*MATRIX GENERATE, STIFFNESS=${1}, MASS=${2}, VISCOUS DAMPING=${3}, STRUCTURAL DAMPING=${4}, LOAD=${5}"
    ],
    "description": "MATRIX GENERATE with parameter(s) STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD.",
    "scope": "source.inp"
  },
  "MATRIX GENERATE(STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD, SOLID INFINITE FORMULATION)": {
    "prefix": "*MATRIX GENERATE",
    "body": [
      "*MATRIX GENERATE, STIFFNESS=${1}, MASS=${2}, VISCOUS DAMPING=${3}, STRUCTURAL DAMPING=${4}, LOAD=${5}, SOLID INFINITE FORMULATION=${6}"
    ],
    "description": "MATRIX GENERATE with parameter(s) STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD, SOLID INFINITE FORMULATION.",
    "scope": "source.inp"
  },
  "MATRIX GENERATE(STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD, ELEMENT BY ELEMENT, ELSET, PROPERTY EVALUATION, PUBLIC NODES)": {
    "prefix": "*MATRIX GENERATE",
    "body": [
      "*MATRIX GENERATE, STIFFNESS=${1}, MASS=${2}, VISCOUS DAMPING=${3}, STRUCTURAL DAMPING=${4}, LOAD=${5}, ELEMENT BY ELEMENT=${6}, ELSET=${7}, PROPERTY EVALUATION=${8}, PUBLIC NODES=${9}"
    ],
    "description": "MATRIX GENERATE with parameter(s) STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD, ELEMENT BY ELEMENT, ELSET, PROPERTY EVALUATION, PUBLIC NODES.",
    "scope": "source.inp"
  },
  "MATRIX GENERATE(STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD, SOLID INFINITE FORMULATION, ELEMENT BY ELEMENT, ELSET, PROPERTY EVALUATION, PUBLIC NODES)": {
    "prefix": "*MATRIX GENERATE",
    "body": [
      "*MATRIX GENERATE, STIFFNESS=${1}, MASS=${2}, VISCOUS DAMPING=${3}, STRUCTURAL DAMPING=${4}, LOAD=${5}, SOLID INFINITE FORMULATION=${6}, ELEMENT BY ELEMENT=${7}, ELSET=${8}, PROPERTY EVALUATION=${9}, PUBLIC NODES=${10}"
    ],
    "description": "MATRIX GENERATE with parameter(s) STIFFNESS, MASS, VISCOUS DAMPING, STRUCTURAL DAMPING, LOAD, SOLID INFINITE FORMULATION, ELEMENT BY ELEMENT, ELSET, PROPERTY EVALUATION, PUBLIC NODES.",
    "scope": "source.inp"
  },
  "MATRIX INPUT(NAME)": {
    "prefix": "*MATRIX INPUT",
    "body": [
      "*MATRIX INPUT, NAME=${1}"
    ],
    "description": "MATRIX INPUT with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "MATRIX INPUT(NAME, INPUT, MATRIX, SCALE FACTOR, TYPE)": {
    "prefix": "*MATRIX INPUT",
    "body": [
      "*MATRIX INPUT, NAME=${1}, INPUT=${2}, MATRIX=${3}, SCALE FACTOR=${4}, TYPE=${5}"
    ],
    "description": "MATRIX INPUT with parameter(s) NAME, INPUT, MATRIX, SCALE FACTOR, TYPE.",
    "scope": "source.inp"
  },
  "MATRIX(TYPE)": {
    "prefix": "*MATRIX",
    "body": [
      "*MATRIX, TYPE=${1}"
    ],
    "description": "MATRIX with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "MATRIX(TYPE, INPUT)": {
    "prefix": "*MATRIX",
    "body": [
      "*MATRIX, TYPE=${1}, INPUT=${2}"
    ],
    "description": "MATRIX with parameter(s) TYPE, INPUT.",
    "scope": "source.inp"
  },
  "MEDIA TRANSPORT()": {
    "prefix": "*MEDIA TRANSPORT",
    "body": [
      "*MEDIA TRANSPORT"
    ],
    "description": "MEDIA TRANSPORT without parameter(s).",
    "scope": "source.inp"
  },
  "MEMBRANE SECTION(ELSET, MATERIAL)": {
    "prefix": "*MEMBRANE SECTION",
    "body": [
      "*MEMBRANE SECTION, ELSET=${1}, MATERIAL=${2}"
    ],
    "description": "MEMBRANE SECTION with parameter(s) ELSET, MATERIAL.",
    "scope": "source.inp"
  },
  "MEMBRANE SECTION(ELSET, MATERIAL, CONTROLS, DENSITY, MEMBRANE THICKNESS, NODAL THICKNESS, ORIENTATION, POISSON)": {
    "prefix": "*MEMBRANE SECTION",
    "body": [
      "*MEMBRANE SECTION, ELSET=${1}, MATERIAL=${2}, CONTROLS=${3}, DENSITY=${4}, MEMBRANE THICKNESS=${5}, NODAL THICKNESS=${6}, ORIENTATION=${7}, POISSON=${8}"
    ],
    "description": "MEMBRANE SECTION with parameter(s) ELSET, MATERIAL, CONTROLS, DENSITY, MEMBRANE THICKNESS, NODAL THICKNESS, ORIENTATION, POISSON.",
    "scope": "source.inp"
  },
  "MODAL DAMPING()": {
    "prefix": "*MODAL DAMPING",
    "body": [
      "*MODAL DAMPING"
    ],
    "description": "MODAL DAMPING without parameter(s).",
    "scope": "source.inp"
  },
  "MODAL DAMPING(DEFINITION, FIELD)": {
    "prefix": "*MODAL DAMPING",
    "body": [
      "*MODAL DAMPING, DEFINITION=${1}, FIELD=${2}"
    ],
    "description": "MODAL DAMPING with parameter(s) DEFINITION, FIELD.",
    "scope": "source.inp"
  },
  "MODAL DAMPING(DEFINITION, FIELD, MODAL)": {
    "prefix": "*MODAL DAMPING",
    "body": [
      "*MODAL DAMPING, DEFINITION=${1}, FIELD=${2}, MODAL=${3}"
    ],
    "description": "MODAL DAMPING with parameter(s) DEFINITION, FIELD, MODAL.",
    "scope": "source.inp"
  },
  "MODAL DAMPING(DEFINITION, FIELD, RAYLEIGH)": {
    "prefix": "*MODAL DAMPING",
    "body": [
      "*MODAL DAMPING, DEFINITION=${1}, FIELD=${2}, RAYLEIGH=${3}"
    ],
    "description": "MODAL DAMPING with parameter(s) DEFINITION, FIELD, RAYLEIGH.",
    "scope": "source.inp"
  },
  "MODAL DAMPING(DEFINITION, FIELD, STRUCTURAL)": {
    "prefix": "*MODAL DAMPING",
    "body": [
      "*MODAL DAMPING, DEFINITION=${1}, FIELD=${2}, STRUCTURAL=${3}"
    ],
    "description": "MODAL DAMPING with parameter(s) DEFINITION, FIELD, STRUCTURAL.",
    "scope": "source.inp"
  },
  "MODAL DYNAMIC()": {
    "prefix": "*MODAL DYNAMIC",
    "body": [
      "*MODAL DYNAMIC"
    ],
    "description": "MODAL DYNAMIC without parameter(s).",
    "scope": "source.inp"
  },
  "MODAL DYNAMIC(CONTINUE)": {
    "prefix": "*MODAL DYNAMIC",
    "body": [
      "*MODAL DYNAMIC, CONTINUE=${1}"
    ],
    "description": "MODAL DYNAMIC with parameter(s) CONTINUE.",
    "scope": "source.inp"
  },
  "MODAL FILE()": {
    "prefix": "*MODAL FILE",
    "body": [
      "*MODAL FILE"
    ],
    "description": "MODAL FILE without parameter(s).",
    "scope": "source.inp"
  },
  "MODAL FILE(FREQUENCY)": {
    "prefix": "*MODAL FILE",
    "body": [
      "*MODAL FILE, FREQUENCY=${1}"
    ],
    "description": "MODAL FILE with parameter(s) FREQUENCY.",
    "scope": "source.inp"
  },
  "MODAL OUTPUT()": {
    "prefix": "*MODAL OUTPUT",
    "body": [
      "*MODAL OUTPUT"
    ],
    "description": "MODAL OUTPUT without parameter(s).",
    "scope": "source.inp"
  },
  "MODAL OUTPUT(VARIABLE)": {
    "prefix": "*MODAL OUTPUT",
    "body": [
      "*MODAL OUTPUT, VARIABLE=${1}"
    ],
    "description": "MODAL OUTPUT with parameter(s) VARIABLE.",
    "scope": "source.inp"
  },
  "MODAL PRINT()": {
    "prefix": "*MODAL PRINT",
    "body": [
      "*MODAL PRINT"
    ],
    "description": "MODAL PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "MODAL PRINT(FREQUENCY)": {
    "prefix": "*MODAL PRINT",
    "body": [
      "*MODAL PRINT, FREQUENCY=${1}"
    ],
    "description": "MODAL PRINT with parameter(s) FREQUENCY.",
    "scope": "source.inp"
  },
  "MODEL CHANGE(ACTIVATE)": {
    "prefix": "*MODEL CHANGE",
    "body": [
      "*MODEL CHANGE, ACTIVATE=${1}"
    ],
    "description": "MODEL CHANGE with parameter(s) ACTIVATE.",
    "scope": "source.inp"
  },
  "MODEL CHANGE(REMOVE)": {
    "prefix": "*MODEL CHANGE",
    "body": [
      "*MODEL CHANGE, REMOVE=${1}"
    ],
    "description": "MODEL CHANGE with parameter(s) REMOVE.",
    "scope": "source.inp"
  },
  "MODEL CHANGE(ADD)": {
    "prefix": "*MODEL CHANGE",
    "body": [
      "*MODEL CHANGE, ADD=${1}"
    ],
    "description": "MODEL CHANGE with parameter(s) ADD.",
    "scope": "source.inp"
  },
  "MODEL CHANGE(ACTIVATE, TYPE)": {
    "prefix": "*MODEL CHANGE",
    "body": [
      "*MODEL CHANGE, ACTIVATE=${1}, TYPE=${2}"
    ],
    "description": "MODEL CHANGE with parameter(s) ACTIVATE, TYPE.",
    "scope": "source.inp"
  },
  "MODEL CHANGE(REMOVE, TYPE)": {
    "prefix": "*MODEL CHANGE",
    "body": [
      "*MODEL CHANGE, REMOVE=${1}, TYPE=${2}"
    ],
    "description": "MODEL CHANGE with parameter(s) REMOVE, TYPE.",
    "scope": "source.inp"
  },
  "MODEL CHANGE(ADD, TYPE)": {
    "prefix": "*MODEL CHANGE",
    "body": [
      "*MODEL CHANGE, ADD=${1}, TYPE=${2}"
    ],
    "description": "MODEL CHANGE with parameter(s) ADD, TYPE.",
    "scope": "source.inp"
  },
  "MOHR COULOMB HARDENING()": {
    "prefix": "*MOHR COULOMB HARDENING",
    "body": [
      "*MOHR COULOMB HARDENING"
    ],
    "description": "MOHR COULOMB HARDENING without parameter(s).",
    "scope": "source.inp"
  },
  "MOHR COULOMB HARDENING(DEPENDENCIES)": {
    "prefix": "*MOHR COULOMB HARDENING",
    "body": [
      "*MOHR COULOMB HARDENING, DEPENDENCIES=${1}"
    ],
    "description": "MOHR COULOMB HARDENING with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "MOHR COULOMB()": {
    "prefix": "*MOHR COULOMB",
    "body": [
      "*MOHR COULOMB"
    ],
    "description": "MOHR COULOMB without parameter(s).",
    "scope": "source.inp"
  },
  "MOHR COULOMB(DEPENDENCIES, DEVIATORIC ECCENTRICITY, ECCENTRICITY)": {
    "prefix": "*MOHR COULOMB",
    "body": [
      "*MOHR COULOMB, DEPENDENCIES=${1}, DEVIATORIC ECCENTRICITY=${2}, ECCENTRICITY=${3}"
    ],
    "description": "MOHR COULOMB with parameter(s) DEPENDENCIES, DEVIATORIC ECCENTRICITY, ECCENTRICITY.",
    "scope": "source.inp"
  },
  "MOISTURE SWELLING()": {
    "prefix": "*MOISTURE SWELLING",
    "body": [
      "*MOISTURE SWELLING"
    ],
    "description": "MOISTURE SWELLING without parameter(s).",
    "scope": "source.inp"
  },
  "MOLECULAR WEIGHT()": {
    "prefix": "*MOLECULAR WEIGHT",
    "body": [
      "*MOLECULAR WEIGHT"
    ],
    "description": "MOLECULAR WEIGHT without parameter(s).",
    "scope": "source.inp"
  },
  "MOMENTUM EQUATION SOLVER()": {
    "prefix": "*MOMENTUM EQUATION SOLVER",
    "body": [
      "*MOMENTUM EQUATION SOLVER"
    ],
    "description": "MOMENTUM EQUATION SOLVER without parameter(s).",
    "scope": "source.inp"
  },
  "MOMENTUM EQUATION SOLVER(CONVERGENCE, DIAGNOSTICS, TYPE)": {
    "prefix": "*MOMENTUM EQUATION SOLVER",
    "body": [
      "*MOMENTUM EQUATION SOLVER, CONVERGENCE=${1}, DIAGNOSTICS=${2}, TYPE=${3}"
    ],
    "description": "MOMENTUM EQUATION SOLVER with parameter(s) CONVERGENCE, DIAGNOSTICS, TYPE.",
    "scope": "source.inp"
  },
  "MONITOR(DOF, NODE)": {
    "prefix": "*MONITOR",
    "body": [
      "*MONITOR, DOF=${1}, NODE=${2}"
    ],
    "description": "MONITOR with parameter(s) DOF, NODE.",
    "scope": "source.inp"
  },
  "MONITOR(DOF, NODE, FREQUENCY)": {
    "prefix": "*MONITOR",
    "body": [
      "*MONITOR, DOF=${1}, NODE=${2}, FREQUENCY=${3}"
    ],
    "description": "MONITOR with parameter(s) DOF, NODE, FREQUENCY.",
    "scope": "source.inp"
  },
  "MOTION()": {
    "prefix": "*MOTION",
    "body": [
      "*MOTION"
    ],
    "description": "MOTION without parameter(s).",
    "scope": "source.inp"
  },
  "MOTION(AMPLITUDE, TYPE, ROTATION)": {
    "prefix": "*MOTION",
    "body": [
      "*MOTION, AMPLITUDE=${1}, TYPE=${2}, ROTATION=${3}"
    ],
    "description": "MOTION with parameter(s) AMPLITUDE, TYPE, ROTATION.",
    "scope": "source.inp"
  },
  "MOTION(AMPLITUDE, TYPE, TRANSLATION)": {
    "prefix": "*MOTION",
    "body": [
      "*MOTION, AMPLITUDE=${1}, TYPE=${2}, TRANSLATION=${3}"
    ],
    "description": "MOTION with parameter(s) AMPLITUDE, TYPE, TRANSLATION.",
    "scope": "source.inp"
  },
  "MOTION(AMPLITUDE, TYPE, USER)": {
    "prefix": "*MOTION",
    "body": [
      "*MOTION, AMPLITUDE=${1}, TYPE=${2}, USER=${3}"
    ],
    "description": "MOTION with parameter(s) AMPLITUDE, TYPE, USER.",
    "scope": "source.inp"
  },
  "MPC()": {
    "prefix": "*MPC",
    "body": [
      "*MPC"
    ],
    "description": "MPC without parameter(s).",
    "scope": "source.inp"
  },
  "MPC(INPUT, MODE, USER)": {
    "prefix": "*MPC",
    "body": [
      "*MPC, INPUT=${1}, MODE=${2}, USER=${3}"
    ],
    "description": "MPC with parameter(s) INPUT, MODE, USER.",
    "scope": "source.inp"
  },
  "MULLINS EFFECT()": {
    "prefix": "*MULLINS EFFECT",
    "body": [
      "*MULLINS EFFECT"
    ],
    "description": "MULLINS EFFECT without parameter(s).",
    "scope": "source.inp"
  },
  "MULLINS EFFECT(BETA, DEPENDENCIES, M, PROPERTIES, R)": {
    "prefix": "*MULLINS EFFECT",
    "body": [
      "*MULLINS EFFECT, BETA=${1}, DEPENDENCIES=${2}, M=${3}, PROPERTIES=${4}, R=${5}"
    ],
    "description": "MULLINS EFFECT with parameter(s) BETA, DEPENDENCIES, M, PROPERTIES, R.",
    "scope": "source.inp"
  },
  "MULLINS EFFECT(BETA, DEPENDENCIES, M, PROPERTIES, R, USER)": {
    "prefix": "*MULLINS EFFECT",
    "body": [
      "*MULLINS EFFECT, BETA=${1}, DEPENDENCIES=${2}, M=${3}, PROPERTIES=${4}, R=${5}, USER=${6}"
    ],
    "description": "MULLINS EFFECT with parameter(s) BETA, DEPENDENCIES, M, PROPERTIES, R, USER.",
    "scope": "source.inp"
  },
  "MULLINS EFFECT(BETA, DEPENDENCIES, M, PROPERTIES, R, TEST DATA INPUT)": {
    "prefix": "*MULLINS EFFECT",
    "body": [
      "*MULLINS EFFECT, BETA=${1}, DEPENDENCIES=${2}, M=${3}, PROPERTIES=${4}, R=${5}, TEST DATA INPUT=${6}"
    ],
    "description": "MULLINS EFFECT with parameter(s) BETA, DEPENDENCIES, M, PROPERTIES, R, TEST DATA INPUT.",
    "scope": "source.inp"
  },
  "NCOPY(CHANGE NUMBER, OLD SET, POLE)": {
    "prefix": "*NCOPY",
    "body": [
      "*NCOPY, CHANGE NUMBER=${1}, OLD SET=${2}, POLE=${3}"
    ],
    "description": "NCOPY with parameter(s) CHANGE NUMBER, OLD SET, POLE.",
    "scope": "source.inp"
  },
  "NCOPY(CHANGE NUMBER, OLD SET, SHIFT)": {
    "prefix": "*NCOPY",
    "body": [
      "*NCOPY, CHANGE NUMBER=${1}, OLD SET=${2}, SHIFT=${3}"
    ],
    "description": "NCOPY with parameter(s) CHANGE NUMBER, OLD SET, SHIFT.",
    "scope": "source.inp"
  },
  "NCOPY(CHANGE NUMBER, OLD SET, REFLECT)": {
    "prefix": "*NCOPY",
    "body": [
      "*NCOPY, CHANGE NUMBER=${1}, OLD SET=${2}, REFLECT=${3}"
    ],
    "description": "NCOPY with parameter(s) CHANGE NUMBER, OLD SET, REFLECT.",
    "scope": "source.inp"
  },
  "NCOPY(CHANGE NUMBER, OLD SET, POLE, MULTIPLE, NEW SET)": {
    "prefix": "*NCOPY",
    "body": [
      "*NCOPY, CHANGE NUMBER=${1}, OLD SET=${2}, POLE=${3}, MULTIPLE=${4}, NEW SET=${5}"
    ],
    "description": "NCOPY with parameter(s) CHANGE NUMBER, OLD SET, POLE, MULTIPLE, NEW SET.",
    "scope": "source.inp"
  },
  "NCOPY(CHANGE NUMBER, OLD SET, SHIFT, MULTIPLE, NEW SET)": {
    "prefix": "*NCOPY",
    "body": [
      "*NCOPY, CHANGE NUMBER=${1}, OLD SET=${2}, SHIFT=${3}, MULTIPLE=${4}, NEW SET=${5}"
    ],
    "description": "NCOPY with parameter(s) CHANGE NUMBER, OLD SET, SHIFT, MULTIPLE, NEW SET.",
    "scope": "source.inp"
  },
  "NCOPY(CHANGE NUMBER, OLD SET, REFLECT, MULTIPLE, NEW SET)": {
    "prefix": "*NCOPY",
    "body": [
      "*NCOPY, CHANGE NUMBER=${1}, OLD SET=${2}, REFLECT=${3}, MULTIPLE=${4}, NEW SET=${5}"
    ],
    "description": "NCOPY with parameter(s) CHANGE NUMBER, OLD SET, REFLECT, MULTIPLE, NEW SET.",
    "scope": "source.inp"
  },
  "NFILL()": {
    "prefix": "*NFILL",
    "body": [
      "*NFILL"
    ],
    "description": "NFILL without parameter(s).",
    "scope": "source.inp"
  },
  "NFILL(BIAS, NSET, SINGULAR, TWO STEP)": {
    "prefix": "*NFILL",
    "body": [
      "*NFILL, BIAS=${1}, NSET=${2}, SINGULAR=${3}, TWO STEP=${4}"
    ],
    "description": "NFILL with parameter(s) BIAS, NSET, SINGULAR, TWO STEP.",
    "scope": "source.inp"
  },
  "NGEN()": {
    "prefix": "*NGEN",
    "body": [
      "*NGEN"
    ],
    "description": "NGEN without parameter(s).",
    "scope": "source.inp"
  },
  "NGEN(LINE, NSET, SYSTEM)": {
    "prefix": "*NGEN",
    "body": [
      "*NGEN, LINE=${1}, NSET=${2}, SYSTEM=${3}"
    ],
    "description": "NGEN with parameter(s) LINE, NSET, SYSTEM.",
    "scope": "source.inp"
  },
  "NMAP(NSET, TYPE)": {
    "prefix": "*NMAP",
    "body": [
      "*NMAP, NSET=${1}, TYPE=${2}"
    ],
    "description": "NMAP with parameter(s) NSET, TYPE.",
    "scope": "source.inp"
  },
  "NMAP(NSET, TYPE, DEFINITION)": {
    "prefix": "*NMAP",
    "body": [
      "*NMAP, NSET=${1}, TYPE=${2}, DEFINITION=${3}"
    ],
    "description": "NMAP with parameter(s) NSET, TYPE, DEFINITION.",
    "scope": "source.inp"
  },
  "NO COMPRESSION()": {
    "prefix": "*NO COMPRESSION",
    "body": [
      "*NO COMPRESSION"
    ],
    "description": "NO COMPRESSION without parameter(s).",
    "scope": "source.inp"
  },
  "NO TENSION()": {
    "prefix": "*NO TENSION",
    "body": [
      "*NO TENSION"
    ],
    "description": "NO TENSION without parameter(s).",
    "scope": "source.inp"
  },
  "NODAL ENERGY RATE()": {
    "prefix": "*NODAL ENERGY RATE",
    "body": [
      "*NODAL ENERGY RATE"
    ],
    "description": "NODAL ENERGY RATE without parameter(s).",
    "scope": "source.inp"
  },
  "NODAL ENERGY RATE(GENERATE, INPUT)": {
    "prefix": "*NODAL ENERGY RATE",
    "body": [
      "*NODAL ENERGY RATE, GENERATE=${1}, INPUT=${2}"
    ],
    "description": "NODAL ENERGY RATE with parameter(s) GENERATE, INPUT.",
    "scope": "source.inp"
  },
  "NODAL THICKNESS()": {
    "prefix": "*NODAL THICKNESS",
    "body": [
      "*NODAL THICKNESS"
    ],
    "description": "NODAL THICKNESS without parameter(s).",
    "scope": "source.inp"
  },
  "NODAL THICKNESS(GENERATE, INPUT)": {
    "prefix": "*NODAL THICKNESS",
    "body": [
      "*NODAL THICKNESS, GENERATE=${1}, INPUT=${2}"
    ],
    "description": "NODAL THICKNESS with parameter(s) GENERATE, INPUT.",
    "scope": "source.inp"
  },
  "NODE FILE()": {
    "prefix": "*NODE FILE",
    "body": [
      "*NODE FILE"
    ],
    "description": "NODE FILE without parameter(s).",
    "scope": "source.inp"
  },
  "NODE FILE(FREQUENCY, GLOBAL, LAST MODE, MODE, NSET)": {
    "prefix": "*NODE FILE",
    "body": [
      "*NODE FILE, FREQUENCY=${1}, GLOBAL=${2}, LAST MODE=${3}, MODE=${4}, NSET=${5}"
    ],
    "description": "NODE FILE with parameter(s) FREQUENCY, GLOBAL, LAST MODE, MODE, NSET.",
    "scope": "source.inp"
  },
  "NODE OUTPUT(TRACER SET)": {
    "prefix": "*NODE OUTPUT",
    "body": [
      "*NODE OUTPUT, TRACER SET=${1}"
    ],
    "description": "NODE OUTPUT with parameter(s) TRACER SET.",
    "scope": "source.inp"
  },
  "NODE OUTPUT(NSET)": {
    "prefix": "*NODE OUTPUT",
    "body": [
      "*NODE OUTPUT, NSET=${1}"
    ],
    "description": "NODE OUTPUT with parameter(s) NSET.",
    "scope": "source.inp"
  },
  "NODE OUTPUT(NSET, VARIABLE)": {
    "prefix": "*NODE OUTPUT",
    "body": [
      "*NODE OUTPUT, NSET=${1}, VARIABLE=${2}"
    ],
    "description": "NODE OUTPUT with parameter(s) NSET, VARIABLE.",
    "scope": "source.inp"
  },
  "NODE OUTPUT(TRACER SET, VARIABLE)": {
    "prefix": "*NODE OUTPUT",
    "body": [
      "*NODE OUTPUT, TRACER SET=${1}, VARIABLE=${2}"
    ],
    "description": "NODE OUTPUT with parameter(s) TRACER SET, VARIABLE.",
    "scope": "source.inp"
  },
  "NODE OUTPUT(TRACER SET, VARIABLE, EXTERIOR, NSET, GLOBAL)": {
    "prefix": "*NODE OUTPUT",
    "body": [
      "*NODE OUTPUT, TRACER SET=${1}, VARIABLE=${2}, EXTERIOR=${3}, NSET=${4}, GLOBAL=${5}"
    ],
    "description": "NODE OUTPUT with parameter(s) TRACER SET, VARIABLE, EXTERIOR, NSET, GLOBAL.",
    "scope": "source.inp"
  },
  "NODE OUTPUT(NSET, VARIABLE, EXTERIOR, TRACER SET, GLOBAL)": {
    "prefix": "*NODE OUTPUT",
    "body": [
      "*NODE OUTPUT, NSET=${1}, VARIABLE=${2}, EXTERIOR=${3}, TRACER SET=${4}, GLOBAL=${5}"
    ],
    "description": "NODE OUTPUT with parameter(s) NSET, VARIABLE, EXTERIOR, TRACER SET, GLOBAL.",
    "scope": "source.inp"
  },
  "NODE PRINT()": {
    "prefix": "*NODE PRINT",
    "body": [
      "*NODE PRINT"
    ],
    "description": "NODE PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "NODE PRINT(FREQUENCY, GLOBAL, LAST MODE, MODE, NSET, SUMMARY, TOTALS)": {
    "prefix": "*NODE PRINT",
    "body": [
      "*NODE PRINT, FREQUENCY=${1}, GLOBAL=${2}, LAST MODE=${3}, MODE=${4}, NSET=${5}, SUMMARY=${6}, TOTALS=${7}"
    ],
    "description": "NODE PRINT with parameter(s) FREQUENCY, GLOBAL, LAST MODE, MODE, NSET, SUMMARY, TOTALS.",
    "scope": "source.inp"
  },
  "NODE RESPONSE()": {
    "prefix": "*NODE RESPONSE",
    "body": [
      "*NODE RESPONSE"
    ],
    "description": "NODE RESPONSE without parameter(s).",
    "scope": "source.inp"
  },
  "NODE RESPONSE(NSET)": {
    "prefix": "*NODE RESPONSE",
    "body": [
      "*NODE RESPONSE, NSET=${1}"
    ],
    "description": "NODE RESPONSE with parameter(s) NSET.",
    "scope": "source.inp"
  },
  "NODE()": {
    "prefix": "*NODE",
    "body": [
      "*NODE"
    ],
    "description": "NODE without parameter(s).",
    "scope": "source.inp"
  },
  "NODE(INPUT, NSET, SYSTEM)": {
    "prefix": "*NODE",
    "body": [
      "*NODE, INPUT=${1}, NSET=${2}, SYSTEM=${3}"
    ],
    "description": "NODE with parameter(s) INPUT, NSET, SYSTEM.",
    "scope": "source.inp"
  },
  "NONLINEAR BH(DIR)": {
    "prefix": "*NONLINEAR BH",
    "body": [
      "*NONLINEAR BH, DIR=${1}"
    ],
    "description": "NONLINEAR BH with parameter(s) DIR.",
    "scope": "source.inp"
  },
  "NONLINEAR BH(DIR, DEPENDENCIES)": {
    "prefix": "*NONLINEAR BH",
    "body": [
      "*NONLINEAR BH, DIR=${1}, DEPENDENCIES=${2}"
    ],
    "description": "NONLINEAR BH with parameter(s) DIR, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "NONSTRUCTURAL MASS(ELSET, UNITS)": {
    "prefix": "*NONSTRUCTURAL MASS",
    "body": [
      "*NONSTRUCTURAL MASS, ELSET=${1}, UNITS=${2}"
    ],
    "description": "NONSTRUCTURAL MASS with parameter(s) ELSET, UNITS.",
    "scope": "source.inp"
  },
  "NONSTRUCTURAL MASS(ELSET, UNITS, DISTRIBUTION)": {
    "prefix": "*NONSTRUCTURAL MASS",
    "body": [
      "*NONSTRUCTURAL MASS, ELSET=${1}, UNITS=${2}, DISTRIBUTION=${3}"
    ],
    "description": "NONSTRUCTURAL MASS with parameter(s) ELSET, UNITS, DISTRIBUTION.",
    "scope": "source.inp"
  },
  "NORMAL()": {
    "prefix": "*NORMAL",
    "body": [
      "*NORMAL"
    ],
    "description": "NORMAL without parameter(s).",
    "scope": "source.inp"
  },
  "NORMAL(TYPE)": {
    "prefix": "*NORMAL",
    "body": [
      "*NORMAL, TYPE=${1}"
    ],
    "description": "NORMAL with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "NSET(NSET)": {
    "prefix": "*NSET",
    "body": [
      "*NSET, NSET,=${1}"
    ],
    "description": "NSET with parameter(s) NSET.",
    "scope": "source.inp"
  },
  "NSET(NSET, ELSET, GENERATE, INSTANCE, INTERNAL, UNSORTED)": {
    "prefix": "*NSET",
    "body": [
      "*NSET, NSET,=${1}, ELSET=${2}, GENERATE=${3}, INSTANCE=${4}, INTERNAL=${5}, UNSORTED=${6}"
    ],
    "description": "NSET with parameter(s) NSET, ELSET, GENERATE, INSTANCE, INTERNAL, UNSORTED.",
    "scope": "source.inp"
  },
  "ORIENTATION(NAME)": {
    "prefix": "*ORIENTATION",
    "body": [
      "*ORIENTATION, NAME=${1}"
    ],
    "description": "ORIENTATION with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "ORIENTATION(NAME, DEFINITION, LOCAL DIRECTIONS, SYSTEM)": {
    "prefix": "*ORIENTATION",
    "body": [
      "*ORIENTATION, NAME=${1}, DEFINITION=${2}, LOCAL DIRECTIONS=${3}, SYSTEM=${4}"
    ],
    "description": "ORIENTATION with parameter(s) NAME, DEFINITION, LOCAL DIRECTIONS, SYSTEM.",
    "scope": "source.inp"
  },
  "ORNL()": {
    "prefix": "*ORNL",
    "body": [
      "*ORNL"
    ],
    "description": "ORNL without parameter(s).",
    "scope": "source.inp"
  },
  "ORNL(A, H, MATERIAL, RESET)": {
    "prefix": "*ORNL",
    "body": [
      "*ORNL, A=${1}, H=${2}, MATERIAL=${3}, RESET=${4}"
    ],
    "description": "ORNL with parameter(s) A, H, MATERIAL, RESET.",
    "scope": "source.inp"
  },
  "OUTPUT(DIAGNOSTICS)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, DIAGNOSTICS=${1}"
    ],
    "description": "OUTPUT with parameter(s) DIAGNOSTICS.",
    "scope": "source.inp"
  },
  "OUTPUT(FIELD)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, FIELD=${1}"
    ],
    "description": "OUTPUT with parameter(s) FIELD.",
    "scope": "source.inp"
  },
  "OUTPUT(HISTORY)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, HISTORY=${1}"
    ],
    "description": "OUTPUT with parameter(s) HISTORY.",
    "scope": "source.inp"
  },
  "OUTPUT(DIAGNOSTICS, NAME)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, DIAGNOSTICS=${1}, NAME=${2}"
    ],
    "description": "OUTPUT with parameter(s) DIAGNOSTICS, NAME.",
    "scope": "source.inp"
  },
  "OUTPUT(HISTORY, NAME, FREQUENCY, SENSOR, FILTER, OP, TIME INTERVAL, VARIABLE)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, HISTORY=${1}, NAME=${2}, FREQUENCY=${3}, SENSOR=${4}, FILTER=${5}, OP=${6}, TIME INTERVAL=${7}, VARIABLE=${8}"
    ],
    "description": "OUTPUT with parameter(s) HISTORY, NAME, FREQUENCY, SENSOR, FILTER, OP, TIME INTERVAL, VARIABLE.",
    "scope": "source.inp"
  },
  "OUTPUT(FIELD, NAME, FREQUENCY, NUMBER INTERVAL, TIME INTERVAL, OP)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, FIELD=${1}, NAME=${2}, FREQUENCY=${3}, NUMBER INTERVAL=${4}, TIME INTERVAL=${5}, OP=${6}"
    ],
    "description": "OUTPUT with parameter(s) FIELD, NAME, FREQUENCY, NUMBER INTERVAL, TIME INTERVAL, OP.",
    "scope": "source.inp"
  },
  "OUTPUT(HISTORY, NAME, FREQUENCY, NUMBER INTERVAL, TIME INTERVAL, OP)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, HISTORY=${1}, NAME=${2}, FREQUENCY=${3}, NUMBER INTERVAL=${4}, TIME INTERVAL=${5}, OP=${6}"
    ],
    "description": "OUTPUT with parameter(s) HISTORY, NAME, FREQUENCY, NUMBER INTERVAL, TIME INTERVAL, OP.",
    "scope": "source.inp"
  },
  "OUTPUT(DIAGNOSTICS, FREQUENCY, MODE LIST, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, DIAGNOSTICS=${1}, FREQUENCY=${2}, MODE LIST=${3}, NAME=${4}, NUMBER INTERVAL=${5}, TIME MARKS=${6}, TIME POINTS=${7}"
    ],
    "description": "OUTPUT with parameter(s) DIAGNOSTICS, FREQUENCY, MODE LIST, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS.",
    "scope": "source.inp"
  },
  "OUTPUT(FIELD, FREQUENCY, MODE LIST, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS, OP, TIME INTERVAL, VARIABLE)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, FIELD=${1}, FREQUENCY=${2}, MODE LIST=${3}, NAME=${4}, NUMBER INTERVAL=${5}, TIME MARKS=${6}, TIME POINTS=${7}, OP=${8}, TIME INTERVAL=${9}, VARIABLE=${10}"
    ],
    "description": "OUTPUT with parameter(s) FIELD, FREQUENCY, MODE LIST, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS, OP, TIME INTERVAL, VARIABLE.",
    "scope": "source.inp"
  },
  "OUTPUT(HISTORY, FREQUENCY, MODE LIST, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS, OP, TIME INTERVAL, VARIABLE, SENSOR)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, HISTORY=${1}, FREQUENCY=${2}, MODE LIST=${3}, NAME=${4}, NUMBER INTERVAL=${5}, TIME MARKS=${6}, TIME POINTS=${7}, OP=${8}, TIME INTERVAL=${9}, VARIABLE=${10}, SENSOR=${11}"
    ],
    "description": "OUTPUT with parameter(s) HISTORY, FREQUENCY, MODE LIST, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS, OP, TIME INTERVAL, VARIABLE, SENSOR.",
    "scope": "source.inp"
  },
  "OUTPUT(FIELD, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS, FILTER, OP, TIME INTERVAL, VARIABLE)": {
    "prefix": "*OUTPUT",
    "body": [
      "*OUTPUT, FIELD=${1}, NAME=${2}, NUMBER INTERVAL=${3}, TIME MARKS=${4}, TIME POINTS=${5}, FILTER=${6}, OP=${7}, TIME INTERVAL=${8}, VARIABLE=${9}"
    ],
    "description": "OUTPUT with parameter(s) FIELD, NAME, NUMBER INTERVAL, TIME MARKS, TIME POINTS, FILTER, OP, TIME INTERVAL, VARIABLE.",
    "scope": "source.inp"
  },
  "PARAMETER DEPENDENCE(NUMBER VALUES, TABLE)": {
    "prefix": "*PARAMETER DEPENDENCE",
    "body": [
      "*PARAMETER DEPENDENCE, NUMBER VALUES=${1}, TABLE=${2}"
    ],
    "description": "PARAMETER DEPENDENCE with parameter(s) NUMBER VALUES, TABLE.",
    "scope": "source.inp"
  },
  "PARAMETER SHAPE VARIATION(PARAMETER)": {
    "prefix": "*PARAMETER SHAPE VARIATION",
    "body": [
      "*PARAMETER SHAPE VARIATION, PARAMETER=${1}"
    ],
    "description": "PARAMETER SHAPE VARIATION with parameter(s) PARAMETER.",
    "scope": "source.inp"
  },
  "PARAMETER SHAPE VARIATION(PARAMETER, INPUT, SYSTEM)": {
    "prefix": "*PARAMETER SHAPE VARIATION",
    "body": [
      "*PARAMETER SHAPE VARIATION, PARAMETER=${1}, INPUT=${2}, SYSTEM=${3}"
    ],
    "description": "PARAMETER SHAPE VARIATION with parameter(s) PARAMETER, INPUT, SYSTEM.",
    "scope": "source.inp"
  },
  "PARAMETER SHAPE VARIATION(PARAMETER, STEP, FILE, INC, MODE, NSET)": {
    "prefix": "*PARAMETER SHAPE VARIATION",
    "body": [
      "*PARAMETER SHAPE VARIATION, PARAMETER=${1}, STEP=${2}, FILE=${3}, INC=${4}, MODE=${5}, NSET=${6}"
    ],
    "description": "PARAMETER SHAPE VARIATION with parameter(s) PARAMETER, STEP, FILE, INC, MODE, NSET.",
    "scope": "source.inp"
  },
  "PARAMETER()": {
    "prefix": "*PARAMETER",
    "body": [
      "*PARAMETER"
    ],
    "description": "PARAMETER without parameter(s).",
    "scope": "source.inp"
  },
  "PARAMETER(DEPENDENT, INDEPENDENT, TABLE)": {
    "prefix": "*PARAMETER",
    "body": [
      "*PARAMETER, DEPENDENT=${1}, INDEPENDENT=${2}, TABLE=${3}"
    ],
    "description": "PARAMETER with parameter(s) DEPENDENT, INDEPENDENT, TABLE.",
    "scope": "source.inp"
  },
  "PART(NAME)": {
    "prefix": "*PART",
    "body": [
      "*PART, NAME=${1}"
    ],
    "description": "PART with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "PERIODIC MEDIA(INLET CONTROL NODE, NAME, ORIENTATION, OUTLET CONTROL NODE, TRIGGER NODE)": {
    "prefix": "*PERIODIC MEDIA",
    "body": [
      "*PERIODIC MEDIA, INLET CONTROL NODE=${1}, NAME=${2}, ORIENTATION=${3}, OUTLET CONTROL NODE=${4}, TRIGGER NODE=${5}"
    ],
    "description": "PERIODIC MEDIA with parameter(s) INLET CONTROL NODE, NAME, ORIENTATION, OUTLET CONTROL NODE, TRIGGER NODE.",
    "scope": "source.inp"
  },
  "PERIODIC(TYPE)": {
    "prefix": "*PERIODIC",
    "body": [
      "*PERIODIC, TYPE=${1}"
    ],
    "description": "PERIODIC with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "PERIODIC(TYPE, NR)": {
    "prefix": "*PERIODIC",
    "body": [
      "*PERIODIC, TYPE=${1}, NR=${2}"
    ],
    "description": "PERIODIC with parameter(s) TYPE, NR.",
    "scope": "source.inp"
  },
  "PERMEABILITY()": {
    "prefix": "*PERMEABILITY",
    "body": [
      "*PERMEABILITY"
    ],
    "description": "PERMEABILITY without parameter(s).",
    "scope": "source.inp"
  },
  "PERMEABILITY(SPECIFIC)": {
    "prefix": "*PERMEABILITY",
    "body": [
      "*PERMEABILITY, SPECIFIC=${1}"
    ],
    "description": "PERMEABILITY with parameter(s) SPECIFIC.",
    "scope": "source.inp"
  },
  "PERMEABILITY(DEPENDENCIES, TYPE)": {
    "prefix": "*PERMEABILITY",
    "body": [
      "*PERMEABILITY, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "PERMEABILITY with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "PERMEABILITY(INERTIAL DRAG COEFFICIENT, TYPE)": {
    "prefix": "*PERMEABILITY",
    "body": [
      "*PERMEABILITY, INERTIAL DRAG COEFFICIENT=${1}, TYPE=${2}"
    ],
    "description": "PERMEABILITY with parameter(s) INERTIAL DRAG COEFFICIENT, TYPE.",
    "scope": "source.inp"
  },
  "PERMEABILITY(SPECIFIC, DEPENDENCIES, TYPE)": {
    "prefix": "*PERMEABILITY",
    "body": [
      "*PERMEABILITY, SPECIFIC=${1}, DEPENDENCIES=${2}, TYPE=${3}"
    ],
    "description": "PERMEABILITY with parameter(s) SPECIFIC, DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "PHYSICAL CONSTANTS()": {
    "prefix": "*PHYSICAL CONSTANTS",
    "body": [
      "*PHYSICAL CONSTANTS"
    ],
    "description": "PHYSICAL CONSTANTS without parameter(s).",
    "scope": "source.inp"
  },
  "PHYSICAL CONSTANTS(ABSOLUTE ZERO, STEFAN BOLTZMANN, UNIVERSAL GAS CONSTANT, SPL REFERENCE PRESSURE)": {
    "prefix": "*PHYSICAL CONSTANTS",
    "body": [
      "*PHYSICAL CONSTANTS, ABSOLUTE ZERO=${1}, STEFAN BOLTZMANN=${2}, UNIVERSAL GAS CONSTANT=${3}, SPL REFERENCE PRESSURE=${4}"
    ],
    "description": "PHYSICAL CONSTANTS with parameter(s) ABSOLUTE ZERO, STEFAN BOLTZMANN, UNIVERSAL GAS CONSTANT, SPL REFERENCE PRESSURE.",
    "scope": "source.inp"
  },
  "PIEZOELECTRIC()": {
    "prefix": "*PIEZOELECTRIC",
    "body": [
      "*PIEZOELECTRIC"
    ],
    "description": "PIEZOELECTRIC without parameter(s).",
    "scope": "source.inp"
  },
  "PIEZOELECTRIC(DEPENDENCIES, TYPE)": {
    "prefix": "*PIEZOELECTRIC",
    "body": [
      "*PIEZOELECTRIC, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "PIEZOELECTRIC with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "PIPE-SOIL INTERACTION(ELSET)": {
    "prefix": "*PIPE-SOIL INTERACTION",
    "body": [
      "*PIPE-SOIL INTERACTION, ELSET=${1}"
    ],
    "description": "PIPE-SOIL INTERACTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "PIPE-SOIL INTERACTION(ELSET, ORIENTATION)": {
    "prefix": "*PIPE-SOIL INTERACTION",
    "body": [
      "*PIPE-SOIL INTERACTION, ELSET=${1}, ORIENTATION=${2}"
    ],
    "description": "PIPE-SOIL INTERACTION with parameter(s) ELSET, ORIENTATION.",
    "scope": "source.inp"
  },
  "PIPE-SOIL STIFFNESS()": {
    "prefix": "*PIPE-SOIL STIFFNESS",
    "body": [
      "*PIPE-SOIL STIFFNESS"
    ],
    "description": "PIPE-SOIL STIFFNESS without parameter(s).",
    "scope": "source.inp"
  },
  "PIPE-SOIL STIFFNESS(TYPE, DEPENDENCIES, DIRECTION)": {
    "prefix": "*PIPE-SOIL STIFFNESS",
    "body": [
      "*PIPE-SOIL STIFFNESS, TYPE=${1}, DEPENDENCIES=${2}, DIRECTION=${3}"
    ],
    "description": "PIPE-SOIL STIFFNESS with parameter(s) TYPE, DEPENDENCIES, DIRECTION.",
    "scope": "source.inp"
  },
  "PIPE-SOIL STIFFNESS(TYPE=USER, DEPENDENCIES, DIRECTION, PROPERTIES, VARIABLES)": {
    "prefix": "*PIPE-SOIL STIFFNESS",
    "body": [
      "*PIPE-SOIL STIFFNESS, TYPE=USER, DEPENDENCIES=${1}, DIRECTION=${2}, PROPERTIES=${3}, VARIABLES=${4}"
    ],
    "description": "PIPE-SOIL STIFFNESS with parameter(s) TYPE=USER, DEPENDENCIES, DIRECTION, PROPERTIES, VARIABLES.",
    "scope": "source.inp"
  },
  "PLANAR TEST DATA()": {
    "prefix": "*PLANAR TEST DATA",
    "body": [
      "*PLANAR TEST DATA"
    ],
    "description": "PLANAR TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "PLANAR TEST DATA(SMOOTH, DEPENDENCIES)": {
    "prefix": "*PLANAR TEST DATA",
    "body": [
      "*PLANAR TEST DATA, SMOOTH=${1}, DEPENDENCIES=${2}"
    ],
    "description": "PLANAR TEST DATA with parameter(s) SMOOTH, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "PLASTIC AXIAL()": {
    "prefix": "*PLASTIC AXIAL",
    "body": [
      "*PLASTIC AXIAL"
    ],
    "description": "PLASTIC AXIAL without parameter(s).",
    "scope": "source.inp"
  },
  "PLASTIC M1()": {
    "prefix": "*PLASTIC M1",
    "body": [
      "*PLASTIC M1"
    ],
    "description": "PLASTIC M1 without parameter(s).",
    "scope": "source.inp"
  },
  "PLASTIC M2()": {
    "prefix": "*PLASTIC M2",
    "body": [
      "*PLASTIC M2"
    ],
    "description": "PLASTIC M2 without parameter(s).",
    "scope": "source.inp"
  },
  "PLASTIC TORQUE()": {
    "prefix": "*PLASTIC TORQUE",
    "body": [
      "*PLASTIC TORQUE"
    ],
    "description": "PLASTIC TORQUE without parameter(s).",
    "scope": "source.inp"
  },
  "PLASTIC()": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC"
    ],
    "description": "PLASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "PLASTIC(HARDENING, SCALESTRESS)": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC, HARDENING=${1}, SCALESTRESS=${2}"
    ],
    "description": "PLASTIC with parameter(s) HARDENING, SCALESTRESS.",
    "scope": "source.inp"
  },
  "PLASTIC(HARDENING=USER, SCALESTRESS, PROPERTIES)": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC, HARDENING=USER, SCALESTRESS=${1}, PROPERTIES=${2}"
    ],
    "description": "PLASTIC with parameter(s) HARDENING=USER, SCALESTRESS, PROPERTIES.",
    "scope": "source.inp"
  },
  "PLASTIC(HARDENING=ISOTROPIC, SCALESTRESS, DEPENDENCIES)": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC, HARDENING=ISOTROPIC, SCALESTRESS=${1}, DEPENDENCIES=${2}"
    ],
    "description": "PLASTIC with parameter(s) HARDENING=ISOTROPIC, SCALESTRESS, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "PLASTIC(HARDENING=COMBINED, SCALESTRESS, DEPENDENCIES)": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC, HARDENING=COMBINED, SCALESTRESS=${1}, DEPENDENCIES=${2}"
    ],
    "description": "PLASTIC with parameter(s) HARDENING=COMBINED, SCALESTRESS, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "PLASTIC(HARDENING=ISOTROPIC, SCALESTRESS, DEPENDENCIES, RATE)": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC, HARDENING=ISOTROPIC, SCALESTRESS=${1}, DEPENDENCIES=${2}, RATE=${3}"
    ],
    "description": "PLASTIC with parameter(s) HARDENING=ISOTROPIC, SCALESTRESS, DEPENDENCIES, RATE.",
    "scope": "source.inp"
  },
  "PLASTIC(HARDENING=COMBINED, SCALESTRESS, DEPENDENCIES, DATA TYPE, NUMBER BACKSTRESSES)": {
    "prefix": "*PLASTIC",
    "body": [
      "*PLASTIC, HARDENING=COMBINED, SCALESTRESS=${1}, DEPENDENCIES=${2}, DATA TYPE=${3}, NUMBER BACKSTRESSES=${4}"
    ],
    "description": "PLASTIC with parameter(s) HARDENING=COMBINED, SCALESTRESS, DEPENDENCIES, DATA TYPE, NUMBER BACKSTRESSES.",
    "scope": "source.inp"
  },
  "POROUS BULK MODULI()": {
    "prefix": "*POROUS BULK MODULI",
    "body": [
      "*POROUS BULK MODULI"
    ],
    "description": "POROUS BULK MODULI without parameter(s).",
    "scope": "source.inp"
  },
  "POROUS ELASTIC()": {
    "prefix": "*POROUS ELASTIC",
    "body": [
      "*POROUS ELASTIC"
    ],
    "description": "POROUS ELASTIC without parameter(s).",
    "scope": "source.inp"
  },
  "POROUS ELASTIC(DEPENDENCIES, SHEAR)": {
    "prefix": "*POROUS ELASTIC",
    "body": [
      "*POROUS ELASTIC, DEPENDENCIES=${1}, SHEAR=${2}"
    ],
    "description": "POROUS ELASTIC with parameter(s) DEPENDENCIES, SHEAR.",
    "scope": "source.inp"
  },
  "POROUS FAILURE CRITERIA()": {
    "prefix": "*POROUS FAILURE CRITERIA",
    "body": [
      "*POROUS FAILURE CRITERIA"
    ],
    "description": "POROUS FAILURE CRITERIA without parameter(s).",
    "scope": "source.inp"
  },
  "POROUS METAL PLASTICITY()": {
    "prefix": "*POROUS METAL PLASTICITY",
    "body": [
      "*POROUS METAL PLASTICITY"
    ],
    "description": "POROUS METAL PLASTICITY without parameter(s).",
    "scope": "source.inp"
  },
  "POROUS METAL PLASTICITY(DEPENDENCIES, RELATIVE DENSITY)": {
    "prefix": "*POROUS METAL PLASTICITY",
    "body": [
      "*POROUS METAL PLASTICITY, DEPENDENCIES=${1}, RELATIVE DENSITY=${2}"
    ],
    "description": "POROUS METAL PLASTICITY with parameter(s) DEPENDENCIES, RELATIVE DENSITY.",
    "scope": "source.inp"
  },
  "POST OUTPUT(STEP)": {
    "prefix": "*POST OUTPUT",
    "body": [
      "*POST OUTPUT, STEP=${1}"
    ],
    "description": "POST OUTPUT with parameter(s) STEP.",
    "scope": "source.inp"
  },
  "POST OUTPUT(STEP, CYCLE, ITERATION)": {
    "prefix": "*POST OUTPUT",
    "body": [
      "*POST OUTPUT, STEP=${1}, CYCLE=${2}, ITERATION=${3}"
    ],
    "description": "POST OUTPUT with parameter(s) STEP, CYCLE, ITERATION.",
    "scope": "source.inp"
  },
  "POTENTIAL()": {
    "prefix": "*POTENTIAL",
    "body": [
      "*POTENTIAL"
    ],
    "description": "POTENTIAL without parameter(s).",
    "scope": "source.inp"
  },
  "POTENTIAL(DEPENDENCIES)": {
    "prefix": "*POTENTIAL",
    "body": [
      "*POTENTIAL, DEPENDENCIES=${1}"
    ],
    "description": "POTENTIAL with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "PRE-TENSION SECTION(NODE, ELEMENT)": {
    "prefix": "*PRE-TENSION SECTION",
    "body": [
      "*PRE-TENSION SECTION, NODE=${1}, ELEMENT=${2}"
    ],
    "description": "PRE-TENSION SECTION with parameter(s) NODE, ELEMENT.",
    "scope": "source.inp"
  },
  "PRE-TENSION SECTION(NODE, SURFACE)": {
    "prefix": "*PRE-TENSION SECTION",
    "body": [
      "*PRE-TENSION SECTION, NODE=${1}, SURFACE=${2}"
    ],
    "description": "PRE-TENSION SECTION with parameter(s) NODE, SURFACE.",
    "scope": "source.inp"
  },
  "PREPRINT()": {
    "prefix": "*PREPRINT",
    "body": [
      "*PREPRINT"
    ],
    "description": "PREPRINT without parameter(s).",
    "scope": "source.inp"
  },
  "PREPRINT(CONTACT, ECHO, HISTORY, MODEL, PARSUBSTITUTION, PARVALUES, MASS PROPERTY)": {
    "prefix": "*PREPRINT",
    "body": [
      "*PREPRINT, CONTACT=${1}, ECHO=${2}, HISTORY=${3}, MODEL=${4}, PARSUBSTITUTION=${5}, PARVALUES=${6}, MASS PROPERTY=${7}"
    ],
    "description": "PREPRINT with parameter(s) CONTACT, ECHO, HISTORY, MODEL, PARSUBSTITUTION, PARVALUES, MASS PROPERTY.",
    "scope": "source.inp"
  },
  "PRESSURE EQUATION SOLVER()": {
    "prefix": "*PRESSURE EQUATION SOLVER",
    "body": [
      "*PRESSURE EQUATION SOLVER"
    ],
    "description": "PRESSURE EQUATION SOLVER without parameter(s).",
    "scope": "source.inp"
  },
  "PRESSURE EQUATION SOLVER(CONVERGENCE, DIAGNOSTICS, TYPE)": {
    "prefix": "*PRESSURE EQUATION SOLVER",
    "body": [
      "*PRESSURE EQUATION SOLVER, CONVERGENCE=${1}, DIAGNOSTICS=${2}, TYPE=${3}"
    ],
    "description": "PRESSURE EQUATION SOLVER with parameter(s) CONVERGENCE, DIAGNOSTICS, TYPE.",
    "scope": "source.inp"
  },
  "PRESSURE PENETRATION(MASTER, SLAVE)": {
    "prefix": "*PRESSURE PENETRATION",
    "body": [
      "*PRESSURE PENETRATION, MASTER=${1}, SLAVE=${2}"
    ],
    "description": "PRESSURE PENETRATION with parameter(s) MASTER, SLAVE.",
    "scope": "source.inp"
  },
  "PRESSURE PENETRATION(MASTER, SLAVE, AMPLITUDE, OP, PENETRATION TIME, IMAGINARY)": {
    "prefix": "*PRESSURE PENETRATION",
    "body": [
      "*PRESSURE PENETRATION, MASTER=${1}, SLAVE=${2}, AMPLITUDE=${3}, OP=${4}, PENETRATION TIME=${5}, IMAGINARY=${6}"
    ],
    "description": "PRESSURE PENETRATION with parameter(s) MASTER, SLAVE, AMPLITUDE, OP, PENETRATION TIME, IMAGINARY.",
    "scope": "source.inp"
  },
  "PRESSURE PENETRATION(MASTER, SLAVE, AMPLITUDE, OP, PENETRATION TIME, REAL)": {
    "prefix": "*PRESSURE PENETRATION",
    "body": [
      "*PRESSURE PENETRATION, MASTER=${1}, SLAVE=${2}, AMPLITUDE=${3}, OP=${4}, PENETRATION TIME=${5}, REAL=${6}"
    ],
    "description": "PRESSURE PENETRATION with parameter(s) MASTER, SLAVE, AMPLITUDE, OP, PENETRATION TIME, REAL.",
    "scope": "source.inp"
  },
  "PRESSURE STRESS()": {
    "prefix": "*PRESSURE STRESS",
    "body": [
      "*PRESSURE STRESS"
    ],
    "description": "PRESSURE STRESS without parameter(s).",
    "scope": "source.inp"
  },
  "PRESSURE STRESS(FILE)": {
    "prefix": "*PRESSURE STRESS",
    "body": [
      "*PRESSURE STRESS, FILE=${1}"
    ],
    "description": "PRESSURE STRESS with parameter(s) FILE.",
    "scope": "source.inp"
  },
  "PRESSURE STRESS(USER)": {
    "prefix": "*PRESSURE STRESS",
    "body": [
      "*PRESSURE STRESS, USER=${1}"
    ],
    "description": "PRESSURE STRESS with parameter(s) USER.",
    "scope": "source.inp"
  },
  "PRESSURE STRESS(AMPLITUDE, INPUT, OP)": {
    "prefix": "*PRESSURE STRESS",
    "body": [
      "*PRESSURE STRESS, AMPLITUDE=${1}, INPUT=${2}, OP=${3}"
    ],
    "description": "PRESSURE STRESS with parameter(s) AMPLITUDE, INPUT, OP.",
    "scope": "source.inp"
  },
  "PRESSURE STRESS(FILE, BSTEP, BINC, ESTEP, EINC)": {
    "prefix": "*PRESSURE STRESS",
    "body": [
      "*PRESSURE STRESS, FILE=${1}, BSTEP=${2}, BINC=${3}, ESTEP=${4}, EINC=${5}"
    ],
    "description": "PRESSURE STRESS with parameter(s) FILE, BSTEP, BINC, ESTEP, EINC.",
    "scope": "source.inp"
  },
  "PRESSURE STRESS(USER, AMPLITUDE, INPUT, OP)": {
    "prefix": "*PRESSURE STRESS",
    "body": [
      "*PRESSURE STRESS, USER=${1}, AMPLITUDE=${2}, INPUT=${3}, OP=${4}"
    ],
    "description": "PRESSURE STRESS with parameter(s) USER, AMPLITUDE, INPUT, OP.",
    "scope": "source.inp"
  },
  "PRESTRESS HOLD()": {
    "prefix": "*PRESTRESS HOLD",
    "body": [
      "*PRESTRESS HOLD"
    ],
    "description": "PRESTRESS HOLD without parameter(s).",
    "scope": "source.inp"
  },
  "PRINT()": {
    "prefix": "*PRINT",
    "body": [
      "*PRINT"
    ],
    "description": "PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "PRINT(ADAPTIVE MESH, CONTACT, FREQUENCY, MODEL CHANGE, PLASTICITY, RESIDUAL, SOLVE)": {
    "prefix": "*PRINT",
    "body": [
      "*PRINT, ADAPTIVE MESH=${1}, CONTACT=${2}, FREQUENCY=${3}, MODEL CHANGE=${4}, PLASTICITY=${5}, RESIDUAL=${6}, SOLVE=${7}"
    ],
    "description": "PRINT with parameter(s) ADAPTIVE MESH, CONTACT, FREQUENCY, MODEL CHANGE, PLASTICITY, RESIDUAL, SOLVE.",
    "scope": "source.inp"
  },
  "PRINT(ALLKE, CRITICAL ELEMENT, DMASS, ETOTAL, MASS)": {
    "prefix": "*PRINT",
    "body": [
      "*PRINT, ALLKE=${1}, CRITICAL ELEMENT=${2}, DMASS=${3}, ETOTAL=${4}, MASS=${5}"
    ],
    "description": "PRINT with parameter(s) ALLKE, CRITICAL ELEMENT, DMASS, ETOTAL, MASS.",
    "scope": "source.inp"
  },
  "PSD-DEFINITION(NAME)": {
    "prefix": "*PSD-DEFINITION",
    "body": [
      "*PSD-DEFINITION, NAME=${1}"
    ],
    "description": "PSD-DEFINITION with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "PSD-DEFINITION(NAME, DB REFERENCE, G, INPUT, TYPE, USER)": {
    "prefix": "*PSD-DEFINITION",
    "body": [
      "*PSD-DEFINITION, NAME=${1}, DB REFERENCE=${2}, G=${3}, INPUT=${4}, TYPE=${5}, USER=${6}"
    ],
    "description": "PSD-DEFINITION with parameter(s) NAME, DB REFERENCE, G, INPUT, TYPE, USER.",
    "scope": "source.inp"
  },
  "RADIATE()": {
    "prefix": "*RADIATE",
    "body": [
      "*RADIATE"
    ],
    "description": "RADIATE without parameter(s).",
    "scope": "source.inp"
  },
  "RADIATE(AMPLITUDE, OP, REGION TYPE, )": {
    "prefix": "*RADIATE",
    "body": [
      "*RADIATE, AMPLITUDE=${1}, OP=${2}, REGION TYPE=${3}, =${4}"
    ],
    "description": "RADIATE with parameter(s) AMPLITUDE, OP, REGION TYPE, .",
    "scope": "source.inp"
  },
  "RADIATION FILE()": {
    "prefix": "*RADIATION FILE",
    "body": [
      "*RADIATION FILE"
    ],
    "description": "RADIATION FILE without parameter(s).",
    "scope": "source.inp"
  },
  "RADIATION FILE(FREQUENCY)": {
    "prefix": "*RADIATION FILE",
    "body": [
      "*RADIATION FILE, FREQUENCY=${1}"
    ],
    "description": "RADIATION FILE with parameter(s) FREQUENCY.",
    "scope": "source.inp"
  },
  "RADIATION FILE(FREQUENCY, CAVITY)": {
    "prefix": "*RADIATION FILE",
    "body": [
      "*RADIATION FILE, FREQUENCY=${1}, CAVITY=${2}"
    ],
    "description": "RADIATION FILE with parameter(s) FREQUENCY, CAVITY.",
    "scope": "source.inp"
  },
  "RADIATION FILE(FREQUENCY, ELSET)": {
    "prefix": "*RADIATION FILE",
    "body": [
      "*RADIATION FILE, FREQUENCY=${1}, ELSET=${2}"
    ],
    "description": "RADIATION FILE with parameter(s) FREQUENCY, ELSET.",
    "scope": "source.inp"
  },
  "RADIATION FILE(FREQUENCY, SURFACE)": {
    "prefix": "*RADIATION FILE",
    "body": [
      "*RADIATION FILE, FREQUENCY=${1}, SURFACE=${2}"
    ],
    "description": "RADIATION FILE with parameter(s) FREQUENCY, SURFACE.",
    "scope": "source.inp"
  },
  "RADIATION OUTPUT()": {
    "prefix": "*RADIATION OUTPUT",
    "body": [
      "*RADIATION OUTPUT"
    ],
    "description": "RADIATION OUTPUT without parameter(s).",
    "scope": "source.inp"
  },
  "RADIATION OUTPUT(VARIABLE)": {
    "prefix": "*RADIATION OUTPUT",
    "body": [
      "*RADIATION OUTPUT, VARIABLE=${1}"
    ],
    "description": "RADIATION OUTPUT with parameter(s) VARIABLE.",
    "scope": "source.inp"
  },
  "RADIATION OUTPUT(VARIABLE, CAVITY)": {
    "prefix": "*RADIATION OUTPUT",
    "body": [
      "*RADIATION OUTPUT, VARIABLE=${1}, CAVITY=${2}"
    ],
    "description": "RADIATION OUTPUT with parameter(s) VARIABLE, CAVITY.",
    "scope": "source.inp"
  },
  "RADIATION OUTPUT(VARIABLE, ELSET)": {
    "prefix": "*RADIATION OUTPUT",
    "body": [
      "*RADIATION OUTPUT, VARIABLE=${1}, ELSET=${2}"
    ],
    "description": "RADIATION OUTPUT with parameter(s) VARIABLE, ELSET.",
    "scope": "source.inp"
  },
  "RADIATION OUTPUT(VARIABLE, SURFACE)": {
    "prefix": "*RADIATION OUTPUT",
    "body": [
      "*RADIATION OUTPUT, VARIABLE=${1}, SURFACE=${2}"
    ],
    "description": "RADIATION OUTPUT with parameter(s) VARIABLE, SURFACE.",
    "scope": "source.inp"
  },
  "RADIATION PRINT()": {
    "prefix": "*RADIATION PRINT",
    "body": [
      "*RADIATION PRINT"
    ],
    "description": "RADIATION PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "RADIATION PRINT(FREQUENCY, SUMMARY, TOTALS)": {
    "prefix": "*RADIATION PRINT",
    "body": [
      "*RADIATION PRINT, FREQUENCY=${1}, SUMMARY=${2}, TOTALS=${3}"
    ],
    "description": "RADIATION PRINT with parameter(s) FREQUENCY, SUMMARY, TOTALS.",
    "scope": "source.inp"
  },
  "RADIATION PRINT(FREQUENCY, SUMMARY, TOTALS, CAVITY)": {
    "prefix": "*RADIATION PRINT",
    "body": [
      "*RADIATION PRINT, FREQUENCY=${1}, SUMMARY=${2}, TOTALS=${3}, CAVITY=${4}"
    ],
    "description": "RADIATION PRINT with parameter(s) FREQUENCY, SUMMARY, TOTALS, CAVITY.",
    "scope": "source.inp"
  },
  "RADIATION PRINT(FREQUENCY, SUMMARY, TOTALS, ELSET)": {
    "prefix": "*RADIATION PRINT",
    "body": [
      "*RADIATION PRINT, FREQUENCY=${1}, SUMMARY=${2}, TOTALS=${3}, ELSET=${4}"
    ],
    "description": "RADIATION PRINT with parameter(s) FREQUENCY, SUMMARY, TOTALS, ELSET.",
    "scope": "source.inp"
  },
  "RADIATION PRINT(FREQUENCY, SUMMARY, TOTALS, SURFACE)": {
    "prefix": "*RADIATION PRINT",
    "body": [
      "*RADIATION PRINT, FREQUENCY=${1}, SUMMARY=${2}, TOTALS=${3}, SURFACE=${4}"
    ],
    "description": "RADIATION PRINT with parameter(s) FREQUENCY, SUMMARY, TOTALS, SURFACE.",
    "scope": "source.inp"
  },
  "RADIATION SYMMETRY(NAME)": {
    "prefix": "*RADIATION SYMMETRY",
    "body": [
      "*RADIATION SYMMETRY, NAME=${1}"
    ],
    "description": "RADIATION SYMMETRY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "RADIATION VIEWFACTOR()": {
    "prefix": "*RADIATION VIEWFACTOR",
    "body": [
      "*RADIATION VIEWFACTOR"
    ],
    "description": "RADIATION VIEWFACTOR without parameter(s).",
    "scope": "source.inp"
  },
  "RADIATION VIEWFACTOR(BLOCKING, CAVITY, INFINITESIMAL, INTEGRATION, LUMPED AREA, OFF, RANGE, REFLECTION, SYMMETRY)": {
    "prefix": "*RADIATION VIEWFACTOR",
    "body": [
      "*RADIATION VIEWFACTOR, BLOCKING=${1}, CAVITY=${2}, INFINITESIMAL=${3}, INTEGRATION=${4}, LUMPED AREA=${5}, OFF=${6}, RANGE=${7}, REFLECTION=${8}, SYMMETRY=${9}"
    ],
    "description": "RADIATION VIEWFACTOR with parameter(s) BLOCKING, CAVITY, INFINITESIMAL, INTEGRATION, LUMPED AREA, OFF, RANGE, REFLECTION, SYMMETRY.",
    "scope": "source.inp"
  },
  "RANDOM RESPONSE()": {
    "prefix": "*RANDOM RESPONSE",
    "body": [
      "*RANDOM RESPONSE"
    ],
    "description": "RANDOM RESPONSE without parameter(s).",
    "scope": "source.inp"
  },
  "RATE DEPENDENT()": {
    "prefix": "*RATE DEPENDENT",
    "body": [
      "*RATE DEPENDENT"
    ],
    "description": "RATE DEPENDENT without parameter(s).",
    "scope": "source.inp"
  },
  "RATE DEPENDENT(DEPENDENCIES, TYPE)": {
    "prefix": "*RATE DEPENDENT",
    "body": [
      "*RATE DEPENDENT, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "RATE DEPENDENT with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "RATIOS()": {
    "prefix": "*RATIOS",
    "body": [
      "*RATIOS"
    ],
    "description": "RATIOS without parameter(s).",
    "scope": "source.inp"
  },
  "RATIOS(DEPENDENCIES)": {
    "prefix": "*RATIOS",
    "body": [
      "*RATIOS, DEPENDENCIES=${1}"
    ],
    "description": "RATIOS with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "REACTION RATE()": {
    "prefix": "*REACTION RATE",
    "body": [
      "*REACTION RATE"
    ],
    "description": "REACTION RATE without parameter(s).",
    "scope": "source.inp"
  },
  "REBAR LAYER()": {
    "prefix": "*REBAR LAYER",
    "body": [
      "*REBAR LAYER"
    ],
    "description": "REBAR LAYER without parameter(s).",
    "scope": "source.inp"
  },
  "REBAR LAYER(GEOMETRY, ORIENTATION)": {
    "prefix": "*REBAR LAYER",
    "body": [
      "*REBAR LAYER, GEOMETRY=${1}, ORIENTATION=${2}"
    ],
    "description": "REBAR LAYER with parameter(s) GEOMETRY, ORIENTATION.",
    "scope": "source.inp"
  },
  "REBAR(ELEMENT, MATERIAL, NAME)": {
    "prefix": "*REBAR",
    "body": [
      "*REBAR, ELEMENT=${1}, MATERIAL=${2}, NAME=${3}"
    ],
    "description": "REBAR with parameter(s) ELEMENT, MATERIAL, NAME.",
    "scope": "source.inp"
  },
  "REBAR(ELEMENT, MATERIAL, NAME, GEOMETRY, ISODIRECTION, ORIENTATION, SINGLE)": {
    "prefix": "*REBAR",
    "body": [
      "*REBAR, ELEMENT=${1}, MATERIAL=${2}, NAME=${3}, GEOMETRY=${4}, ISODIRECTION=${5}, ORIENTATION=${6}, SINGLE=${7}"
    ],
    "description": "REBAR with parameter(s) ELEMENT, MATERIAL, NAME, GEOMETRY, ISODIRECTION, ORIENTATION, SINGLE.",
    "scope": "source.inp"
  },
  "REFLECTION(TYPE)": {
    "prefix": "*REFLECTION",
    "body": [
      "*REFLECTION, TYPE=${1}"
    ],
    "description": "REFLECTION with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "RELEASE()": {
    "prefix": "*RELEASE",
    "body": [
      "*RELEASE"
    ],
    "description": "RELEASE without parameter(s).",
    "scope": "source.inp"
  },
  "RELEASE(INPUT)": {
    "prefix": "*RELEASE",
    "body": [
      "*RELEASE, INPUT=${1}"
    ],
    "description": "RELEASE with parameter(s) INPUT.",
    "scope": "source.inp"
  },
  "RESPONSE SPECTRUM()": {
    "prefix": "*RESPONSE SPECTRUM",
    "body": [
      "*RESPONSE SPECTRUM"
    ],
    "description": "RESPONSE SPECTRUM without parameter(s).",
    "scope": "source.inp"
  },
  "RESPONSE SPECTRUM(COMP, SUM)": {
    "prefix": "*RESPONSE SPECTRUM",
    "body": [
      "*RESPONSE SPECTRUM, COMP=${1}, SUM=${2}"
    ],
    "description": "RESPONSE SPECTRUM with parameter(s) COMP, SUM.",
    "scope": "source.inp"
  },
  "RESTART(READ)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}"
    ],
    "description": "RESTART with parameter(s) READ.",
    "scope": "source.inp"
  },
  "RESTART(WRITE)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, WRITE=${1}"
    ],
    "description": "RESTART with parameter(s) WRITE.",
    "scope": "source.inp"
  },
  "RESTART(READ, WRITE)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, WRITE=${2}"
    ],
    "description": "RESTART with parameter(s) READ, WRITE.",
    "scope": "source.inp"
  },
  "RESTART(READ, END STEP, INC, STEP)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, END STEP=${2}, INC=${3}, STEP=${4}"
    ],
    "description": "RESTART with parameter(s) READ, END STEP, INC, STEP.",
    "scope": "source.inp"
  },
  "RESTART(READ, STEP, END STEP, INTERVAL)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, STEP=${2}, END STEP=${3}, INTERVAL=${4}"
    ],
    "description": "RESTART with parameter(s) READ, STEP, END STEP, INTERVAL.",
    "scope": "source.inp"
  },
  "RESTART(READ, CYCLE, END STEP, INC, ITERATION, STEP)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, CYCLE=${2}, END STEP=${3}, INC=${4}, ITERATION=${5}, STEP=${6}"
    ],
    "description": "RESTART with parameter(s) READ, CYCLE, END STEP, INC, ITERATION, STEP.",
    "scope": "source.inp"
  },
  "RESTART(WRITE, FREQUENCY, NUMBER INTERVAL)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, WRITE=${1}, FREQUENCY=${2}, NUMBER INTERVAL=${3}"
    ],
    "description": "RESTART with parameter(s) WRITE, FREQUENCY, NUMBER INTERVAL.",
    "scope": "source.inp"
  },
  "RESTART(WRITE, NUMBER INTERVAL, TIME MARKS, OVERLAY, SINGLE)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, WRITE=${1}, NUMBER INTERVAL=${2}, TIME MARKS=${3}, OVERLAY=${4}, SINGLE=${5}"
    ],
    "description": "RESTART with parameter(s) WRITE, NUMBER INTERVAL, TIME MARKS, OVERLAY, SINGLE.",
    "scope": "source.inp"
  },
  "RESTART(WRITE, FREQUENCY, NUMBER INTERVAL, TIME MARKS, OVERLAY)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, WRITE=${1}, FREQUENCY=${2}, NUMBER INTERVAL=${3}, TIME MARKS=${4}, OVERLAY=${5}"
    ],
    "description": "RESTART with parameter(s) WRITE, FREQUENCY, NUMBER INTERVAL, TIME MARKS, OVERLAY.",
    "scope": "source.inp"
  },
  "RESTART(READ, WRITE, END STEP, INC, STEP, FREQUENCY, NUMBER INTERVAL)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, WRITE=${2}, END STEP=${3}, INC=${4}, STEP=${5}, FREQUENCY=${6}, NUMBER INTERVAL=${7}"
    ],
    "description": "RESTART with parameter(s) READ, WRITE, END STEP, INC, STEP, FREQUENCY, NUMBER INTERVAL.",
    "scope": "source.inp"
  },
  "RESTART(READ, WRITE, STEP, END STEP, INTERVAL, NUMBER INTERVAL, TIME MARKS, OVERLAY, SINGLE)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, WRITE=${2}, STEP=${3}, END STEP=${4}, INTERVAL=${5}, NUMBER INTERVAL=${6}, TIME MARKS=${7}, OVERLAY=${8}, SINGLE=${9}"
    ],
    "description": "RESTART with parameter(s) READ, WRITE, STEP, END STEP, INTERVAL, NUMBER INTERVAL, TIME MARKS, OVERLAY, SINGLE.",
    "scope": "source.inp"
  },
  "RESTART(READ, WRITE, CYCLE, END STEP, INC, ITERATION, STEP, FREQUENCY, NUMBER INTERVAL, TIME MARKS, OVERLAY)": {
    "prefix": "*RESTART",
    "body": [
      "*RESTART, READ=${1}, WRITE=${2}, CYCLE=${3}, END STEP=${4}, INC=${5}, ITERATION=${6}, STEP=${7}, FREQUENCY=${8}, NUMBER INTERVAL=${9}, TIME MARKS=${10}, OVERLAY=${11}"
    ],
    "description": "RESTART with parameter(s) READ, WRITE, CYCLE, END STEP, INC, ITERATION, STEP, FREQUENCY, NUMBER INTERVAL, TIME MARKS, OVERLAY.",
    "scope": "source.inp"
  },
  "RETAINED NODAL DOFS()": {
    "prefix": "*RETAINED NODAL DOFS",
    "body": [
      "*RETAINED NODAL DOFS"
    ],
    "description": "RETAINED NODAL DOFS without parameter(s).",
    "scope": "source.inp"
  },
  "RETAINED NODAL DOFS(SORTED)": {
    "prefix": "*RETAINED NODAL DOFS",
    "body": [
      "*RETAINED NODAL DOFS, SORTED=${1}"
    ],
    "description": "RETAINED NODAL DOFS with parameter(s) SORTED.",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, ANALYTICAL SURFACE)": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, ANALYTICAL SURFACE=${2}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, ANALYTICAL SURFACE.",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, TIE NSET)": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, TIE NSET=${2}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, TIE NSET.",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, PIN NSET)": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, PIN NSET=${2}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, PIN NSET.",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, ELSET)": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, ELSET=${2}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, ELSET.",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, ANALYTICAL SURFACE, ELSET, PIN NSET, TIE NSET)": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, ANALYTICAL SURFACE=${2}, ELSET=${3}, PIN NSET=${4}, TIE NSET=${5}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, ANALYTICAL SURFACE, ELSET, PIN NSET, TIE NSET.",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, ANALYTICAL SURFACE, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, )": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, ANALYTICAL SURFACE=${2}, ISOTHERMAL=${3}, POSITION=${4}, DENSITY=${5}, NODAL THICKNESS=${6}, OFFSET=${7}, =${8}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, ANALYTICAL SURFACE, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, .",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, TIE NSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, )": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, TIE NSET=${2}, ISOTHERMAL=${3}, POSITION=${4}, DENSITY=${5}, NODAL THICKNESS=${6}, OFFSET=${7}, =${8}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, TIE NSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, .",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, PIN NSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, )": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, PIN NSET=${2}, ISOTHERMAL=${3}, POSITION=${4}, DENSITY=${5}, NODAL THICKNESS=${6}, OFFSET=${7}, =${8}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, PIN NSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, .",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, ELSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, )": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, ELSET=${2}, ISOTHERMAL=${3}, POSITION=${4}, DENSITY=${5}, NODAL THICKNESS=${6}, OFFSET=${7}, =${8}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, ELSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET, .",
    "scope": "source.inp"
  },
  "RIGID BODY(REF NODE, ANALYTICAL SURFACE, ELSET, PIN NSET, TIE NSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET)": {
    "prefix": "*RIGID BODY",
    "body": [
      "*RIGID BODY, REF NODE=${1}, ANALYTICAL SURFACE=${2}, ELSET=${3}, PIN NSET=${4}, TIE NSET=${5}, ISOTHERMAL=${6}, POSITION=${7}, DENSITY=${8}, NODAL THICKNESS=${9}, OFFSET=${10}"
    ],
    "description": "RIGID BODY with parameter(s) REF NODE, ANALYTICAL SURFACE, ELSET, PIN NSET, TIE NSET, ISOTHERMAL, POSITION, DENSITY, NODAL THICKNESS, OFFSET.",
    "scope": "source.inp"
  },
  "RIGID SURFACE(ELSET, NAME, REF NODE, TYPE)": {
    "prefix": "*RIGID SURFACE",
    "body": [
      "*RIGID SURFACE, ELSET=${1}, NAME=${2}, REF NODE=${3}, TYPE=${4}"
    ],
    "description": "RIGID SURFACE with parameter(s) ELSET, NAME, REF NODE, TYPE.",
    "scope": "source.inp"
  },
  "RIGID SURFACE(ELSET, NAME, REF NODE, TYPE, FILLET RADIUS)": {
    "prefix": "*RIGID SURFACE",
    "body": [
      "*RIGID SURFACE, ELSET=${1}, NAME=${2}, REF NODE=${3}, TYPE=${4}, FILLET RADIUS=${5}"
    ],
    "description": "RIGID SURFACE with parameter(s) ELSET, NAME, REF NODE, TYPE, FILLET RADIUS.",
    "scope": "source.inp"
  },
  "ROTARY INERTIA(ELSET)": {
    "prefix": "*ROTARY INERTIA",
    "body": [
      "*ROTARY INERTIA, ELSET=${1}"
    ],
    "description": "ROTARY INERTIA with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "ROTARY INERTIA(ELSET, ALPHA, COMPOSITE, ORIENTATION)": {
    "prefix": "*ROTARY INERTIA",
    "body": [
      "*ROTARY INERTIA, ELSET=${1}, ALPHA=${2}, COMPOSITE=${3}, ORIENTATION=${4}"
    ],
    "description": "ROTARY INERTIA with parameter(s) ELSET, ALPHA, COMPOSITE, ORIENTATION.",
    "scope": "source.inp"
  },
  "SECTION CONTROLS(NAME)": {
    "prefix": "*SECTION CONTROLS",
    "body": [
      "*SECTION CONTROLS, NAME=${1}"
    ],
    "description": "SECTION CONTROLS with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SECTION CONTROLS(NAME, CONVERSION CRITERION, DISTORTION CONTROL, DRILL STIFFNESS, ELEMENT CONVERSION, ELEMENT DELETION, HOURGLASS, INITIAL GAP OPENING, KERNEL, KINEMATIC SPLIT, LENGTH RATIO, MAX DEGRADATION, PERTURBATION, RAMP INITIAL STRESS, SECOND ORDER ACCURACY, VISCOSITY, WEIGHT FACTOR)": {
    "prefix": "*SECTION CONTROLS",
    "body": [
      "*SECTION CONTROLS, NAME=${1}, CONVERSION CRITERION=${2}, DISTORTION CONTROL=${3}, DRILL STIFFNESS=${4}, ELEMENT CONVERSION=${5}, ELEMENT DELETION=${6}, HOURGLASS=${7}, INITIAL GAP OPENING=${8}, KERNEL=${9}, KINEMATIC SPLIT=${10}, LENGTH RATIO=${11}, MAX DEGRADATION=${12}, PERTURBATION=${13}, RAMP INITIAL STRESS=${14}, SECOND ORDER ACCURACY=${15}, VISCOSITY=${16}, WEIGHT FACTOR=${17}"
    ],
    "description": "SECTION CONTROLS with parameter(s) NAME, CONVERSION CRITERION, DISTORTION CONTROL, DRILL STIFFNESS, ELEMENT CONVERSION, ELEMENT DELETION, HOURGLASS, INITIAL GAP OPENING, KERNEL, KINEMATIC SPLIT, LENGTH RATIO, MAX DEGRADATION, PERTURBATION, RAMP INITIAL STRESS, SECOND ORDER ACCURACY, VISCOSITY, WEIGHT FACTOR.",
    "scope": "source.inp"
  },
  "SECTION FILE(NAME, SURFACE)": {
    "prefix": "*SECTION FILE",
    "body": [
      "*SECTION FILE, NAME=${1}, SURFACE=${2}"
    ],
    "description": "SECTION FILE with parameter(s) NAME, SURFACE.",
    "scope": "source.inp"
  },
  "SECTION FILE(NAME, SURFACE, AXES, FREQUENCY, UPDATE)": {
    "prefix": "*SECTION FILE",
    "body": [
      "*SECTION FILE, NAME=${1}, SURFACE=${2}, AXES=${3}, FREQUENCY=${4}, UPDATE=${5}"
    ],
    "description": "SECTION FILE with parameter(s) NAME, SURFACE, AXES, FREQUENCY, UPDATE.",
    "scope": "source.inp"
  },
  "SECTION ORIGIN()": {
    "prefix": "*SECTION ORIGIN",
    "body": [
      "*SECTION ORIGIN"
    ],
    "description": "SECTION ORIGIN without parameter(s).",
    "scope": "source.inp"
  },
  "SECTION ORIGIN(ORIGIN)": {
    "prefix": "*SECTION ORIGIN",
    "body": [
      "*SECTION ORIGIN, ORIGIN=${1}"
    ],
    "description": "SECTION ORIGIN with parameter(s) ORIGIN.",
    "scope": "source.inp"
  },
  "SECTION POINTS()": {
    "prefix": "*SECTION POINTS",
    "body": [
      "*SECTION POINTS"
    ],
    "description": "SECTION POINTS without parameter(s).",
    "scope": "source.inp"
  },
  "SECTION PRINT(NAME, SURFACE)": {
    "prefix": "*SECTION PRINT",
    "body": [
      "*SECTION PRINT, NAME=${1}, SURFACE=${2}"
    ],
    "description": "SECTION PRINT with parameter(s) NAME, SURFACE.",
    "scope": "source.inp"
  },
  "SECTION PRINT(NAME, SURFACE, AXES, FREQUENCY, UPDATE)": {
    "prefix": "*SECTION PRINT",
    "body": [
      "*SECTION PRINT, NAME=${1}, SURFACE=${2}, AXES=${3}, FREQUENCY=${4}, UPDATE=${5}"
    ],
    "description": "SECTION PRINT with parameter(s) NAME, SURFACE, AXES, FREQUENCY, UPDATE.",
    "scope": "source.inp"
  },
  "SELECT CYCLIC SYMMETRY MODES()": {
    "prefix": "*SELECT CYCLIC SYMMETRY MODES",
    "body": [
      "*SELECT CYCLIC SYMMETRY MODES"
    ],
    "description": "SELECT CYCLIC SYMMETRY MODES without parameter(s).",
    "scope": "source.inp"
  },
  "SELECT CYCLIC SYMMETRY MODES(EVEN, NMIN, NMAX)": {
    "prefix": "*SELECT CYCLIC SYMMETRY MODES",
    "body": [
      "*SELECT CYCLIC SYMMETRY MODES, EVEN=${1}, NMIN=${2}, NMAX=${3}"
    ],
    "description": "SELECT CYCLIC SYMMETRY MODES with parameter(s) EVEN, NMIN, NMAX.",
    "scope": "source.inp"
  },
  "SELECT EIGENMODES()": {
    "prefix": "*SELECT EIGENMODES",
    "body": [
      "*SELECT EIGENMODES"
    ],
    "description": "SELECT EIGENMODES without parameter(s).",
    "scope": "source.inp"
  },
  "SELECT EIGENMODES(DEFINITION, GENERATE)": {
    "prefix": "*SELECT EIGENMODES",
    "body": [
      "*SELECT EIGENMODES, DEFINITION=${1}, GENERATE=${2}"
    ],
    "description": "SELECT EIGENMODES with parameter(s) DEFINITION, GENERATE.",
    "scope": "source.inp"
  },
  "SFILM()": {
    "prefix": "*SFILM",
    "body": [
      "*SFILM"
    ],
    "description": "SFILM without parameter(s).",
    "scope": "source.inp"
  },
  "SFILM(AMPLITUDE, FILM AMPLITUDE, OP)": {
    "prefix": "*SFILM",
    "body": [
      "*SFILM, AMPLITUDE=${1}, FILM AMPLITUDE=${2}, OP=${3}"
    ],
    "description": "SFILM with parameter(s) AMPLITUDE, FILM AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "SFLOW()": {
    "prefix": "*SFLOW",
    "body": [
      "*SFLOW"
    ],
    "description": "SFLOW without parameter(s).",
    "scope": "source.inp"
  },
  "SFLOW(AMPLITUDE, OP)": {
    "prefix": "*SFLOW",
    "body": [
      "*SFLOW, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "SFLOW with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "SHEAR CENTER()": {
    "prefix": "*SHEAR CENTER",
    "body": [
      "*SHEAR CENTER"
    ],
    "description": "SHEAR CENTER without parameter(s).",
    "scope": "source.inp"
  },
  "SHEAR FAILURE()": {
    "prefix": "*SHEAR FAILURE",
    "body": [
      "*SHEAR FAILURE"
    ],
    "description": "SHEAR FAILURE without parameter(s).",
    "scope": "source.inp"
  },
  "SHEAR FAILURE(DEPENDENCIES, ELEMENT DELETION, TYPE)": {
    "prefix": "*SHEAR FAILURE",
    "body": [
      "*SHEAR FAILURE, DEPENDENCIES=${1}, ELEMENT DELETION=${2}, TYPE=${3}"
    ],
    "description": "SHEAR FAILURE with parameter(s) DEPENDENCIES, ELEMENT DELETION, TYPE.",
    "scope": "source.inp"
  },
  "SHEAR RETENTION()": {
    "prefix": "*SHEAR RETENTION",
    "body": [
      "*SHEAR RETENTION"
    ],
    "description": "SHEAR RETENTION without parameter(s).",
    "scope": "source.inp"
  },
  "SHEAR RETENTION(DEPENDENCIES)": {
    "prefix": "*SHEAR RETENTION",
    "body": [
      "*SHEAR RETENTION, DEPENDENCIES=${1}"
    ],
    "description": "SHEAR RETENTION with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "SHEAR TEST DATA()": {
    "prefix": "*SHEAR TEST DATA",
    "body": [
      "*SHEAR TEST DATA"
    ],
    "description": "SHEAR TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "SHEAR TEST DATA(SHRINF)": {
    "prefix": "*SHEAR TEST DATA",
    "body": [
      "*SHEAR TEST DATA, SHRINF=${1}"
    ],
    "description": "SHEAR TEST DATA with parameter(s) SHRINF.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, DENSITY)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, DENSITY=${2}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, DENSITY.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, BENDING ONLY=${2}, CONTROLS=${3}, LAYUP=${4}, MEMBRANE ONLY=${5}, OFFSET=${6}, ORIENTATION=${7}, POISSON=${8}, SMEAR ALL LAYERS=${9}, STACK DIRECTION=${10}, SYMMETRIC=${11}, THICKNESS MODULUS=${12}, ZERO=${13}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, DENSITY, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, DENSITY=${2}, BENDING ONLY=${3}, CONTROLS=${4}, LAYUP=${5}, MEMBRANE ONLY=${6}, OFFSET=${7}, ORIENTATION=${8}, POISSON=${9}, SMEAR ALL LAYERS=${10}, STACK DIRECTION=${11}, SYMMETRIC=${12}, THICKNESS MODULUS=${13}, ZERO=${14}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, DENSITY, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, DEPENDENCIES)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, BENDING ONLY=${2}, CONTROLS=${3}, LAYUP=${4}, MEMBRANE ONLY=${5}, OFFSET=${6}, ORIENTATION=${7}, POISSON=${8}, SMEAR ALL LAYERS=${9}, STACK DIRECTION=${10}, SYMMETRIC=${11}, THICKNESS MODULUS=${12}, ZERO=${13}, DEPENDENCIES=${14}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, COMPOSITE, NODAL THICKNESS, SHELL THICKNESS)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, BENDING ONLY=${2}, CONTROLS=${3}, LAYUP=${4}, MEMBRANE ONLY=${5}, OFFSET=${6}, ORIENTATION=${7}, POISSON=${8}, SMEAR ALL LAYERS=${9}, STACK DIRECTION=${10}, SYMMETRIC=${11}, THICKNESS MODULUS=${12}, ZERO=${13}, COMPOSITE=${14}, NODAL THICKNESS=${15}, SHELL THICKNESS=${16}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, COMPOSITE, NODAL THICKNESS, SHELL THICKNESS.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, MATERIAL, NODAL THICKNESS, SHELL THICKNESS)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, BENDING ONLY=${2}, CONTROLS=${3}, LAYUP=${4}, MEMBRANE ONLY=${5}, OFFSET=${6}, ORIENTATION=${7}, POISSON=${8}, SMEAR ALL LAYERS=${9}, STACK DIRECTION=${10}, SYMMETRIC=${11}, THICKNESS MODULUS=${12}, ZERO=${13}, MATERIAL=${14}, NODAL THICKNESS=${15}, SHELL THICKNESS=${16}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, MATERIAL, NODAL THICKNESS, SHELL THICKNESS.",
    "scope": "source.inp"
  },
  "SHELL GENERAL SECTION(ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, USER, NODAL THICKNESS, SHELL THICKNESS, I PROPERTIES, PROPERTIES, UNSYMM, VARIABLES)": {
    "prefix": "*SHELL GENERAL SECTION",
    "body": [
      "*SHELL GENERAL SECTION, ELSET=${1}, BENDING ONLY=${2}, CONTROLS=${3}, LAYUP=${4}, MEMBRANE ONLY=${5}, OFFSET=${6}, ORIENTATION=${7}, POISSON=${8}, SMEAR ALL LAYERS=${9}, STACK DIRECTION=${10}, SYMMETRIC=${11}, THICKNESS MODULUS=${12}, ZERO=${13}, USER=${14}, NODAL THICKNESS=${15}, SHELL THICKNESS=${16}, I PROPERTIES=${17}, PROPERTIES=${18}, UNSYMM=${19}, VARIABLES=${20}"
    ],
    "description": "SHELL GENERAL SECTION with parameter(s) ELSET, BENDING ONLY, CONTROLS, LAYUP, MEMBRANE ONLY, OFFSET, ORIENTATION, POISSON, SMEAR ALL LAYERS, STACK DIRECTION, SYMMETRIC, THICKNESS MODULUS, ZERO, USER, NODAL THICKNESS, SHELL THICKNESS, I PROPERTIES, PROPERTIES, UNSYMM, VARIABLES.",
    "scope": "source.inp"
  },
  "SHELL SECTION(ELSET, COMPOSITE)": {
    "prefix": "*SHELL SECTION",
    "body": [
      "*SHELL SECTION, ELSET=${1}, COMPOSITE=${2}"
    ],
    "description": "SHELL SECTION with parameter(s) ELSET, COMPOSITE.",
    "scope": "source.inp"
  },
  "SHELL SECTION(ELSET, MATERIAL)": {
    "prefix": "*SHELL SECTION",
    "body": [
      "*SHELL SECTION, ELSET=${1}, MATERIAL=${2}"
    ],
    "description": "SHELL SECTION with parameter(s) ELSET, MATERIAL.",
    "scope": "source.inp"
  },
  "SHELL SECTION(ELSET, COMPOSITE, CONTROLS, DENSITY, LAYUP, NODAL THICKNESS, OFFSET, ORIENTATION, POISSON, SECTION INTEGRATION, SHELL THICKNESS, STACK DIRECTION, SYMMETRIC, TEMPERATURE, THICKNESS MODULUS)": {
    "prefix": "*SHELL SECTION",
    "body": [
      "*SHELL SECTION, ELSET=${1}, COMPOSITE=${2}, CONTROLS=${3}, DENSITY=${4}, LAYUP=${5}, NODAL THICKNESS=${6}, OFFSET=${7}, ORIENTATION=${8}, POISSON=${9}, SECTION INTEGRATION=${10}, SHELL THICKNESS=${11}, STACK DIRECTION=${12}, SYMMETRIC=${13}, TEMPERATURE=${14}, THICKNESS MODULUS=${15}"
    ],
    "description": "SHELL SECTION with parameter(s) ELSET, COMPOSITE, CONTROLS, DENSITY, LAYUP, NODAL THICKNESS, OFFSET, ORIENTATION, POISSON, SECTION INTEGRATION, SHELL THICKNESS, STACK DIRECTION, SYMMETRIC, TEMPERATURE, THICKNESS MODULUS.",
    "scope": "source.inp"
  },
  "SHELL SECTION(ELSET, MATERIAL, CONTROLS, DENSITY, LAYUP, NODAL THICKNESS, OFFSET, ORIENTATION, POISSON, SECTION INTEGRATION, SHELL THICKNESS, STACK DIRECTION, SYMMETRIC, TEMPERATURE, THICKNESS MODULUS)": {
    "prefix": "*SHELL SECTION",
    "body": [
      "*SHELL SECTION, ELSET=${1}, MATERIAL=${2}, CONTROLS=${3}, DENSITY=${4}, LAYUP=${5}, NODAL THICKNESS=${6}, OFFSET=${7}, ORIENTATION=${8}, POISSON=${9}, SECTION INTEGRATION=${10}, SHELL THICKNESS=${11}, STACK DIRECTION=${12}, SYMMETRIC=${13}, TEMPERATURE=${14}, THICKNESS MODULUS=${15}"
    ],
    "description": "SHELL SECTION with parameter(s) ELSET, MATERIAL, CONTROLS, DENSITY, LAYUP, NODAL THICKNESS, OFFSET, ORIENTATION, POISSON, SECTION INTEGRATION, SHELL THICKNESS, STACK DIRECTION, SYMMETRIC, TEMPERATURE, THICKNESS MODULUS.",
    "scope": "source.inp"
  },
  "SHELL TO SOLID COUPLING(CONSTRAINT NAME)": {
    "prefix": "*SHELL TO SOLID COUPLING",
    "body": [
      "*SHELL TO SOLID COUPLING, CONSTRAINT NAME=${1}"
    ],
    "description": "SHELL TO SOLID COUPLING with parameter(s) CONSTRAINT NAME.",
    "scope": "source.inp"
  },
  "SHELL TO SOLID COUPLING(CONSTRAINT NAME, INFLUENCE DISTANCE, POSITION TOLERANCE)": {
    "prefix": "*SHELL TO SOLID COUPLING",
    "body": [
      "*SHELL TO SOLID COUPLING, CONSTRAINT NAME=${1}, INFLUENCE DISTANCE=${2}, POSITION TOLERANCE=${3}"
    ],
    "description": "SHELL TO SOLID COUPLING with parameter(s) CONSTRAINT NAME, INFLUENCE DISTANCE, POSITION TOLERANCE.",
    "scope": "source.inp"
  },
  "SIMPEDANCE(PROPERTY)": {
    "prefix": "*SIMPEDANCE",
    "body": [
      "*SIMPEDANCE, PROPERTY=${1}"
    ],
    "description": "SIMPEDANCE with parameter(s) PROPERTY.",
    "scope": "source.inp"
  },
  "SIMPEDANCE(NONREFLECTING)": {
    "prefix": "*SIMPEDANCE",
    "body": [
      "*SIMPEDANCE, NONREFLECTING=${1}"
    ],
    "description": "SIMPEDANCE with parameter(s) NONREFLECTING.",
    "scope": "source.inp"
  },
  "SIMPEDANCE(PROPERTY, OP)": {
    "prefix": "*SIMPEDANCE",
    "body": [
      "*SIMPEDANCE, PROPERTY=${1}, OP=${2}"
    ],
    "description": "SIMPEDANCE with parameter(s) PROPERTY, OP.",
    "scope": "source.inp"
  },
  "SIMPEDANCE(NONREFLECTING, OP)": {
    "prefix": "*SIMPEDANCE",
    "body": [
      "*SIMPEDANCE, NONREFLECTING=${1}, OP=${2}"
    ],
    "description": "SIMPEDANCE with parameter(s) NONREFLECTING, OP.",
    "scope": "source.inp"
  },
  "SIMPLE SHEAR TEST DATA()": {
    "prefix": "*SIMPLE SHEAR TEST DATA",
    "body": [
      "*SIMPLE SHEAR TEST DATA"
    ],
    "description": "SIMPLE SHEAR TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "SLIDE LINE(ELSET, TYPE)": {
    "prefix": "*SLIDE LINE",
    "body": [
      "*SLIDE LINE, ELSET=${1}, TYPE=${2}"
    ],
    "description": "SLIDE LINE with parameter(s) ELSET, TYPE.",
    "scope": "source.inp"
  },
  "SLIDE LINE(ELSET, TYPE, EXTENSION ZONE, GENERATE, SMOOTH)": {
    "prefix": "*SLIDE LINE",
    "body": [
      "*SLIDE LINE, ELSET=${1}, TYPE=${2}, EXTENSION ZONE=${3}, GENERATE=${4}, SMOOTH=${5}"
    ],
    "description": "SLIDE LINE with parameter(s) ELSET, TYPE, EXTENSION ZONE, GENERATE, SMOOTH.",
    "scope": "source.inp"
  },
  "SLOAD()": {
    "prefix": "*SLOAD",
    "body": [
      "*SLOAD"
    ],
    "description": "SLOAD without parameter(s).",
    "scope": "source.inp"
  },
  "SLOAD(AMPLITUDE, OP)": {
    "prefix": "*SLOAD",
    "body": [
      "*SLOAD, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "SLOAD with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "SOILS()": {
    "prefix": "*SOILS",
    "body": [
      "*SOILS"
    ],
    "description": "SOILS without parameter(s).",
    "scope": "source.inp"
  },
  "SOILS(ALLSDTOL, CETOL, CONSOLIDATION, CONTINUE, DELTMX, END, CREEP, FACTOR, HEAT, STABILIZE, UTOL)": {
    "prefix": "*SOILS",
    "body": [
      "*SOILS, ALLSDTOL=${1}, CETOL=${2}, CONSOLIDATION=${3}, CONTINUE=${4}, DELTMX=${5}, END=${6}, CREEP=${7}, FACTOR=${8}, HEAT=${9}, STABILIZE=${10}, UTOL=${11}"
    ],
    "description": "SOILS with parameter(s) ALLSDTOL, CETOL, CONSOLIDATION, CONTINUE, DELTMX, END, CREEP, FACTOR, HEAT, STABILIZE, UTOL.",
    "scope": "source.inp"
  },
  "SOLID SECTION(COMPOSITE, ELSET, MATERIAL, REF NODE)": {
    "prefix": "*SOLID SECTION",
    "body": [
      "*SOLID SECTION, COMPOSITE=${1}, ELSET=${2}, MATERIAL=${3}, REF NODE=${4}"
    ],
    "description": "SOLID SECTION with parameter(s) COMPOSITE, ELSET, MATERIAL, REF NODE.",
    "scope": "source.inp"
  },
  "SOLID SECTION(COMPOSITE, ELSET, MATERIAL, REF NODE, ORIENTATION)": {
    "prefix": "*SOLID SECTION",
    "body": [
      "*SOLID SECTION, COMPOSITE=${1}, ELSET=${2}, MATERIAL=${3}, REF NODE=${4}, ORIENTATION=${5}"
    ],
    "description": "SOLID SECTION with parameter(s) COMPOSITE, ELSET, MATERIAL, REF NODE, ORIENTATION.",
    "scope": "source.inp"
  },
  "SOLID SECTION(COMPOSITE, ELSET, MATERIAL, REF NODE, CONTROLS, LAYUP, ORDER, STACK DIRECTION, SYMMETRIC)": {
    "prefix": "*SOLID SECTION",
    "body": [
      "*SOLID SECTION, COMPOSITE=${1}, ELSET=${2}, MATERIAL=${3}, REF NODE=${4}, CONTROLS=${5}, LAYUP=${6}, ORDER=${7}, STACK DIRECTION=${8}, SYMMETRIC=${9}"
    ],
    "description": "SOLID SECTION with parameter(s) COMPOSITE, ELSET, MATERIAL, REF NODE, CONTROLS, LAYUP, ORDER, STACK DIRECTION, SYMMETRIC.",
    "scope": "source.inp"
  },
  "SOLID SECTION(COMPOSITE, ELSET, MATERIAL, REF NODE, ORIENTATION, CONTROLS, LAYUP, ORDER, STACK DIRECTION, SYMMETRIC)": {
    "prefix": "*SOLID SECTION",
    "body": [
      "*SOLID SECTION, COMPOSITE=${1}, ELSET=${2}, MATERIAL=${3}, REF NODE=${4}, ORIENTATION=${5}, CONTROLS=${6}, LAYUP=${7}, ORDER=${8}, STACK DIRECTION=${9}, SYMMETRIC=${10}"
    ],
    "description": "SOLID SECTION with parameter(s) COMPOSITE, ELSET, MATERIAL, REF NODE, ORIENTATION, CONTROLS, LAYUP, ORDER, STACK DIRECTION, SYMMETRIC.",
    "scope": "source.inp"
  },
  "SOLUBILITY()": {
    "prefix": "*SOLUBILITY",
    "body": [
      "*SOLUBILITY"
    ],
    "description": "SOLUBILITY without parameter(s).",
    "scope": "source.inp"
  },
  "SOLUBILITY(DEPENDENCIES)": {
    "prefix": "*SOLUBILITY",
    "body": [
      "*SOLUBILITY, DEPENDENCIES=${1}"
    ],
    "description": "SOLUBILITY with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "SOLUTION TECHNIQUE(TYPE)": {
    "prefix": "*SOLUTION TECHNIQUE",
    "body": [
      "*SOLUTION TECHNIQUE, TYPE=${1}"
    ],
    "description": "SOLUTION TECHNIQUE with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "SOLUTION TECHNIQUE(TYPE, REFORM KERNEL)": {
    "prefix": "*SOLUTION TECHNIQUE",
    "body": [
      "*SOLUTION TECHNIQUE, TYPE=${1}, REFORM KERNEL=${2}"
    ],
    "description": "SOLUTION TECHNIQUE with parameter(s) TYPE, REFORM KERNEL.",
    "scope": "source.inp"
  },
  "SOLVER CONTROLS()": {
    "prefix": "*SOLVER CONTROLS",
    "body": [
      "*SOLVER CONTROLS"
    ],
    "description": "SOLVER CONTROLS without parameter(s).",
    "scope": "source.inp"
  },
  "SOLVER CONTROLS(CONSTRAINT OPTIMIZATION, RESET)": {
    "prefix": "*SOLVER CONTROLS",
    "body": [
      "*SOLVER CONTROLS, CONSTRAINT OPTIMIZATION=${1}, RESET=${2}"
    ],
    "description": "SOLVER CONTROLS with parameter(s) CONSTRAINT OPTIMIZATION, RESET.",
    "scope": "source.inp"
  },
  "SORPTION()": {
    "prefix": "*SORPTION",
    "body": [
      "*SORPTION"
    ],
    "description": "SORPTION without parameter(s).",
    "scope": "source.inp"
  },
  "SORPTION(LAW, TYPE)": {
    "prefix": "*SORPTION",
    "body": [
      "*SORPTION, LAW=${1}, TYPE=${2}"
    ],
    "description": "SORPTION with parameter(s) LAW, TYPE.",
    "scope": "source.inp"
  },
  "SPECIFIC HEAT()": {
    "prefix": "*SPECIFIC HEAT",
    "body": [
      "*SPECIFIC HEAT"
    ],
    "description": "SPECIFIC HEAT without parameter(s).",
    "scope": "source.inp"
  },
  "SPECIFIC HEAT(DEPENDENCIES, PORE FLUID, TYPE)": {
    "prefix": "*SPECIFIC HEAT",
    "body": [
      "*SPECIFIC HEAT, DEPENDENCIES=${1}, PORE FLUID=${2}, TYPE=${3}"
    ],
    "description": "SPECIFIC HEAT with parameter(s) DEPENDENCIES, PORE FLUID, TYPE.",
    "scope": "source.inp"
  },
  "SPECTRUM(NAME)": {
    "prefix": "*SPECTRUM",
    "body": [
      "*SPECTRUM, NAME=${1}"
    ],
    "description": "SPECTRUM with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SPECTRUM(NAME, G, INPUT, TYPE)": {
    "prefix": "*SPECTRUM",
    "body": [
      "*SPECTRUM, NAME=${1}, G=${2}, INPUT=${3}, TYPE=${4}"
    ],
    "description": "SPECTRUM with parameter(s) NAME, G, INPUT, TYPE.",
    "scope": "source.inp"
  },
  "SPECTRUM(CREATE, AMPLITUDE, NAME, TIME INCREMENT)": {
    "prefix": "*SPECTRUM",
    "body": [
      "*SPECTRUM, CREATE=${1}, AMPLITUDE=${2}, NAME=${3}, TIME INCREMENT=${4}"
    ],
    "description": "SPECTRUM with parameter(s) CREATE, AMPLITUDE, NAME, TIME INCREMENT.",
    "scope": "source.inp"
  },
  "SPECTRUM(CREATE, AMPLITUDE, NAME, TIME INCREMENT, G, TYPE, ABSOLUTE, RELATIVE, DAMPING GENERATE, EVENT TYPE, FILE)": {
    "prefix": "*SPECTRUM",
    "body": [
      "*SPECTRUM, CREATE=${1}, AMPLITUDE=${2}, NAME=${3}, TIME INCREMENT=${4}, G=${5}, TYPE=${6}, ABSOLUTE=${7}, RELATIVE=${8}, DAMPING GENERATE=${9}, EVENT TYPE=${10}, FILE=${11}"
    ],
    "description": "SPECTRUM with parameter(s) CREATE, AMPLITUDE, NAME, TIME INCREMENT, G, TYPE, ABSOLUTE, RELATIVE, DAMPING GENERATE, EVENT TYPE, FILE.",
    "scope": "source.inp"
  },
  "SPRING()": {
    "prefix": "*SPRING",
    "body": [
      "*SPRING"
    ],
    "description": "SPRING without parameter(s).",
    "scope": "source.inp"
  },
  "SPRING(ELSET)": {
    "prefix": "*SPRING",
    "body": [
      "*SPRING, ELSET=${1}"
    ],
    "description": "SPRING with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "SPRING(COMPLEX STIFFNESS, DEPENDENCIES, NONLINEAR, ORIENTATION, RTOL)": {
    "prefix": "*SPRING",
    "body": [
      "*SPRING, COMPLEX STIFFNESS=${1}, DEPENDENCIES=${2}, NONLINEAR=${3}, ORIENTATION=${4}, RTOL=${5}"
    ],
    "description": "SPRING with parameter(s) COMPLEX STIFFNESS, DEPENDENCIES, NONLINEAR, ORIENTATION, RTOL.",
    "scope": "source.inp"
  },
  "SPRING(ELSET, COMPLEX STIFFNESS, DEPENDENCIES, NONLINEAR, ORIENTATION, RTOL)": {
    "prefix": "*SPRING",
    "body": [
      "*SPRING, ELSET=${1}, COMPLEX STIFFNESS=${2}, DEPENDENCIES=${3}, NONLINEAR=${4}, ORIENTATION=${5}, RTOL=${6}"
    ],
    "description": "SPRING with parameter(s) ELSET, COMPLEX STIFFNESS, DEPENDENCIES, NONLINEAR, ORIENTATION, RTOL.",
    "scope": "source.inp"
  },
  "SRADIATE()": {
    "prefix": "*SRADIATE",
    "body": [
      "*SRADIATE"
    ],
    "description": "SRADIATE without parameter(s).",
    "scope": "source.inp"
  },
  "SRADIATE(AMPLITUDE, OP)": {
    "prefix": "*SRADIATE",
    "body": [
      "*SRADIATE, AMPLITUDE=${1}, OP=${2}"
    ],
    "description": "SRADIATE with parameter(s) AMPLITUDE, OP.",
    "scope": "source.inp"
  },
  "STATIC()": {
    "prefix": "*STATIC",
    "body": [
      "*STATIC"
    ],
    "description": "STATIC without parameter(s).",
    "scope": "source.inp"
  },
  "STATIC(ADIABATIC, ALLSDTOL, CONTINUE, DIRECT, FACTOR, FULLY PLASTIC, LONG TERM, RIKS, STABILIZE)": {
    "prefix": "*STATIC",
    "body": [
      "*STATIC, ADIABATIC=${1}, ALLSDTOL=${2}, CONTINUE=${3}, DIRECT=${4}, FACTOR=${5}, FULLY PLASTIC=${6}, LONG TERM=${7}, RIKS=${8}, STABILIZE=${9}"
    ],
    "description": "STATIC with parameter(s) ADIABATIC, ALLSDTOL, CONTINUE, DIRECT, FACTOR, FULLY PLASTIC, LONG TERM, RIKS, STABILIZE.",
    "scope": "source.inp"
  },
  "STEADY STATE CRITERIA()": {
    "prefix": "*STEADY STATE CRITERIA",
    "body": [
      "*STEADY STATE CRITERIA"
    ],
    "description": "STEADY STATE CRITERIA without parameter(s).",
    "scope": "source.inp"
  },
  "STEADY STATE DETECTION(ELSET, SAMPLING)": {
    "prefix": "*STEADY STATE DETECTION",
    "body": [
      "*STEADY STATE DETECTION, ELSET=${1}, SAMPLING=${2}"
    ],
    "description": "STEADY STATE DETECTION with parameter(s) ELSET, SAMPLING.",
    "scope": "source.inp"
  },
  "STEADY STATE DYNAMICS()": {
    "prefix": "*STEADY STATE DYNAMICS",
    "body": [
      "*STEADY STATE DYNAMICS"
    ],
    "description": "STEADY STATE DYNAMICS without parameter(s).",
    "scope": "source.inp"
  },
  "STEADY STATE DYNAMICS(DAMPING CHANGE, FREQUENCY SCALE, FRICTION DAMPING, INTERVAL, REAL ONLY, STIFFNESS CHANGE)": {
    "prefix": "*STEADY STATE DYNAMICS",
    "body": [
      "*STEADY STATE DYNAMICS, DAMPING CHANGE=${1}, FREQUENCY SCALE=${2}, FRICTION DAMPING=${3}, INTERVAL=${4}, REAL ONLY=${5}, STIFFNESS CHANGE=${6}"
    ],
    "description": "STEADY STATE DYNAMICS with parameter(s) DAMPING CHANGE, FREQUENCY SCALE, FRICTION DAMPING, INTERVAL, REAL ONLY, STIFFNESS CHANGE.",
    "scope": "source.inp"
  },
  "STEADY STATE DYNAMICS(DAMPING CHANGE, FREQUENCY SCALE, FRICTION DAMPING, INTERVAL, REAL ONLY, STIFFNESS CHANGE, SUBSPACE PROJECTION)": {
    "prefix": "*STEADY STATE DYNAMICS",
    "body": [
      "*STEADY STATE DYNAMICS, DAMPING CHANGE=${1}, FREQUENCY SCALE=${2}, FRICTION DAMPING=${3}, INTERVAL=${4}, REAL ONLY=${5}, STIFFNESS CHANGE=${6}, SUBSPACE PROJECTION=${7}"
    ],
    "description": "STEADY STATE DYNAMICS with parameter(s) DAMPING CHANGE, FREQUENCY SCALE, FRICTION DAMPING, INTERVAL, REAL ONLY, STIFFNESS CHANGE, SUBSPACE PROJECTION.",
    "scope": "source.inp"
  },
  "STEADY STATE DYNAMICS(DAMPING CHANGE, FREQUENCY SCALE, FRICTION DAMPING, INTERVAL, REAL ONLY, STIFFNESS CHANGE, DIRECT)": {
    "prefix": "*STEADY STATE DYNAMICS",
    "body": [
      "*STEADY STATE DYNAMICS, DAMPING CHANGE=${1}, FREQUENCY SCALE=${2}, FRICTION DAMPING=${3}, INTERVAL=${4}, REAL ONLY=${5}, STIFFNESS CHANGE=${6}, DIRECT=${7}"
    ],
    "description": "STEADY STATE DYNAMICS with parameter(s) DAMPING CHANGE, FREQUENCY SCALE, FRICTION DAMPING, INTERVAL, REAL ONLY, STIFFNESS CHANGE, DIRECT.",
    "scope": "source.inp"
  },
  "STEADY STATE TRANSPORT()": {
    "prefix": "*STEADY STATE TRANSPORT",
    "body": [
      "*STEADY STATE TRANSPORT"
    ],
    "description": "STEADY STATE TRANSPORT without parameter(s).",
    "scope": "source.inp"
  },
  "STEADY STATE TRANSPORT(ALLSDTOL, CONTINUE, DIRECT, ELSET, FACTOR, INERTIA, LONG TERM, MULLINS, PASS BY PASS, STABILIZE)": {
    "prefix": "*STEADY STATE TRANSPORT",
    "body": [
      "*STEADY STATE TRANSPORT, ALLSDTOL=${1}, CONTINUE=${2}, DIRECT=${3}, ELSET=${4}, FACTOR=${5}, INERTIA=${6}, LONG TERM=${7}, MULLINS=${8}, PASS BY PASS=${9}, STABILIZE=${10}"
    ],
    "description": "STEADY STATE TRANSPORT with parameter(s) ALLSDTOL, CONTINUE, DIRECT, ELSET, FACTOR, INERTIA, LONG TERM, MULLINS, PASS BY PASS, STABILIZE.",
    "scope": "source.inp"
  },
  "STEP()": {
    "prefix": "*STEP",
    "body": [
      "*STEP"
    ],
    "description": "STEP without parameter(s).",
    "scope": "source.inp"
  },
  "STEP(NAME)": {
    "prefix": "*STEP",
    "body": [
      "*STEP, NAME=${1}"
    ],
    "description": "STEP with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "STEP(NAME, NLGEOM)": {
    "prefix": "*STEP",
    "body": [
      "*STEP, NAME=${1}, NLGEOM=${2}"
    ],
    "description": "STEP with parameter(s) NAME, NLGEOM.",
    "scope": "source.inp"
  },
  "STEP(AMPLITUDE, CONVERT SDI, DSA, EXTRAPOLATION, INC, NAME, NLGEOM, PERTURBATION, SOLVER, UNSYMM)": {
    "prefix": "*STEP",
    "body": [
      "*STEP, AMPLITUDE=${1}, CONVERT SDI=${2}, DSA=${3}, EXTRAPOLATION=${4}, INC=${5}, NAME=${6}, NLGEOM=${7}, PERTURBATION=${8}, SOLVER=${9}, UNSYMM=${10}"
    ],
    "description": "STEP with parameter(s) AMPLITUDE, CONVERT SDI, DSA, EXTRAPOLATION, INC, NAME, NLGEOM, PERTURBATION, SOLVER, UNSYMM.",
    "scope": "source.inp"
  },
  "SUBCYCLING(ELSET)": {
    "prefix": "*SUBCYCLING",
    "body": [
      "*SUBCYCLING, ELSET=${1}"
    ],
    "description": "SUBCYCLING with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "SUBMODEL()": {
    "prefix": "*SUBMODEL",
    "body": [
      "*SUBMODEL"
    ],
    "description": "SUBMODEL without parameter(s).",
    "scope": "source.inp"
  },
  "SUBMODEL(SHELL THICKNESS)": {
    "prefix": "*SUBMODEL",
    "body": [
      "*SUBMODEL, SHELL THICKNESS=${1}"
    ],
    "description": "SUBMODEL with parameter(s) SHELL THICKNESS.",
    "scope": "source.inp"
  },
  "SUBMODEL(ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, ACOUSTIC TO STRUCTURE)": {
    "prefix": "*SUBMODEL",
    "body": [
      "*SUBMODEL, ABSOLUTE EXTERIOR TOLERANCE=${1}, EXTERIOR TOLERANCE=${2}, GLOBAL ELSET=${3}, INTERSECTION ONLY=${4}, TYPE=${5}, ACOUSTIC TO STRUCTURE=${6}"
    ],
    "description": "SUBMODEL with parameter(s) ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, ACOUSTIC TO STRUCTURE.",
    "scope": "source.inp"
  },
  "SUBMODEL(ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, SHELL TO SOLID)": {
    "prefix": "*SUBMODEL",
    "body": [
      "*SUBMODEL, ABSOLUTE EXTERIOR TOLERANCE=${1}, EXTERIOR TOLERANCE=${2}, GLOBAL ELSET=${3}, INTERSECTION ONLY=${4}, TYPE=${5}, SHELL TO SOLID=${6}"
    ],
    "description": "SUBMODEL with parameter(s) ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, SHELL TO SOLID.",
    "scope": "source.inp"
  },
  "SUBMODEL(SHELL THICKNESS, ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, ACOUSTIC TO STRUCTURE)": {
    "prefix": "*SUBMODEL",
    "body": [
      "*SUBMODEL, SHELL THICKNESS=${1}, ABSOLUTE EXTERIOR TOLERANCE=${2}, EXTERIOR TOLERANCE=${3}, GLOBAL ELSET=${4}, INTERSECTION ONLY=${5}, TYPE=${6}, ACOUSTIC TO STRUCTURE=${7}"
    ],
    "description": "SUBMODEL with parameter(s) SHELL THICKNESS, ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, ACOUSTIC TO STRUCTURE.",
    "scope": "source.inp"
  },
  "SUBMODEL(SHELL THICKNESS, ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, SHELL TO SOLID)": {
    "prefix": "*SUBMODEL",
    "body": [
      "*SUBMODEL, SHELL THICKNESS=${1}, ABSOLUTE EXTERIOR TOLERANCE=${2}, EXTERIOR TOLERANCE=${3}, GLOBAL ELSET=${4}, INTERSECTION ONLY=${5}, TYPE=${6}, SHELL TO SOLID=${7}"
    ],
    "description": "SUBMODEL with parameter(s) SHELL THICKNESS, ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, GLOBAL ELSET, INTERSECTION ONLY, TYPE, SHELL TO SOLID.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE COPY(NEW TYPE, OLD TYPE)": {
    "prefix": "*SUBSTRUCTURE COPY",
    "body": [
      "*SUBSTRUCTURE COPY, NEW TYPE=${1}, OLD TYPE=${2}"
    ],
    "description": "SUBSTRUCTURE COPY with parameter(s) NEW TYPE, OLD TYPE.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE COPY(NEW TYPE, OLD TYPE, NEW LIBRARY, OLD LIBRARY)": {
    "prefix": "*SUBSTRUCTURE COPY",
    "body": [
      "*SUBSTRUCTURE COPY, NEW TYPE=${1}, OLD TYPE=${2}, NEW LIBRARY=${3}, OLD LIBRARY=${4}"
    ],
    "description": "SUBSTRUCTURE COPY with parameter(s) NEW TYPE, OLD TYPE, NEW LIBRARY, OLD LIBRARY.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE DELETE(TYPE)": {
    "prefix": "*SUBSTRUCTURE DELETE",
    "body": [
      "*SUBSTRUCTURE DELETE, TYPE=${1}"
    ],
    "description": "SUBSTRUCTURE DELETE with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE DELETE(TYPE, LIBRARY)": {
    "prefix": "*SUBSTRUCTURE DELETE",
    "body": [
      "*SUBSTRUCTURE DELETE, TYPE=${1}, LIBRARY=${2}"
    ],
    "description": "SUBSTRUCTURE DELETE with parameter(s) TYPE, LIBRARY.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE DIRECTORY(LIBRARY)": {
    "prefix": "*SUBSTRUCTURE DIRECTORY",
    "body": [
      "*SUBSTRUCTURE DIRECTORY, LIBRARY=${1}"
    ],
    "description": "SUBSTRUCTURE DIRECTORY with parameter(s) LIBRARY.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE GENERATE(TYPE)": {
    "prefix": "*SUBSTRUCTURE GENERATE",
    "body": [
      "*SUBSTRUCTURE GENERATE, TYPE=${1}"
    ],
    "description": "SUBSTRUCTURE GENERATE with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE GENERATE(TYPE, ELSET, GRAVITY LOAD, LIBRARY, MASS MATRIX, NSET, OVERWRITE, PROPERTY EVALUATION, RECOVERY MATRIX, STRUCTURAL DAMPING MATRIX, VISCOUS DAMPING MATRIX)": {
    "prefix": "*SUBSTRUCTURE GENERATE",
    "body": [
      "*SUBSTRUCTURE GENERATE, TYPE=${1}, ELSET=${2}, GRAVITY LOAD=${3}, LIBRARY=${4}, MASS MATRIX=${5}, NSET=${6}, OVERWRITE=${7}, PROPERTY EVALUATION=${8}, RECOVERY MATRIX=${9}, STRUCTURAL DAMPING MATRIX=${10}, VISCOUS DAMPING MATRIX=${11}"
    ],
    "description": "SUBSTRUCTURE GENERATE with parameter(s) TYPE, ELSET, GRAVITY LOAD, LIBRARY, MASS MATRIX, NSET, OVERWRITE, PROPERTY EVALUATION, RECOVERY MATRIX, STRUCTURAL DAMPING MATRIX, VISCOUS DAMPING MATRIX.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE LOAD CASE(NAME)": {
    "prefix": "*SUBSTRUCTURE LOAD CASE",
    "body": [
      "*SUBSTRUCTURE LOAD CASE, NAME=${1}"
    ],
    "description": "SUBSTRUCTURE LOAD CASE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE MATRIX OUTPUT()": {
    "prefix": "*SUBSTRUCTURE MATRIX OUTPUT",
    "body": [
      "*SUBSTRUCTURE MATRIX OUTPUT"
    ],
    "description": "SUBSTRUCTURE MATRIX OUTPUT without parameter(s).",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE MATRIX OUTPUT(FILE NAME, GRAVITY LOAD, MASS, OUTPUT FILE, RECOVERY MATRIX, SLOAD, STIFFNESS)": {
    "prefix": "*SUBSTRUCTURE MATRIX OUTPUT",
    "body": [
      "*SUBSTRUCTURE MATRIX OUTPUT, FILE NAME=${1}, GRAVITY LOAD=${2}, MASS=${3}, OUTPUT FILE=${4}, RECOVERY MATRIX=${5}, SLOAD=${6}, STIFFNESS=${7}"
    ],
    "description": "SUBSTRUCTURE MATRIX OUTPUT with parameter(s) FILE NAME, GRAVITY LOAD, MASS, OUTPUT FILE, RECOVERY MATRIX, SLOAD, STIFFNESS.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE PATH(ENTER ELEMENT)": {
    "prefix": "*SUBSTRUCTURE PATH",
    "body": [
      "*SUBSTRUCTURE PATH, ENTER ELEMENT=${1}"
    ],
    "description": "SUBSTRUCTURE PATH with parameter(s) ENTER ELEMENT.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE PATH(LEAVE)": {
    "prefix": "*SUBSTRUCTURE PATH",
    "body": [
      "*SUBSTRUCTURE PATH, LEAVE=${1}"
    ],
    "description": "SUBSTRUCTURE PATH with parameter(s) LEAVE.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE PATH(ENTER ELEMENT, LEAVE)": {
    "prefix": "*SUBSTRUCTURE PATH",
    "body": [
      "*SUBSTRUCTURE PATH, ENTER ELEMENT=${1}, LEAVE=${2}"
    ],
    "description": "SUBSTRUCTURE PATH with parameter(s) ENTER ELEMENT, LEAVE.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE PROPERTY(ELSET)": {
    "prefix": "*SUBSTRUCTURE PROPERTY",
    "body": [
      "*SUBSTRUCTURE PROPERTY, ELSET=${1}"
    ],
    "description": "SUBSTRUCTURE PROPERTY with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "SUBSTRUCTURE PROPERTY(ELSET, POSITION TOL)": {
    "prefix": "*SUBSTRUCTURE PROPERTY",
    "body": [
      "*SUBSTRUCTURE PROPERTY, ELSET=${1}, POSITION TOL=${2}"
    ],
    "description": "SUBSTRUCTURE PROPERTY with parameter(s) ELSET, POSITION TOL.",
    "scope": "source.inp"
  },
  "SURFACE BEHAVIOR()": {
    "prefix": "*SURFACE BEHAVIOR",
    "body": [
      "*SURFACE BEHAVIOR"
    ],
    "description": "SURFACE BEHAVIOR without parameter(s).",
    "scope": "source.inp"
  },
  "SURFACE BEHAVIOR(NO SEPARATION, PRESSURE-OVERCLOSURE, AUGMENTED LAGRANGE)": {
    "prefix": "*SURFACE BEHAVIOR",
    "body": [
      "*SURFACE BEHAVIOR, NO SEPARATION=${1}, PRESSURE-OVERCLOSURE=${2}, AUGMENTED LAGRANGE=${3}"
    ],
    "description": "SURFACE BEHAVIOR with parameter(s) NO SEPARATION, PRESSURE-OVERCLOSURE, AUGMENTED LAGRANGE.",
    "scope": "source.inp"
  },
  "SURFACE BEHAVIOR(NO SEPARATION, PRESSURE-OVERCLOSURE, PENALTY)": {
    "prefix": "*SURFACE BEHAVIOR",
    "body": [
      "*SURFACE BEHAVIOR, NO SEPARATION=${1}, PRESSURE-OVERCLOSURE=${2}, PENALTY=${3}"
    ],
    "description": "SURFACE BEHAVIOR with parameter(s) NO SEPARATION, PRESSURE-OVERCLOSURE, PENALTY.",
    "scope": "source.inp"
  },
  "SURFACE BEHAVIOR(NO SEPARATION, PRESSURE-OVERCLOSURE, DIRECT)": {
    "prefix": "*SURFACE BEHAVIOR",
    "body": [
      "*SURFACE BEHAVIOR, NO SEPARATION=${1}, PRESSURE-OVERCLOSURE=${2}, DIRECT=${3}"
    ],
    "description": "SURFACE BEHAVIOR with parameter(s) NO SEPARATION, PRESSURE-OVERCLOSURE, DIRECT.",
    "scope": "source.inp"
  },
  "SURFACE FLAW(SIDE)": {
    "prefix": "*SURFACE FLAW",
    "body": [
      "*SURFACE FLAW, SIDE=${1}"
    ],
    "description": "SURFACE FLAW with parameter(s) SIDE.",
    "scope": "source.inp"
  },
  "SURFACE FLAW(SIDE, INPUT)": {
    "prefix": "*SURFACE FLAW",
    "body": [
      "*SURFACE FLAW, SIDE=${1}, INPUT=${2}"
    ],
    "description": "SURFACE FLAW with parameter(s) SIDE, INPUT.",
    "scope": "source.inp"
  },
  "SURFACE INTERACTION(NAME)": {
    "prefix": "*SURFACE INTERACTION",
    "body": [
      "*SURFACE INTERACTION, NAME=${1}"
    ],
    "description": "SURFACE INTERACTION with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SURFACE INTERACTION(NAME, DEPVAR, PAD THICKNESS, PROPERTIES, TRACKING THICKNESS, UNSYMM, USER)": {
    "prefix": "*SURFACE INTERACTION",
    "body": [
      "*SURFACE INTERACTION, NAME=${1}, DEPVAR=${2}, PAD THICKNESS=${3}, PROPERTIES=${4}, TRACKING THICKNESS=${5}, UNSYMM=${6}, USER=${7}"
    ],
    "description": "SURFACE INTERACTION with parameter(s) NAME, DEPVAR, PAD THICKNESS, PROPERTIES, TRACKING THICKNESS, UNSYMM, USER.",
    "scope": "source.inp"
  },
  "SURFACE OUTPUT(SURFACE)": {
    "prefix": "*SURFACE OUTPUT",
    "body": [
      "*SURFACE OUTPUT, SURFACE=${1}"
    ],
    "description": "SURFACE OUTPUT with parameter(s) SURFACE.",
    "scope": "source.inp"
  },
  "SURFACE PROPERTY ASSIGNMENT(PROPERTY)": {
    "prefix": "*SURFACE PROPERTY ASSIGNMENT",
    "body": [
      "*SURFACE PROPERTY ASSIGNMENT, PROPERTY=${1}"
    ],
    "description": "SURFACE PROPERTY ASSIGNMENT with parameter(s) PROPERTY.",
    "scope": "source.inp"
  },
  "SURFACE PROPERTY(NAME)": {
    "prefix": "*SURFACE PROPERTY",
    "body": [
      "*SURFACE PROPERTY, NAME=${1}"
    ],
    "description": "SURFACE PROPERTY with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SURFACE SECTION(ELSET)": {
    "prefix": "*SURFACE SECTION",
    "body": [
      "*SURFACE SECTION, ELSET=${1}"
    ],
    "description": "SURFACE SECTION with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "SURFACE SECTION(ELSET, DENSITY)": {
    "prefix": "*SURFACE SECTION",
    "body": [
      "*SURFACE SECTION, ELSET=${1}, DENSITY=${2}"
    ],
    "description": "SURFACE SECTION with parameter(s) ELSET, DENSITY.",
    "scope": "source.inp"
  },
  "SURFACE SMOOTHING(NAME)": {
    "prefix": "*SURFACE SMOOTHING",
    "body": [
      "*SURFACE SMOOTHING, NAME=${1}"
    ],
    "description": "SURFACE SMOOTHING with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SURFACE(NAME)": {
    "prefix": "*SURFACE",
    "body": [
      "*SURFACE, NAME=${1}"
    ],
    "description": "SURFACE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "SURFACE(NAME, PROPERTY)": {
    "prefix": "*SURFACE",
    "body": [
      "*SURFACE, NAME=${1}, PROPERTY=${2}"
    ],
    "description": "SURFACE with parameter(s) NAME, PROPERTY.",
    "scope": "source.inp"
  },
  "SURFACE(NAME, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE)": {
    "prefix": "*SURFACE",
    "body": [
      "*SURFACE, NAME=${1}, COMBINE=${2}, CROP=${3}, DEFINITION=${4}, FILLET RADIUS=${5}, INTERNAL=${6}, REGION TYPE=${7}, TRIM=${8}, TYPE=${9}"
    ],
    "description": "SURFACE with parameter(s) NAME, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE.",
    "scope": "source.inp"
  },
  "SURFACE(NAME, PROPERTY, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE)": {
    "prefix": "*SURFACE",
    "body": [
      "*SURFACE, NAME=${1}, PROPERTY=${2}, COMBINE=${3}, CROP=${4}, DEFINITION=${5}, FILLET RADIUS=${6}, INTERNAL=${7}, REGION TYPE=${8}, TRIM=${9}, TYPE=${10}"
    ],
    "description": "SURFACE with parameter(s) NAME, PROPERTY, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE.",
    "scope": "source.inp"
  },
  "SURFACE(NAME, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE, MAX RATIO, NO OFFSET, NO THICK, SCALE THICK)": {
    "prefix": "*SURFACE",
    "body": [
      "*SURFACE, NAME=${1}, COMBINE=${2}, CROP=${3}, DEFINITION=${4}, FILLET RADIUS=${5}, INTERNAL=${6}, REGION TYPE=${7}, TRIM=${8}, TYPE=${9}, MAX RATIO=${10}, NO OFFSET=${11}, NO THICK=${12}, SCALE THICK=${13}"
    ],
    "description": "SURFACE with parameter(s) NAME, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE, MAX RATIO, NO OFFSET, NO THICK, SCALE THICK.",
    "scope": "source.inp"
  },
  "SURFACE(NAME, PROPERTY, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE, MAX RATIO, NO OFFSET, NO THICK, SCALE THICK)": {
    "prefix": "*SURFACE",
    "body": [
      "*SURFACE, NAME=${1}, PROPERTY=${2}, COMBINE=${3}, CROP=${4}, DEFINITION=${5}, FILLET RADIUS=${6}, INTERNAL=${7}, REGION TYPE=${8}, TRIM=${9}, TYPE=${10}, MAX RATIO=${11}, NO OFFSET=${12}, NO THICK=${13}, SCALE THICK=${14}"
    ],
    "description": "SURFACE with parameter(s) NAME, PROPERTY, COMBINE, CROP, DEFINITION, FILLET RADIUS, INTERNAL, REGION TYPE, TRIM, TYPE, MAX RATIO, NO OFFSET, NO THICK, SCALE THICK.",
    "scope": "source.inp"
  },
  "SWELLING()": {
    "prefix": "*SWELLING",
    "body": [
      "*SWELLING"
    ],
    "description": "SWELLING without parameter(s).",
    "scope": "source.inp"
  },
  "SWELLING(DEPENDENCIES, LAW)": {
    "prefix": "*SWELLING",
    "body": [
      "*SWELLING, DEPENDENCIES=${1}, LAW=${2}"
    ],
    "description": "SWELLING with parameter(s) DEPENDENCIES, LAW.",
    "scope": "source.inp"
  },
  "SYMMETRIC MODEL GENERATION(PERIODIC)": {
    "prefix": "*SYMMETRIC MODEL GENERATION",
    "body": [
      "*SYMMETRIC MODEL GENERATION, PERIODIC=${1}"
    ],
    "description": "SYMMETRIC MODEL GENERATION with parameter(s) PERIODIC.",
    "scope": "source.inp"
  },
  "SYMMETRIC MODEL GENERATION(REFLECT)": {
    "prefix": "*SYMMETRIC MODEL GENERATION",
    "body": [
      "*SYMMETRIC MODEL GENERATION, REFLECT=${1}"
    ],
    "description": "SYMMETRIC MODEL GENERATION with parameter(s) REFLECT.",
    "scope": "source.inp"
  },
  "SYMMETRIC MODEL GENERATION(REVOLVE)": {
    "prefix": "*SYMMETRIC MODEL GENERATION",
    "body": [
      "*SYMMETRIC MODEL GENERATION, REVOLVE=${1}"
    ],
    "description": "SYMMETRIC MODEL GENERATION with parameter(s) REVOLVE.",
    "scope": "source.inp"
  },
  "SYMMETRIC MODEL GENERATION(PERIODIC, ELEMENT OFFSET, FILE NAME, NODE OFFSET, TOLERANCE)": {
    "prefix": "*SYMMETRIC MODEL GENERATION",
    "body": [
      "*SYMMETRIC MODEL GENERATION, PERIODIC=${1}, ELEMENT OFFSET=${2}, FILE NAME=${3}, NODE OFFSET=${4}, TOLERANCE=${5}"
    ],
    "description": "SYMMETRIC MODEL GENERATION with parameter(s) PERIODIC, ELEMENT OFFSET, FILE NAME, NODE OFFSET, TOLERANCE.",
    "scope": "source.inp"
  },
  "SYMMETRIC MODEL GENERATION(REFLECT, ELEMENT OFFSET, FILE NAME, NODE OFFSET, TOLERANCE)": {
    "prefix": "*SYMMETRIC MODEL GENERATION",
    "body": [
      "*SYMMETRIC MODEL GENERATION, REFLECT=${1}, ELEMENT OFFSET=${2}, FILE NAME=${3}, NODE OFFSET=${4}, TOLERANCE=${5}"
    ],
    "description": "SYMMETRIC MODEL GENERATION with parameter(s) REFLECT, ELEMENT OFFSET, FILE NAME, NODE OFFSET, TOLERANCE.",
    "scope": "source.inp"
  },
  "SYMMETRIC MODEL GENERATION(REVOLVE, ELEMENT OFFSET, FILE NAME, NODE OFFSET, TOLERANCE)": {
    "prefix": "*SYMMETRIC MODEL GENERATION",
    "body": [
      "*SYMMETRIC MODEL GENERATION, REVOLVE=${1}, ELEMENT OFFSET=${2}, FILE NAME=${3}, NODE OFFSET=${4}, TOLERANCE=${5}"
    ],
    "description": "SYMMETRIC MODEL GENERATION with parameter(s) REVOLVE, ELEMENT OFFSET, FILE NAME, NODE OFFSET, TOLERANCE.",
    "scope": "source.inp"
  },
  "SYMMETRIC RESULTS TRANSFER()": {
    "prefix": "*SYMMETRIC RESULTS TRANSFER",
    "body": [
      "*SYMMETRIC RESULTS TRANSFER"
    ],
    "description": "SYMMETRIC RESULTS TRANSFER without parameter(s).",
    "scope": "source.inp"
  },
  "SYMMETRIC RESULTS TRANSFER(STEP, INC, ITERATION, UNBALANCED STRESS)": {
    "prefix": "*SYMMETRIC RESULTS TRANSFER",
    "body": [
      "*SYMMETRIC RESULTS TRANSFER, STEP=${1}, INC=${2}, ITERATION=${3}, UNBALANCED STRESS=${4}"
    ],
    "description": "SYMMETRIC RESULTS TRANSFER with parameter(s) STEP, INC, ITERATION, UNBALANCED STRESS.",
    "scope": "source.inp"
  },
  "SYSTEM()": {
    "prefix": "*SYSTEM",
    "body": [
      "*SYSTEM"
    ],
    "description": "SYSTEM without parameter(s).",
    "scope": "source.inp"
  },
  "TEMPERATURE()": {
    "prefix": "*TEMPERATURE",
    "body": [
      "*TEMPERATURE"
    ],
    "description": "TEMPERATURE without parameter(s).",
    "scope": "source.inp"
  },
  "TEMPERATURE(FILE)": {
    "prefix": "*TEMPERATURE",
    "body": [
      "*TEMPERATURE, FILE=${1}"
    ],
    "description": "TEMPERATURE with parameter(s) FILE.",
    "scope": "source.inp"
  },
  "TEMPERATURE(USER)": {
    "prefix": "*TEMPERATURE",
    "body": [
      "*TEMPERATURE, USER=${1}"
    ],
    "description": "TEMPERATURE with parameter(s) USER.",
    "scope": "source.inp"
  },
  "TEMPERATURE(AMPLITUDE, INPUT, OP)": {
    "prefix": "*TEMPERATURE",
    "body": [
      "*TEMPERATURE, AMPLITUDE=${1}, INPUT=${2}, OP=${3}"
    ],
    "description": "TEMPERATURE with parameter(s) AMPLITUDE, INPUT, OP.",
    "scope": "source.inp"
  },
  "TEMPERATURE(FILE, ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, BSTEP, BINC, ESTEP, EINC, BTRAMP, DRIVING ELSETS, INTERPOLATE, MIDSIDE)": {
    "prefix": "*TEMPERATURE",
    "body": [
      "*TEMPERATURE, FILE=${1}, ABSOLUTE EXTERIOR TOLERANCE=${2}, EXTERIOR TOLERANCE=${3}, BSTEP=${4}, BINC=${5}, ESTEP=${6}, EINC=${7}, BTRAMP=${8}, DRIVING ELSETS=${9}, INTERPOLATE=${10}, MIDSIDE=${11}"
    ],
    "description": "TEMPERATURE with parameter(s) FILE, ABSOLUTE EXTERIOR TOLERANCE, EXTERIOR TOLERANCE, BSTEP, BINC, ESTEP, EINC, BTRAMP, DRIVING ELSETS, INTERPOLATE, MIDSIDE.",
    "scope": "source.inp"
  },
  "TENSILE FAILURE()": {
    "prefix": "*TENSILE FAILURE",
    "body": [
      "*TENSILE FAILURE"
    ],
    "description": "TENSILE FAILURE without parameter(s).",
    "scope": "source.inp"
  },
  "TENSILE FAILURE(ELEMENT DELETION, DEPENDENCIES)": {
    "prefix": "*TENSILE FAILURE",
    "body": [
      "*TENSILE FAILURE, ELEMENT DELETION=${1}, DEPENDENCIES=${2}"
    ],
    "description": "TENSILE FAILURE with parameter(s) ELEMENT DELETION, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "TENSILE FAILURE(ELEMENT DELETION=NO, PRESSURE, SHEAR, DEPENDENCIES)": {
    "prefix": "*TENSILE FAILURE",
    "body": [
      "*TENSILE FAILURE, ELEMENT DELETION=NO, PRESSURE=${1}, SHEAR=${2}, DEPENDENCIES=${3}"
    ],
    "description": "TENSILE FAILURE with parameter(s) PRESSURE, SHEAR, ELEMENT DELETION, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "TENSION CUTOFF()": {
    "prefix": "*TENSION CUTOFF",
    "body": [
      "*TENSION CUTOFF"
    ],
    "description": "TENSION CUTOFF without parameter(s).",
    "scope": "source.inp"
  },
  "TENSION CUTOFF(DEPENDENCIES)": {
    "prefix": "*TENSION CUTOFF",
    "body": [
      "*TENSION CUTOFF, DEPENDENCIES=${1}"
    ],
    "description": "TENSION CUTOFF with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "TENSION STIFFENING()": {
    "prefix": "*TENSION STIFFENING",
    "body": [
      "*TENSION STIFFENING"
    ],
    "description": "TENSION STIFFENING without parameter(s).",
    "scope": "source.inp"
  },
  "TENSION STIFFENING(DEPENDENCIES, TYPE)": {
    "prefix": "*TENSION STIFFENING",
    "body": [
      "*TENSION STIFFENING, DEPENDENCIES=${1}, TYPE=${2}"
    ],
    "description": "TENSION STIFFENING with parameter(s) DEPENDENCIES, TYPE.",
    "scope": "source.inp"
  },
  "THERMAL EXPANSION()": {
    "prefix": "*THERMAL EXPANSION",
    "body": [
      "*THERMAL EXPANSION"
    ],
    "description": "THERMAL EXPANSION without parameter(s).",
    "scope": "source.inp"
  },
  "THERMAL EXPANSION(DEPENDENCIES)": {
    "prefix": "*THERMAL EXPANSION",
    "body": [
      "*THERMAL EXPANSION, DEPENDENCIES=${1}"
    ],
    "description": "THERMAL EXPANSION with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "TIE(NAME)": {
    "prefix": "*TIE",
    "body": [
      "*TIE, NAME=${1}"
    ],
    "description": "TIE with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "TIE(NAME, POSITION TOLERANCE, ADJUST, CONSTRAINT RATIO, CYCLIC SYMMETRY, NO ROTATION, NO THICKNESS, TYPE)": {
    "prefix": "*TIE",
    "body": [
      "*TIE, NAME=${1}, POSITION TOLERANCE=${2}, ADJUST=${3}, CONSTRAINT RATIO=${4}, CYCLIC SYMMETRY=${5}, NO ROTATION=${6}, NO THICKNESS=${7}, TYPE=${8}"
    ],
    "description": "TIE with parameter(s) NAME, POSITION TOLERANCE, ADJUST, CONSTRAINT RATIO, CYCLIC SYMMETRY, NO ROTATION, NO THICKNESS, TYPE.",
    "scope": "source.inp"
  },
  "TIE(NAME, TIED NSET, ADJUST, CONSTRAINT RATIO, CYCLIC SYMMETRY, NO ROTATION, NO THICKNESS, TYPE)": {
    "prefix": "*TIE",
    "body": [
      "*TIE, NAME=${1}, TIE,D NSET=${2}, ADJUST=${3}, CONSTRAINT RATIO=${4}, CYCLIC SYMMETRY=${5}, NO ROTATION=${6}, NO THICKNESS=${7}, TYPE=${8}"
    ],
    "description": "TIE with parameter(s) NAME, TIED NSET, ADJUST, CONSTRAINT RATIO, CYCLIC SYMMETRY, NO ROTATION, NO THICKNESS, TYPE.",
    "scope": "source.inp"
  },
  "TIME POINTS(NAME)": {
    "prefix": "*TIME POINTS",
    "body": [
      "*TIME POINTS, NAME=${1}"
    ],
    "description": "TIME POINTS with parameter(s) NAME.",
    "scope": "source.inp"
  },
  "TIME POINTS(NAME, GENERATE, INPUT)": {
    "prefix": "*TIME POINTS",
    "body": [
      "*TIME POINTS, NAME=${1}, GENERATE=${2}, INPUT=${3}"
    ],
    "description": "TIME POINTS with parameter(s) NAME, GENERATE, INPUT.",
    "scope": "source.inp"
  },
  "TORQUE PRINT()": {
    "prefix": "*TORQUE PRINT",
    "body": [
      "*TORQUE PRINT"
    ],
    "description": "TORQUE PRINT without parameter(s).",
    "scope": "source.inp"
  },
  "TORQUE PRINT(FREQUENCY)": {
    "prefix": "*TORQUE PRINT",
    "body": [
      "*TORQUE PRINT, FREQUENCY=${1}"
    ],
    "description": "TORQUE PRINT with parameter(s) FREQUENCY.",
    "scope": "source.inp"
  },
  "TORQUE()": {
    "prefix": "*TORQUE",
    "body": [
      "*TORQUE"
    ],
    "description": "TORQUE without parameter(s).",
    "scope": "source.inp"
  },
  "TORQUE(DEPENDENCIES, ELASTIC, LINEAR)": {
    "prefix": "*TORQUE",
    "body": [
      "*TORQUE, DEPENDENCIES=${1}, ELASTIC=${2}, LINEAR=${3}"
    ],
    "description": "TORQUE with parameter(s) DEPENDENCIES, ELASTIC, LINEAR.",
    "scope": "source.inp"
  },
  "TRACER PARTICLE(TRACER SET)": {
    "prefix": "*TRACER PARTICLE",
    "body": [
      "*TRACER PARTICLE, TRACER SET=${1}"
    ],
    "description": "TRACER PARTICLE with parameter(s) TRACER SET.",
    "scope": "source.inp"
  },
  "TRACER PARTICLE(TRACER SET, PARTICLE BIRTH STAGES)": {
    "prefix": "*TRACER PARTICLE",
    "body": [
      "*TRACER PARTICLE, TRACER SET=${1}, PARTICLE BIRTH STAGES=${2}"
    ],
    "description": "TRACER PARTICLE with parameter(s) TRACER SET, PARTICLE BIRTH STAGES.",
    "scope": "source.inp"
  },
  "TRANSFORM(NSET)": {
    "prefix": "*TRANSFORM",
    "body": [
      "*TRANSFORM, NSET=${1}"
    ],
    "description": "TRANSFORM with parameter(s) NSET.",
    "scope": "source.inp"
  },
  "TRANSFORM(NSET, TYPE)": {
    "prefix": "*TRANSFORM",
    "body": [
      "*TRANSFORM, NSET=${1}, TYPE=${2}"
    ],
    "description": "TRANSFORM with parameter(s) NSET, TYPE.",
    "scope": "source.inp"
  },
  "TRANSPORT EQUATION SOLVER()": {
    "prefix": "*TRANSPORT EQUATION SOLVER",
    "body": [
      "*TRANSPORT EQUATION SOLVER"
    ],
    "description": "TRANSPORT EQUATION SOLVER without parameter(s).",
    "scope": "source.inp"
  },
  "TRANSPORT EQUATION SOLVER(CONVERGENCE, DIAGNOSTICS, TYPE)": {
    "prefix": "*TRANSPORT EQUATION SOLVER",
    "body": [
      "*TRANSPORT EQUATION SOLVER, CONVERGENCE=${1}, DIAGNOSTICS=${2}, TYPE=${3}"
    ],
    "description": "TRANSPORT EQUATION SOLVER with parameter(s) CONVERGENCE, DIAGNOSTICS, TYPE.",
    "scope": "source.inp"
  },
  "TRANSPORT VELOCITY()": {
    "prefix": "*TRANSPORT VELOCITY",
    "body": [
      "*TRANSPORT VELOCITY"
    ],
    "description": "TRANSPORT VELOCITY without parameter(s).",
    "scope": "source.inp"
  },
  "TRANSPORT VELOCITY(AMPLITUDE, USER)": {
    "prefix": "*TRANSPORT VELOCITY",
    "body": [
      "*TRANSPORT VELOCITY, AMPLITUDE=${1}, USER=${2}"
    ],
    "description": "TRANSPORT VELOCITY with parameter(s) AMPLITUDE, USER.",
    "scope": "source.inp"
  },
  "TRANSVERSE SHEAR STIFFNESS()": {
    "prefix": "*TRANSVERSE SHEAR STIFFNESS",
    "body": [
      "*TRANSVERSE SHEAR STIFFNESS"
    ],
    "description": "TRANSVERSE SHEAR STIFFNESS without parameter(s).",
    "scope": "source.inp"
  },
  "TRIAXIAL TEST DATA()": {
    "prefix": "*TRIAXIAL TEST DATA",
    "body": [
      "*TRIAXIAL TEST DATA"
    ],
    "description": "TRIAXIAL TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "TRIAXIAL TEST DATA(A, B, PT)": {
    "prefix": "*TRIAXIAL TEST DATA",
    "body": [
      "*TRIAXIAL TEST DATA, A=${1}, B=${2}, PT=${3}"
    ],
    "description": "TRIAXIAL TEST DATA with parameter(s) A, B, PT.",
    "scope": "source.inp"
  },
  "TRS()": {
    "prefix": "*TRS",
    "body": [
      "*TRS"
    ],
    "description": "TRS without parameter(s).",
    "scope": "source.inp"
  },
  "TRS(DEFINITION, PROPERTIES)": {
    "prefix": "*TRS",
    "body": [
      "*TRS, DEFINITION=${1}, PROPERTIES=${2}"
    ],
    "description": "TRS with parameter(s) DEFINITION, PROPERTIES.",
    "scope": "source.inp"
  },
  "TURBULENCE MODEL(TYPE)": {
    "prefix": "*TURBULENCE MODEL",
    "body": [
      "*TURBULENCE MODEL, TYPE=${1}"
    ],
    "description": "TURBULENCE MODEL with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "UEL PROPERTY(ELSET)": {
    "prefix": "*UEL PROPERTY",
    "body": [
      "*UEL PROPERTY, ELSET=${1}"
    ],
    "description": "UEL PROPERTY with parameter(s) ELSET.",
    "scope": "source.inp"
  },
  "UEL PROPERTY(ELSET, MATERIAL, ORIENTATION, ALPHA, BETA)": {
    "prefix": "*UEL PROPERTY",
    "body": [
      "*UEL PROPERTY, ELSET=${1}, MATERIAL=${2}, ORIENTATION=${3}, ALPHA=${4}, BETA=${5}"
    ],
    "description": "UEL PROPERTY with parameter(s) ELSET, MATERIAL, ORIENTATION, ALPHA, BETA.",
    "scope": "source.inp"
  },
  "UNDEX CHARGE PROPERTY()": {
    "prefix": "*UNDEX CHARGE PROPERTY",
    "body": [
      "*UNDEX CHARGE PROPERTY"
    ],
    "description": "UNDEX CHARGE PROPERTY without parameter(s).",
    "scope": "source.inp"
  },
  "UNIAXIAL TEST DATA()": {
    "prefix": "*UNIAXIAL TEST DATA",
    "body": [
      "*UNIAXIAL TEST DATA"
    ],
    "description": "UNIAXIAL TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "UNIAXIAL TEST DATA(DIRECTION)": {
    "prefix": "*UNIAXIAL TEST DATA",
    "body": [
      "*UNIAXIAL TEST DATA, DIRECTION=${1}"
    ],
    "description": "UNIAXIAL TEST DATA with parameter(s) DIRECTION.",
    "scope": "source.inp"
  },
  "UNIAXIAL TEST DATA(SMOOTH, DEPENDENCIES)": {
    "prefix": "*UNIAXIAL TEST DATA",
    "body": [
      "*UNIAXIAL TEST DATA, SMOOTH=${1}, DEPENDENCIES=${2}"
    ],
    "description": "UNIAXIAL TEST DATA with parameter(s) SMOOTH, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "UNIAXIAL TEST DATA(DIRECTION, DEPENDENCIES)": {
    "prefix": "*UNIAXIAL TEST DATA",
    "body": [
      "*UNIAXIAL TEST DATA, DIRECTION=${1}, DEPENDENCIES=${2}"
    ],
    "description": "UNIAXIAL TEST DATA with parameter(s) DIRECTION, DEPENDENCIES.",
    "scope": "source.inp"
  },
  "UNIAXIAL(COMPONENT)": {
    "prefix": "*UNIAXIAL",
    "body": [
      "*UNIAXIAL, COMPONENT=${1}"
    ],
    "description": "UNIAXIAL with parameter(s) COMPONENT.",
    "scope": "source.inp"
  },
  "UNLOADING DATA(DEFINITION)": {
    "prefix": "*UNLOADING DATA",
    "body": [
      "*UNLOADING DATA, DEFINITION=${1}"
    ],
    "description": "UNLOADING DATA with parameter(s) DEFINITION.",
    "scope": "source.inp"
  },
  "UNLOADING DATA(DEFINITION, RATE DEPENDENT)": {
    "prefix": "*UNLOADING DATA",
    "body": [
      "*UNLOADING DATA, DEFINITION=${1}, RATE DEPENDENT=${2}"
    ],
    "description": "UNLOADING DATA with parameter(s) DEFINITION, RATE DEPENDENT.",
    "scope": "source.inp"
  },
  "USER DEFINED FIELD()": {
    "prefix": "*USER DEFINED FIELD",
    "body": [
      "*USER DEFINED FIELD"
    ],
    "description": "USER DEFINED FIELD without parameter(s).",
    "scope": "source.inp"
  },
  "USER DEFINED FIELD(PROPERTIES)": {
    "prefix": "*USER DEFINED FIELD",
    "body": [
      "*USER DEFINED FIELD, PROPERTIES=${1}"
    ],
    "description": "USER DEFINED FIELD with parameter(s) PROPERTIES.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE, NODES)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}, NODES=${2}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE, NODES.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE, LINEAR, NODES)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}, LINEAR=${2}, NODES=${3}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE, LINEAR, NODES.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE, FILE, INTEGRATION, TENSOR)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}, FILE=${2}, INTEGRATION=${3}, TENSOR=${4}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE, FILE, INTEGRATION, TENSOR.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE, NODES, COORDINATES, I PROPERTIES, PROPERTIES, UNSYMM, VARIABLES)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}, NODES=${2}, COORDINATES=${3}, I PROPERTIES=${4}, PROPERTIES=${5}, UNSYMM=${6}, VARIABLES=${7}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE, NODES, COORDINATES, I PROPERTIES, PROPERTIES, UNSYMM, VARIABLES.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE, LINEAR, NODES, INTEGRATION, TENSOR, COORDINATES, UNSYMM)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}, LINEAR=${2}, NODES=${3}, INTEGRATION=${4}, TENSOR=${5}, COORDINATES=${6}, UNSYMM=${7}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE, LINEAR, NODES, INTEGRATION, TENSOR, COORDINATES, UNSYMM.",
    "scope": "source.inp"
  },
  "USER ELEMENT(TYPE, OLD ELEMENT, STEP, INCREMENT, FILE, INTEGRATION, TENSOR)": {
    "prefix": "*USER ELEMENT",
    "body": [
      "*USER ELEMENT, TYPE=${1}, OLD ELEMENT=${2}, STEP=${3}, INCREMENT=${4}, FILE=${5}, INTEGRATION=${6}, TENSOR=${7}"
    ],
    "description": "USER ELEMENT with parameter(s) TYPE, OLD ELEMENT, STEP, INCREMENT, FILE, INTEGRATION, TENSOR.",
    "scope": "source.inp"
  },
  "USER MATERIAL(CONSTANTS)": {
    "prefix": "*USER MATERIAL",
    "body": [
      "*USER MATERIAL, CONSTANTS=${1}"
    ],
    "description": "USER MATERIAL with parameter(s) CONSTANTS.",
    "scope": "source.inp"
  },
  "USER MATERIAL(CONSTANTS, TYPE, UNSYMM)": {
    "prefix": "*USER MATERIAL",
    "body": [
      "*USER MATERIAL, CONSTANTS=${1}, TYPE=${2}, UNSYMM=${3}"
    ],
    "description": "USER MATERIAL with parameter(s) CONSTANTS, TYPE, UNSYMM.",
    "scope": "source.inp"
  },
  "USER OUTPUT VARIABLES()": {
    "prefix": "*USER OUTPUT VARIABLES",
    "body": [
      "*USER OUTPUT VARIABLES"
    ],
    "description": "USER OUTPUT VARIABLES without parameter(s).",
    "scope": "source.inp"
  },
  "VARIABLE MASS SCALING()": {
    "prefix": "*VARIABLE MASS SCALING",
    "body": [
      "*VARIABLE MASS SCALING"
    ],
    "description": "VARIABLE MASS SCALING without parameter(s).",
    "scope": "source.inp"
  },
  "VARIABLE MASS SCALING(TYPE, DT, ELSET)": {
    "prefix": "*VARIABLE MASS SCALING",
    "body": [
      "*VARIABLE MASS SCALING, TYPE=${1}, DT=${2}, ELSET=${3}"
    ],
    "description": "VARIABLE MASS SCALING with parameter(s) TYPE, DT, ELSET.",
    "scope": "source.inp"
  },
  "VARIABLE MASS SCALING(TYPE=ROLLING, CROSS SECTION NODES, EXTRUDED LENGTH, FEED RATE, FREQUENCY, DT, ELSET)": {
    "prefix": "*VARIABLE MASS SCALING",
    "body": [
      "*VARIABLE MASS SCALING, TYPE=ROLLING, CROSS SECTION NODES=${1}, EXTRUDED LENGTH=${2}, FEED RATE=${3}, FREQUENCY=${4}, DT=${5}, ELSET=${6}"
    ],
    "description": "VARIABLE MASS SCALING with parameter(s) CROSS SECTION NODES, EXTRUDED LENGTH, FEED RATE, FREQUENCY, TYPE, DT, ELSET.",
    "scope": "source.inp"
  },
  "VARIABLE MASS SCALING(TYPE=ROLLING, CROSS SECTION NODES, EXTRUDED LENGTH, FEED RATE, NUMBER INTERVAL, DT, ELSET)": {
    "prefix": "*VARIABLE MASS SCALING",
    "body": [
      "*VARIABLE MASS SCALING, TYPE=ROLLING, CROSS SECTION NODES=${1}, EXTRUDED LENGTH=${2}, FEED RATE=${3}, NUMBER INTERVAL=${4}, DT=${5}, ELSET=${6}"
    ],
    "description": "VARIABLE MASS SCALING with parameter(s) CROSS SECTION NODES, EXTRUDED LENGTH, FEED RATE, NUMBER INTERVAL, TYPE, DT, ELSET.",
    "scope": "source.inp"
  },
  "VIEWFACTOR OUTPUT(CAVITY)": {
    "prefix": "*VIEWFACTOR OUTPUT",
    "body": [
      "*VIEWFACTOR OUTPUT, CAVITY=${1}"
    ],
    "description": "VIEWFACTOR OUTPUT with parameter(s) CAVITY.",
    "scope": "source.inp"
  },
  "VIEWFACTOR OUTPUT(CAVITY, FREQUENCY)": {
    "prefix": "*VIEWFACTOR OUTPUT",
    "body": [
      "*VIEWFACTOR OUTPUT, CAVITY=${1}, FREQUENCY=${2}"
    ],
    "description": "VIEWFACTOR OUTPUT with parameter(s) CAVITY, FREQUENCY.",
    "scope": "source.inp"
  },
  "VISCO()": {
    "prefix": "*VISCO",
    "body": [
      "*VISCO"
    ],
    "description": "VISCO without parameter(s).",
    "scope": "source.inp"
  },
  "VISCO(ALLSDTOL, CETOL, CONTINUE, CREEP, FACTOR, STABILIZE)": {
    "prefix": "*VISCO",
    "body": [
      "*VISCO, ALLSDTOL=${1}, CETOL=${2}, CONTINUE=${3}, CREEP=${4}, FACTOR=${5}, STABILIZE=${6}"
    ],
    "description": "VISCO with parameter(s) ALLSDTOL, CETOL, CONTINUE, CREEP, FACTOR, STABILIZE.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(FREQUENCY)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, FREQUENCY=${1}"
    ],
    "description": "VISCOELASTIC with parameter(s) FREQUENCY.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=${1}"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(FREQUENCY=CREEP TEST DATA)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, FREQUENCY=CREEP TEST DATA"
    ],
    "description": "VISCOELASTIC with parameter(s) FREQUENCY=CREEP TEST DATA.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(FREQUENCY=RELAXATION TEST DATA)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, FREQUENCY=RELAXATION TEST DATA"
    ],
    "description": "VISCOELASTIC with parameter(s) FREQUENCY=RELAXATION TEST DATA.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME=CREEP TEST DATA)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=CREEP TEST DATA"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME=CREEP TEST DATA.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME=RELAXATION TEST DATA)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=RELAXATION TEST DATA"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME=RELAXATION TEST DATA.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME=FREQUENCY DATA)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=FREQUENCY DATA"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME=FREQUENCY DATA.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(NONLINEAR, LAW, NETWORKID, SRATIO)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, NONLINEAR=${1}, LAW=${2}, NETWORKID=${3}, SRATIO=${4}"
    ],
    "description": "VISCOELASTIC with parameter(s) NONLINEAR, LAW, NETWORKID, SRATIO.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(FREQUENCY, DEPENDENCIES, PRELOAD, TYPE)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, FREQUENCY=${1}, DEPENDENCIES=${2}, PRELOAD=${3}, TYPE=${4}"
    ],
    "description": "VISCOELASTIC with parameter(s) FREQUENCY, DEPENDENCIES, PRELOAD, TYPE.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME, DEPENDENCIES, PRELOAD, TYPE)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=${1}, DEPENDENCIES=${2}, PRELOAD=${3}, TYPE=${4}"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME, DEPENDENCIES, PRELOAD, TYPE.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(NONLINEAR, LAW, NETWORKID, SRATIO, DEPENDENCIES, PRELOAD, TYPE)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, NONLINEAR=${1}, LAW=${2}, NETWORKID=${3}, SRATIO=${4}, DEPENDENCIES=${5}, PRELOAD=${6}, TYPE=${7}"
    ],
    "description": "VISCOELASTIC with parameter(s) NONLINEAR, LAW, NETWORKID, SRATIO, DEPENDENCIES, PRELOAD, TYPE.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(FREQUENCY=CREEP TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, FREQUENCY=CREEP TEST DATA, DEPENDENCIES=${1}, PRELOAD=${2}, TYPE=${3}, ERRTOL=${4}, NMAX=${5}"
    ],
    "description": "VISCOELASTIC with parameter(s) FREQUENCY=CREEP TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME=CREEP TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=CREEP TEST DATA, DEPENDENCIES=${1}, PRELOAD=${2}, TYPE=${3}, ERRTOL=${4}, NMAX=${5}"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME=CREEP TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(FREQUENCY=RELAXATION TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, FREQUENCY=RELAXATION TEST DATA, DEPENDENCIES=${1}, PRELOAD=${2}, TYPE=${3}, ERRTOL=${4}, NMAX=${5}"
    ],
    "description": "VISCOELASTIC with parameter(s) FREQUENCY=RELAXATION TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME=RELAXATION TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=RELAXATION TEST DATA, DEPENDENCIES=${1}, PRELOAD=${2}, TYPE=${3}, ERRTOL=${4}, NMAX=${5}"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME=RELAXATION TEST DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX.",
    "scope": "source.inp"
  },
  "VISCOELASTIC(TIME=FREQUENCY DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX)": {
    "prefix": "*VISCOELASTIC",
    "body": [
      "*VISCOELASTIC, TIME=FREQUENCY DATA, DEPENDENCIES=${1}, PRELOAD=${2}, TYPE=${3}, ERRTOL=${4}, NMAX=${5}"
    ],
    "description": "VISCOELASTIC with parameter(s) TIME=FREQUENCY DATA, DEPENDENCIES, PRELOAD, TYPE, ERRTOL, NMAX.",
    "scope": "source.inp"
  },
  "VISCOSITY()": {
    "prefix": "*VISCOSITY",
    "body": [
      "*VISCOSITY"
    ],
    "description": "VISCOSITY without parameter(s).",
    "scope": "source.inp"
  },
  "VISCOSITY(DEFINITION, DEPENDENCIES, PROPERTIES)": {
    "prefix": "*VISCOSITY",
    "body": [
      "*VISCOSITY, DEFINITION=${1}, DEPENDENCIES=${2}, PROPERTIES=${3}"
    ],
    "description": "VISCOSITY with parameter(s) DEFINITION, DEPENDENCIES, PROPERTIES.",
    "scope": "source.inp"
  },
  "VISCOUS()": {
    "prefix": "*VISCOUS",
    "body": [
      "*VISCOUS"
    ],
    "description": "VISCOUS without parameter(s).",
    "scope": "source.inp"
  },
  "VISCOUS(DEPENDENCIES, LAW, TIME)": {
    "prefix": "*VISCOUS",
    "body": [
      "*VISCOUS, DEPENDENCIES=${1}, LAW=${2}, TIME=${3}"
    ],
    "description": "VISCOUS with parameter(s) DEPENDENCIES, LAW, TIME.",
    "scope": "source.inp"
  },
  "VOID NUCLEATION()": {
    "prefix": "*VOID NUCLEATION",
    "body": [
      "*VOID NUCLEATION"
    ],
    "description": "VOID NUCLEATION without parameter(s).",
    "scope": "source.inp"
  },
  "VOID NUCLEATION(DEPENDENCIES)": {
    "prefix": "*VOID NUCLEATION",
    "body": [
      "*VOID NUCLEATION, DEPENDENCIES=${1}"
    ],
    "description": "VOID NUCLEATION with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "VOLUMETRIC TEST DATA()": {
    "prefix": "*VOLUMETRIC TEST DATA",
    "body": [
      "*VOLUMETRIC TEST DATA"
    ],
    "description": "VOLUMETRIC TEST DATA without parameter(s).",
    "scope": "source.inp"
  },
  "VOLUMETRIC TEST DATA(SMOOTH)": {
    "prefix": "*VOLUMETRIC TEST DATA",
    "body": [
      "*VOLUMETRIC TEST DATA, SMOOTH=${1}"
    ],
    "description": "VOLUMETRIC TEST DATA with parameter(s) SMOOTH.",
    "scope": "source.inp"
  },
  "VOLUMETRIC TEST DATA(DEPENDENCIES)": {
    "prefix": "*VOLUMETRIC TEST DATA",
    "body": [
      "*VOLUMETRIC TEST DATA, DEPENDENCIES=${1}"
    ],
    "description": "VOLUMETRIC TEST DATA with parameter(s) DEPENDENCIES.",
    "scope": "source.inp"
  },
  "VOLUMETRIC TEST DATA(VOLINF)": {
    "prefix": "*VOLUMETRIC TEST DATA",
    "body": [
      "*VOLUMETRIC TEST DATA, VOLINF=${1}"
    ],
    "description": "VOLUMETRIC TEST DATA with parameter(s) VOLINF.",
    "scope": "source.inp"
  },
  "WAVE()": {
    "prefix": "*WAVE",
    "body": [
      "*WAVE"
    ],
    "description": "WAVE without parameter(s).",
    "scope": "source.inp"
  },
  "WAVE(TYPE, INPUT)": {
    "prefix": "*WAVE",
    "body": [
      "*WAVE, TYPE=${1}, INPUT=${2}"
    ],
    "description": "WAVE with parameter(s) TYPE, INPUT.",
    "scope": "source.inp"
  },
  "WAVE(TYPE=AIRY, INPUT, WAVE PERIOD)": {
    "prefix": "*WAVE",
    "body": [
      "*WAVE, TYPE=AIRY, INPUT=${1}, WAVE, PERIOD=${2}"
    ],
    "description": "WAVE with parameter(s) TYPE=AIRY, INPUT, WAVE PERIOD.",
    "scope": "source.inp"
  },
  "WAVE(TYPE=GRIDDED, INPUT, DATA FILE, MINIMUM, QUADRATIC)": {
    "prefix": "*WAVE",
    "body": [
      "*WAVE, TYPE=GRIDDED, INPUT=${1}, DATA FILE=${2}, MINIMUM=${3}, QUADRATIC=${4}"
    ],
    "description": "WAVE with parameter(s) TYPE=GRIDDED, INPUT, DATA FILE, MINIMUM, QUADRATIC.",
    "scope": "source.inp"
  },
  "WAVE(TYPE=USER, INPUT, STOCHASTIC, PROPERTIES, DEPVAR)": {
    "prefix": "*WAVE",
    "body": [
      "*WAVE, TYPE=USER, INPUT=${1}, STOCHASTIC=${2}, PROPERTIES=${3}, DEPVAR=${4}"
    ],
    "description": "WAVE with parameter(s) TYPE=USER, INPUT, STOCHASTIC, PROPERTIES, DEPVAR.",
    "scope": "source.inp"
  },
  "WIND()": {
    "prefix": "*WIND",
    "body": [
      "*WIND"
    ],
    "description": "WIND without parameter(s).",
    "scope": "source.inp"
  }
}